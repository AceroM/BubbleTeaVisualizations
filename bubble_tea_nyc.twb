<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ny_city_tea' inline='true' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_city_tea' name='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj'>
            <connection class='semistructpassivestore-direct' directory='/Users/angelalim/Desktop/BubbleTeaVisualizations/data/nyc' filename='nyc_nta.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj' name='ny_city_tea.json' table='[ny_city_tea.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[ny_city_tea.json].[Document Index (generated)]' />
          <map key='[alias (categories)]' value='[ny_city_tea.json].[categories.Value.alias]' />
          <map key='[alias]' value='[ny_city_tea.json].[alias]' />
          <map key='[categories Index (generated)]' value='[ny_city_tea.json].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[ny_city_tea.json].[display_phone]' />
          <map key='[distance]' value='[ny_city_tea.json].[distance]' />
          <map key='[id]' value='[ny_city_tea.json].[id]' />
          <map key='[image_url]' value='[ny_city_tea.json].[image_url]' />
          <map key='[is_closed]' value='[ny_city_tea.json].[is_closed]' />
          <map key='[latitude]' value='[ny_city_tea.json].[coordinates.latitude]' />
          <map key='[longitude]' value='[ny_city_tea.json].[coordinates.longitude]' />
          <map key='[name]' value='[ny_city_tea.json].[name]' />
          <map key='[phone]' value='[ny_city_tea.json].[phone]' />
          <map key='[price]' value='[ny_city_tea.json].[price]' />
          <map key='[rating]' value='[ny_city_tea.json].[rating]' />
          <map key='[review_count]' value='[ny_city_tea.json].[review_count]' />
          <map key='[title]' value='[ny_city_tea.json].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[ny_city_tea.json].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[ny_city_tea.json].[transactions.Value]' />
          <map key='[url]' value='[ny_city_tea.json].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_city_tea.json]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_city_tea.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_city_tea.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Ny City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.559441' measure-ordering='alphabetic' measure-percentage='0.440559' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8194352.8778034812' min='-8253994.1740365922' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4988340.6862074751' min='4952555.9070456494' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{64805FE1-FDDB-4F91-8F41-7B7060DA1F73}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Ratings'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8212945.0406662421' min='-8236710.358360284' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4981173.843812312' min='4966135.9033528334' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{15180E0B-8209-4E63-9CBE-D6DA149E45E4}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Bubble Tea vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3F09A9D7-FCAA-4571-B27F-4B6759B6BB69}' />
    </window>
    <window class='worksheet' maximized='true' name='Bubble Tea vs Ratings'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8632FE1-CAF5-447B-9EF6-73C4059304B0}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea vs Price' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Ratings' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d5Qc130u+N1KnWd6ch4MZhAGGSAAEgRIiALNKJIiJdKSKKcnS7b8HF7w
      83urt8dn7ee3e84GH9u78tprH8m2ov0kUaZEgZQYxQyCBEjkDAwwOfd0d3V3hXv3j+pbU91d
      Had7ZkDxO2cOMD1dVbeqfvfeX/x+ZH5+nimKglKgJlToup7+jUAUhJzv6CbDuRuzmI+lsLG7
      Aa0NfoCxouemjIJRBiIQyJJsXYEQ+1/ici0A0HUNhmEAAERBxKlrM3j91AgAYGNPIw7t7AFj
      DFORJJ5+8xIMkwIAFFnEZz62EQGvVNK9c0iSBFmWQQiBkB4TZQzxeMwaK4jrcYwxUGZdWyCC
      fW9u35MkCYqiQBDcv0cpRSqVsu8737nynZ8xZj3TrOO8Xi8kqbznAQCJRAKmaZZ9XDkghMDv
      95d1r6VAUhQFPp+v6BcNw4AZN+2XDiDnBRkmw3dfPovXT42AMob6gILf++QurOusL3huxhio
      SQEC+Lw+SHLmBCh0nGHo9ssUBAF97WH89L3riCd1fGJfoz3e9sYA7tvbj6PnxyGKBLdv6kRd
      wFP0vrOvFwwGIQiCfe+MMcQTKhgAkQgZz8cJPT1OSimISCAKouv5GWMIBAKQJCnvBEgmk6CU
      QhTFkp5T9vkppSCE2MdzGIYBr9cLOf38S4UgCIjH42UdUw4YY1AUBYqiVDRBC6GkszHGoCZU
      IGMhz11BRmZiOHJuDDS94kfiGp4/NoT1XTvA8uwCjDGY1LT/LopiRbNcFKzj6gMK/tMTewAA
      QtZp+tpC6GsLlX1uLjh8p3SunqZpIqGqBYUfsITENE37XPmu4fP5Cgq/aZpIJBIFr5UPfMK6
      rf6AtbNEo1EEg0GUqhUAgKIoEEXRnpj8fqq1KxBC4PF4ciZsJaCUQtM0eDweaJpW2gQwTBPJ
      ZDJrULnfM83cl6sbtOC5GRaPqUTw+WrmPDZb8KsBQRAgy3LO9WLxGBgDhCIXFYgAJliCAYac
      5+Rc5fIJP2MMqqrmXUxKQT7h5+CTIBQKQRTFkoSOEAJJkhAMBu1xAtZkTaVSIITkyE+pEATB
      XhSqof5omoZ4PI5UKgXTNAtPAH4jqhrP+dxtC+9qDmCwtxEnrkwDALyKiDu3dhVc/blA8XOW
      c5OarqXPLSKiaqj3l75qlQo+dq/XawsP/yylpZDSNAgljJkQy2YSiGzZO1nPRBAEeL3evMIP
      ALqu2ytspSj2fO2JHYtBFEXU1dWVLXj8+5IkQZIkMMYgyzI0zbLXKM28f0EQ7F2Pf853KlmW
      IUkSDMOwv1MpLJXZACHE3p3yTgA+EMMwkEqlMj4XXIQfADyyiN+8fyvePjuOuVgS29Y2Y1NP
      Y8EBObdksQz9jm9lBgX+6qn3cGMqigdu7cMnbl1b8jmKwan68JXZiUQiAZIeCyPuE9j5ovnf
      GGVgYPZk4qpPMeGPx+M55/N4PBWvrtnIvjalNMPWWMp5JUmCKIr2osf/BWCv7s7r879xYR0Z
      GYGiKGhtbS3bRnEiWy0rKnFxx+pvCb8AocA2WudXcO/u3qIDsXR/mmlE6zpkWYaQnhSFjtW0
      FBijGJtN4NyNWQDA6ydH8MDetVVRgbig+Xw+W/idE4BSCiP9MLkgm9SEJEppjw8DAWBS0xYi
      URBhUusYyigELK54XMjcVjjGWI7wA5bu7fV6YRiG7RGqJgKBQFX0biBT9eIrvdPLlw3+HBhj
      mJqagq7rMAwDiUSi4glACEFdXR1isZjtzcy7nxBCoBs6NE2zB0IIKejCKwfWy2QZv+uGDjUe
      d90mnaCUQtd1iEREZ1MQ6zrD8CkS9m3urJrwE0IQCARs4ytbMC1dPr8xaxh61u8GDNOwz80n
      DAB7cuXb3vnzyEYqlbKN1lI8eeUgEAjYhnChd1EJuMeumD0CAPF4HNFoFIC1Uzi1kUqv7ZxA
      BVWguKra/wdQto5e6NwmNRdVAod7TqMaDNOAIiuW8GUZP4wxpLSUfTMeieC/fGYvogkNDcHy
      3Jr5IEkSfD6fLfj5VihRFHN88XzFB7HiAyCZq5lzAlBKwQRLxXITBr7yL8ZecsG9QnyhqgZ8
      Ph88Ho89XtM0M1y/ywXDMDA9PW3HRqydX7O9aZV6DJ3IOwF0XYfueKiVXCyfd4cHhDI+S+ub
      3Fee0lLQDQOhYDDDNjBNE4auZ0xGSSS28JuU4YXj16EmDdy7e03ZgS4eFyn2svkOsRCNgjlW
      Z37PAhHAGLX+zdL3+b1yuBm/jDFEo9GSVJtyVsViHjePxwOv12vtyLpuj2u5hZ8xhtnZWWia
      Zi8ghBD4fL6Sdo5C4AE/XdfdJ4C1+i/q/lz1qQSGaaTtBiFj5XOu/k6B4Csk/0w3DHsCMMaQ
      SiUzorDZePvcOP755fMAgKRu4HN3bSx5rDzaWKqnQZEV1NfVwTAM6LoBw9BtI8sp8M7z83gA
      YC0q9XX1kGU5Q9dmjCEWi1Vdr+fj4bYcFyingHH9XFVVaJqGYDBor778HVVrMjDGsLCwAJ/P
      Z0fXOVRVxcLCAgDYxrOiKKivr1+SJ4iDB9RcJ4Cma/a2yx9WuXDquIZpQiAUoiBmCAQXcqeO
      6ZwYgBX1lGQJoiBC09K+WzH/qu50SZbinsw4tswXS4iVtiGJEjxK2vdNKUzTgK7rSCSTQJZB
      zz03kiTD6/VAluSca0YWItA0rWoqpxP8WRNCEAwG4fF4YJqmvarquo5YLGYLeywWg9/vRyqV
      sidLNTxDgOVFm5ycBCEETU1NCIfDttdnenoalFJ7QjY1NcHv91fNKOfIkSSn7s9RyepveUIs
      FUAWRVBK7QkBLAo/1+eARU8Bf0GWDk6gxuOOzwsL6b7BdugmhZrU8fEd3WWNudDWmu2yzXeM
      KIqALMPr8UJRFMRiMVvAAMDvDyCQJ6eFMYZoLGqrNCalEGugenC/vKIodlAoHyRJgqqq9rvi
      aRrVAPfJU0oxNTWFaDSKlpYWRKNRO4AmiiLC4TDq6wun01QCURRBVFVlTg9CMpXC3PwcCFkU
      fFEU7SQvZyAoH/jqz4NlhBAYpgnm0P0Nw8jwyWYHmdzSARhjkMTqRATdIMsyQiH3VAkedxBF
      seSoJJ/kaiIB3dDh9Xrh9/ryCn9cjSOenuz8M0EQXIOOlcCpbvKobSn2Q3ZwKhQK5agslUDX
      dVy/fh2CIMAwFj1k/Fp8knZ0dFRF7XFDxlRmzMr5EQixgl2MAYSAgGAulsILx65jcl7FtrXN
      2L+5E5JY2FdvmIa1IjLL8CWAPePdJlG2fpot/JXonowBY7NxDE/H0N7gR09LCPlOYZqmve1m
      j4tSimQyabtFSxkH95yE0sIGuBufjDEkEgnE42qGACzF9soLspjWUWoCW3aAKpFIlJwm4QR3
      B5umaXtzuDyIaS3BGQDj74J7oWoByWncaLoOQ9fTD57YCT+aQfG1507h9LUZAMDxS5NYUDUc
      2tkDvyd3OySEQBIl0LQLzSnqfNW3vSVpA9kwFw2+vK7HCoThnfPj+NaLZxFP6vAqEh6/cz0O
      7exx/a4zUSr7pZcSrc2HYkG9ZDKJaDxmT0xbBayiDcBVUv6uk8lk2b59biRzL1ExGIaBaDQK
      TdMy0jj4as/HlW+83MU7Pj6OxsbGmqRDC7phWIJvGo7AjGivwIQQTEUSuDQybx9kUoYfvn4J
      X/na63jmyFVQl3uwXqBgqywEiyupU+/n+fWyIwXabQUWKhCGlE7x03evIZbQwRiQSBn46bvX
      oKbcvSt8hcoHnttSzZeQSqUQjUXtKoJaCD8AW/j5OZOp8icAANsjVGxFZowhEokgEonYcQr+
      7p2yxXdJp1vYGXPgqThTU1OYnZ2tet2BoMgyvB7LG6Gl9cHsx+6VRShS5nZHGcOCquGp1y/i
      2MXJwldxPGdZkjMevKZpSGmpjGiom6FZrkeHjzGpZz6wlE5hmO4vnm+72XAma1VzRU4kk1iI
      LmR8Vg3hdzs227tW6fkNwyg5I5XvnE6hdcZ6nGPiKlC+yaFpGubn5zE+Pl613CfAkQqRSm9T
      xCXPvyHkxX17++BV3Io4gOOXJ/M+UJpOeeBprZS558ObpumqVzLGKk6/8Moi9mxos1OVCQF2
      rWtFyJc/l4Tn1WT775cafOHgAaZIJFIT4R+bVfH3h0/i8NFrMB1bs0CE9LkFCIJY8XX4McVW
      YqcA83fqVH+d+UDO2Ei2jUgIsXdd0zShqirGx8cxPz+/5MxYIG0EU0rtZCtBzN3aBAI8sHcN
      1rSG8Offfy/n715ZdBVqS+Ux0+4sKf3QcwfhtAeyX8pSBI8Q4BO3rkVznQ+XRufR2xLCga1d
      eY1gDj1tBxVz93FhdhpusiznVQ8YY4jF4+niokyPx1KE3+k6/udXzuHElWkQAH1tddjcu5iN
      KwhC/uSvMuD3+yHLctHdxOPxIBaL2e5MZyScH+NMh+fPzRmYc8Yt+ETRNA0zMzNQVRWNjY05
      Nls5kAzDQCKZgGkaAMlf0yoQgq19zdg50IL3L0/Zn/sUCXduy/W3O41rj8cKPTNKXQ1Z54PJ
      joguNd/DI4s4uK0LB7d1lfR9xhiSqVTRiihuvCYSiYzPCSHwer12/YDz+/F4HGoinqESLiXP
      KqVTPP3mJQxNRvGx7d24bbAdIZ81bkkU4FOq4693GqyKYuVoAVa0lpcpFlK7nL/zH24Hchco
      /7tb5Nz5mSzLME0TpmkiFoshlUqhrq4O4XC4oiCZlEwmwdJvhFgzoNCjwG8/tB0/fvsKzg7N
      Ihz04IG9a/OWGVJG7VWREAKTUtc8IOcN21fiQa/CA6o6KKOgugHd0AtOPk3TcoQfWHRpcruB
      r3zxeNxOL3GugACBVOEk/8mRK3j26DUAwPkbs+hoDODzd2/C+i6LjKCvva7sc2YjO3c/kUjY
      Ah+NRVFfH877nPKqxWn3JqXUFn7nqu+0B5ylpHziOGNGuq5jbm7O3g3K9RRJJjXtWeYMeOWD
      VxbxxJ3rQQ5mGlVO8EBY9hYPIK+Xxe08tYiCFgJ/0Yyli/QLfM9N+J1/V1UVPp8Puq7bbkCB
      CDkLgOVtrkztGZmJ2b+blOHVE8NoDvuxrrMe/e31VVk6uBHLd2lRFJFIJOxFU9d1yHkqtfhO
      AWTq/9nvuhDRgvPvzkg8ty947CaRSGBiYgLBYBANDQ0le+skfmKhzNW2kBeAIVPoncElj+Kx
      fhdFpNKuODcjc7mzDwEr9QBYNLzywVn87Qa+OqmOlBK+shFGcr7nfFalgjGGu7b34MSVKdur
      9eLx62AAFEnEr92zGQe2dJR1zkL3kpOrRa0x67oG4ve7HsudGs4V3Jnfw58hX/Gd53fmHPHP
      ssfilCu+m3C3azgcLqmcU7BOXL1cb274Zn+maRo0XQMI7EKTcLjBLnjO1v2rFQGNJw1E4ppr
      rCJ7jDxVw+v15tUneUS4UghkMTZSiR/eiW1rm/C/feFO/Ob9W+H3SLZpoRkmXnr/elFCglLA
      J2520Q7fyQrJjDPNgj9PLtBOx4fTA+h8Jq5FSECGt5Bf36luplIpTE9PY2xsrGiqh8QJrqrp
      385e0RijmQXdab++ri+Gw/mKy3PQlz4O4OUPhnH4nStI6Sa2rW3G5w9tylsfsJioR+D15C9O
      z3aRVgLu8WE81aTCZ88AnLo2jVc+GEYiK7g3Na/imy+exa6BVuxa17Kk8Wa7p51qXKGdMjvf
      C3B3gWZ7hID8E8v5faetwCeRLMv2dXmiX319Perr610XNaHawm8ymnO+VCqVoTLE43HE4zG7
      isnynKTz0snSyi65KjUyE8NTr1/EzEISsYSOt8+M4ZUTw67HOFka+Oqf7/rVytG39dglPPvn
      37uObzx/BtcnF5A9JaMJHa+dHMFf/+h9nEynsFQ6zmwV1SmoiqzkfVY+nw+BQMA+BkCG14dP
      HmdgrNDi5+YS52qQ097kOxU3kmdnZzE2Nuaa+1RVmi3KmJ1Ax5Gd82HdROZx1kA1aLoOsYjw
      GybDm2dGMbOQxO2bO9DesKh/js+peObtq5iYj0MWBaipxVJCBmB4KuqqetjbsSjCV4SapJpJ
      WfGkgZRuoiHoKRqbyIZJGX5+4kbO536PhL72epwZmrG/d3l0Htv6mqoxZAC5BFupVMouWufp
      JG513U5Z4ALKdf1iwp8PnDLF+b74+LjLlFKaUeDT2NhYuCCmEnAdOtuV6fSsAItbWPZsTiat
      Sq98HKAcT791Gc+8fQUA8MbpEfzJr+1H0CtheiGJ//1fjmI+5q7zCYRgQ3eDq/oiEMGyTdLV
      YM5xOY0zrg8vFSZl+OEbl/HqiRvQTYqelhC+cP/WjMlcDJS5k475PTIe2NuHy6PzSOkmvIqI
      7WuXpgI5QQixmS8YrIIZXi+QD1wGnKs/P1e2GlTuWOwgosO2cLpu+W7AJ+XCwgKSySTC4TBC
      oVD1JgBXI9xuxJkP4tyi+E1wlFKHe+rqtP377EISozMx+BQJf/GD91yFv6nOC68iYff6Nuzf
      7O4VYczi/ORRXOd2qiYSkGXJrtziOUHOIpdy8fqpURw+csVWWy6OzOPvfnICf/wr+0r2w8ki
      wY6BVrxwbCjj8239zdja14z/8pm9uDAyh8HuRqypgA6yGAhZ9BlmJ7NlgwukU/Vxyko5z9Gp
      SnG5yvYUZS+wjFlF9Xw3SCaTmJqagqqqkKrn+cnV/d3O7dwN+GrKg17FPD+MMewYaMG1CSuH
      RhAIYgkdr54Yxlyelf/xOzdg50ALPHL+NAxOCOvUHVNaColEArquo74+nPH9YDAIwzBsprNy
      QAjBsUuTOTr7jakopuYTaA2XTm/y6TvWIZHS8cEVKzK/bW0LnrhzAwCGte11WFuFQFgpKKS6
      cC0gO6/fzc5yepyAxfqM7Ogwzyp1O48zdYIbx87Flh/PI/nSuxcmsK2/FT6XRLdSUUpSktPy
      58cQQYDILfoS9T+PvDhOkzL87TMfoL0h4PrdkF/Bxp6GPEl8zNYTPR5PhvCrCRXR2CLdufM1
      8e9JkmTX06qqWtZEcBuPQAgUubx34FVEfPGBbYgmLGeClQZRPf6eUlFoEeUCaFPYp12VzmMU
      RbGzBbJVaP4vF/psihi3SZRtrPOJwFUk7tUihEA4en4cLx6/XvHNM8bslId84BmBPJ9eFEUQ
      gYClc9RL1QGTupkzVq4H797QhsaQF0GvDFkS0FLvw5ce2FaQK0gURZsFgl9f0zXE4nHIogRZ
      lAp6hPhqUk5WImMMd+3oyUkv37OhvUJeI4aQT05nuC6/8AP5dwC+yPBAWHYtASHE5iByK381
      KYVBDZiUghFrovBEPDePED9n9o9zIgCZu4YEAD6Xqq5SwFMeiiH7AVGHF4Ch9KCXpptIarnX
      MynDHzy6y0pR0AwsxDU0hrx5Szb5yhIIBDJqEHiCldMT5U1nGhaaoOWm5W7qacAfPLYLP3vP
      KtbZ3t+CB/b2LTm+sFLI92ycyW5cELnwiaJo8yHlw2INObP3YV6RZhhGwYAkV3OcaRSmaUKS
      JDQ3N9sBMum+PX3o7wjnPVEhcGrzYoZr5k1Z9QH8XYtC6RVWIZ+CnpaQzQXKsaWvyRZCryzC
      W0CP5kLGV34u/JRSK3UXJL07WQ+Pc9/nM+4rzUnfsqYRW9OuyZtV8DmKqUDAooNDEAR4PJ6i
      RfXc28RBWaYdwG22RCLh+vzcDGE+GSKRCNra2iyHxtr2OhTjts8HN8O3GAjh3VEICBFK1v2t
      Y4HfuG8LupsXi8y39jXjsQPryhoDL8N0Cjbni3ci2yvkBE9yU7MoZMqBW2LYzYhCPnynQSrL
      Mvx+v00FWcp5bfezy3sQRTEvgW+28Dtl1TAMTExMWHUfk5OTrBLfNuf5KXUCOFMkbGNEyCWd
      LelcsCqfZFFAa9hXkhA5vRGc+NX5gCKRSIbHIR8rdDKVgmHoUFW1JsRVNyN4xNUt74YLnizL
      OTUS1bx+vj5lTlepE36/36JIrPSihfL68w2SMgqwRSaISh8GAdDZ6LfPWw4sVjYpQ/h5IMep
      Hjndovx7mqYhGo3mJPutFEzKEEtYbBceuTa0IaWAx0fcJgD3llWDyLbQ9b1er2utsjNIBljv
      sb6+HsFg0HLMVHrR7EKFcgZLKV0yuwIDMDmnYmgyiuZ6H/raQkXzatwaXWialvHieEzAGVnk
      q4uV00/AiACkCW+Hp+M4e30Gfo+MnQMtZZPxOpHQTFwYngMAbOhusDI880zw6YUkvvnCGVwd
      iyAc9OKzd23E5jX5m5HUGlwNcgaqONvHcuySvOY8n0rKn2N9fb3d/glYQiqEQAQQkWRwzeRz
      S4mimNFnoBqqw8mr0/j6c6ewoGpQJBEP3z6AB2/tyxtJ5d6D7EgvL2zhbjqn0UspRWQhAsMw
      7B3LqY++dXYc//Sz00ilmSc6GgP4j4/vRnOdt+z7iSV0/PWPPsCFEWsCNAQ96O8I44G9fTkB
      LcqAp9+8bLeiiiZ0fPPFs/jjz9/mytO0HOBqDuDe8WU5wD1LTu8Qd3Vzvicu/HxsS9o3uUHr
      lt/uLHBWFA+IwCO9VoG828O5PhXDv755GccvTxX0aBsmw3NHryES18AYkNJN/Ozda4iquTz6
      3ADiwu9UaRKJRIYXx0l8RRm1SWoppTBoJo1jyqD43s/P28IPWAx0h9+5Wurjy8Dxy1M4d2MW
      lDJQyjCzkMTR8+P48++/hxvTsYzvmpRieDqa8dlsNIEFtfIeAdUwyPMFtJYTkiTB4/UiEAqi
      vb0dbW1tqKurQ3Nzs50S7RxbVRRHPhGcqQ084KUoimUIYdG15fZoJuYS+D/+5R08/eZl/D//
      ehxvnx3Pez3GWE48QDeo3QQ7+7u80Vp2lJCvFDwdggu/ZRckoKWjjoQQSFn8nJFYCrFk7oQb
      nopV9PKz8/k54kkdr50YyfhMEgT0t2eSxbaFAwiX2feYwxlprXQSUGa1jDJMo2z7sJTxmdRM
      88sWHh8hBHKagIEymhGAdS23rNZMJYTY3DOiIFq1oooCUZQy0gTy1R9cHJ1DPGl9jzHgxJWp
      vIIkSQJuG2yH6HDfbu9vRjiYyeTAvT7c++Bc/Z26Ip+o/D5M07SpS6wx56ps4aDHZmBworc1
      VJEQbVvbnDcSrKb0jOsTAjxy+wAObOlEa9iHwZ5G/Ma9W1xTLIrBLd2gkvEXJ1SoHFzNZi7d
      NV3HQqwElmJZqgAg7rz7M3/i9cioq1KLUdt3C4vWzqTmYuJSAbenLIl488woDJOCEOC+PX3o
      bXHPYiQA1rTVoa0hgIBXxr5NHXjk9oGMPCHAeqncnenc+nRdz9ATs4Ni8XgcjNdQpnX+bIgC
      QUPIi9PXZuydp7s5iF+7Z3NFkfWgT8bGHqvFbFJzpgwDD+0bQGdTZr6TVxGxc10L7tjahTu2
      dlZkd3A41R++UFQS37H01upWGFpnJGmVmCdNlnZuk5ogAiloiJP/9vUX2NhsAn/667dnrKiL
      J2EwKYMiVaYtZfv/C+Hq+ALeuziBNW112LOhbckLSnavLz4e7vMHLK+Pc4Ikk8mygltjcyrO
      35iF3yNja1/Tko3QaxNR/P3hk5iKqFAkEffsXoOH9/XXpPk3kFmzkZ1DU845aLoepFDzkmqM
      s5yx8ZqFBhfOIJ6kJwHAVESFSVnGBGAA3jozhueOXkM8qWN9VwOePDSIOn95LSrLGXA1U3gF
      QbA5YpxeH979xJnq4EyHKER34oaOBj86yihkKYa+thD+7Df2YzqSQMAnI+iVoRkmJheSUCSx
      ouqxQuD3zf9frvBTewLVjsLcObZyj2GUQk0mEPQHMuTAzg0ihODjO3syVvhoQsfR8xP4zktn
      bX7JI+fGMBdL4iufu9XWjVczsmt7GVvsuMi3e6/XUhuc/v7VkJogENh1AZF4Cl9/7jTO3ZiF
      Iou4b88aPLC3b0m1xNmoVO0BANgJkdVj8qgmCCFIJZPwKAoU2VLzne9YeuLgBvi8Cq5PRtHe
      GMDPTwzj+69egOZSbndxZA6Tc2pZRRvLDe6BymYr0DQto5UozwfiL900zSX3oK0mxudUnLs+
      i7PXZ+2Cl5Ru4pm3r2BrXzPWtFavymtJbkti5Wnmc22vNLhtoqoJSHVyzsIhHbs0ie+9ehEm
      ZfDIInSDZmTe3Uxw5vE4V3+nauP8jnPVW0pSW7VxfngeX/3X465uVs2gmI0mqz4BKgHPBxOE
      5aewLBeGoSORUBHwBzLjVZdG5mw1J6WbBYWfc05WC9VcMbhe58YNmU3L4gyKEUIqKm2sFQgh
      eOHYkKvwA0Bj0IPeKgp/NbCUvK7lAqNpcuJkIsNWKclkr/Mr2LSmCU9+fLAq+v/ITBwvHb8O
      NWXg1o3t2DHQvCSdlgu/s7aXwzTNjICX0+cPwKbMWE0ws2jsRIGgoymI5jovHti7Fk2hyl2e
      1QQPgK524QcWiZpj0Si0lAZ/mpGw6ARoqvPivz55GxorKtfLxXxcw//7o/cxOmORFL1/eRJf
      fmgHdvQ3V3Q+LvyKorgavtmGrVM9Wm7DlzFgLpaCRxbzJs0xxnBwezfOXp+xo93b+1vwxQe2
      wiOLrq7qlcJKpjyUCyf/kKaloBsaPIondwL0toYQT+qIxFOoD3jw5KHBqgk/AFwdi2B8dnHF
      TWomjl2arGgCcOHn/v7sRLdkMplh+Hq9XjskztObOZV5rTE+p+Jrz57C8HQUsijgYzt68Oj+
      AVeB3rG2Gf/+U7tx6to0GoNe7B1sW7Ektw8DCCEQIIARB0kXTbNCAEBXUxBtjX6s6wzjrh09
      SKQMTEcSaKr3ojFY3e3W75UhigTUWBxMnUtKQalw8/cDlt7v9Onzxg7Z6RDLsYIxBvztMycw
      lKZzScLET96+gtawH3du7cz5PiHAxu4wNnZXVqpa3tisumyefbgci8FKgKtrlFK7bRcIsSZA
      R1MAv/fJnYseEkVEY6h6q74T/R11OLClE2+eGYNpUqxpq8PB7aV1b8kGIRarQJbvDqwAACAA
      SURBVLYKYxhGhvDzogxnslsymVwSuVU5mIwkMDyVmb3JABy7OIGD27pWNPZg0sXcn2o15F6t
      4Kn5Ag/eMWoFwrb0NS/bS5BFAU8eGsQdW7qQ1E2saQsh6C0vuszhd/DSO/V6Z2WQJEkIBAI5
      yXCpVGrZ9FdFsvJXzKwkb29WCyPGgJmFJBZUDW0N/iUV15QKQgQwZgKkul651Qw74s0IpIdu
      60dPa20ZxDSD4vilSYzNxrGhuwEbuxsw0Flf/MA84EYvF3gn6VYqlcpwafr9/kxqb0oRi8cq
      KuivFI0hL3ZvaMPbZ8fszzyyiI/t6HZkYwKvnRrBD167CDVloKMxgC8+uA29LcF8p60KBEJA
      cXO4MqsNQkjlRfGlgjHg2y+dw0vvXwdj1mr4+bs3ldy0Lvd8lqAHg5ZgZOv+0WjUFipZlhEM
      BjO9QskkIpF5CIJYcW+uSqAZFM++cw0nrk4h6FNw7+412OIoYYzENfzJN9/K4Dfdu7ENX35o
      R80S4TiyiaN+kZCxxzKG9GpQvdTuiKrhrbOjdvhAMyhePTGM2zd1QC4zw9Tp8uRsc07VzSn8
      AOxWns50h3icF6xYOSzL5cdWJAGf3N+PRw8M2PfihJoyMujcAYv8lzJW1bwfN3xYDd9SIAHW
      KvrqyRH85MgVTEcS6GgK4NH967B7feuSL0CAnDA5IZXPMEKIrf44V61sXh+3tkuJZMKq73WU
      ay73qpfP1mqq82JNax0ujszbn23rb1lVfv8PIwRCCF4/NYp/eO4UJuastOjhqRj+5scf4MTV
      yjuLcNQHFBzc1mVv4x5ZxKFdvZBdGnKXAmfnQQ5OUMvBGQKcqo9hGFBVNUv4V8/Kp0gCfusT
      23Fwezc29jTgiYMb8MDe/EX+H6E6INPT0+yP/+ktjGQVXgMW5eAfPbFnyR4igzKcuTaDsTkV
      6zvDWNteV3ZOO1d9ePUWsJjGHIvFMtKcOeeL89hYPGZ7flZ7CJ+hZtWFHyELEgDMLLgXgcws
      LJYNlsv/w2EVlFs1u9srHCRjDB6PJ4fWBIDdg5fbB5wqzzkBdF2HaSz6/Fez8AMfCf9yQmKM
      obelzuajcYLX5DJYyUQCSteZDZPiyLlxnLo2g/aGAD6+s6fsajJgceV3a17HVR8u/D6fL4fz
      k+f7OCfOahb+j7C8kBhjeOyOdfjLp45lcNyEfAo+sa8/XTpG8e6FKZy5bgnzwe1dCHhkJDQD
      kii41gu//MEw/uWV83Zm49DkAv7twzvyUpbngxuhFbCYysDVHo/H40rB5+SM/EjwP0I2JAAY
      7GnAHz2xBz99bwhT8yq6moO4f2+fzcL8yokR/MvL52CkhfnS6BzCAS/OXJ9ByKfgkf0D2NrX
      ZG/dhsnwzvnxjLTeM0MzmIkm0VZmNZnTmOVgjCEai0LXLLchZwTLFv5s9oePcHMiZVCcujqN
      0Zk42hr82N7fDG+Z3XTywY4DDHTW43e7dth/4CurYTIcOTtmCz8AvH9pkbltYk7FN58/g698
      7lab14YQIODJVHcUWSybWcJJZJsv0U0SrVSHbK7R1Zjn/xHKRyyh46tPv4/zw4sq+tr2Ovy7
      x25BfWDpVD4ZEsl1aafXhxCXnJWsk8zFkpicXzSkRYHg/r19aAx5IRACryLivt1rymIuI4TY
      6cvZOr2aUO3WRG4rv5PQ9iOsfjBmBUgpzfU2PnPkSobwAxZ9zlOvX6zKtYtmW3FhHp6KIqKm
      IIsi2hv9uD65mN0Y8iloyiJmGuxpwFc+dyuuT0bRGPKitzVY0PVp0d9RO+rJE9iyoRu63Sgt
      EAi4ttnJx1X/EVYfYkkdP37rCs7dmEVr2I9P3bEOHY0WCRghxCYAzsaJK9O2G3wpKCndcPOa
      Rnzlc7fi2sQCmup8aK734jsvnsO5G7MIeGU8emCda5lec523ZMYyTqxkMkCS3Gm1ObWJSSmC
      gSACWYluwEeqz80ExoAfv3UFP3tvCABwfTKKuVgS//mX99rqspQnYCqW6UzJh5ImAIHFU+Ok
      Q/nth7YjmtDgkcSKOClzsTiTg2lffvYESKQrvELBIHxen2sOS7ldGz/CykE3aY56c2MqhvlY
      yu78c+tgO25k1VIAwG2DHUVX/1ICihXnAggEqPcrVRJ+2KRK3JfvtvqrCRV+vx8+r891ggBY
      NewOH6E4JIGgpT7TK1jnVxDwLTpQ7tvThwNbOjMEefeGNnxy/0DBcx8+eg3/89ffwDNHCtPV
      r5pCU6u2V4bPm+v2BCzB9nq88OZpt8OrvD7S/W8eCALBp+5Yh7loEjemY6jzK3jy0CACjvpn
      WST44oPb8NC+fozNxtEa9qO7OVhw9V9QNRw+chXxpI7D71zFHVu7EM7jMXKdAJpBcWF4zuIE
      7W6oalF8PgiCYOfuu00AQRDgS9OcZ3t8ANgF7sVgUoZLo/OYWUhiXWd4VbPc1QLnbszh0ug8
      mup82LO+teyU9GqjozGA//yZvZiLpRD0yu5VcIyhvcGP9obS+sL5vTK6m4M4PzyHrqZgwYrD
      nIIY3aD4x5+dxpFz46CMobXej9/95E701LAyiXP68LrdcvLTNc3q7O7z+yASwa4Ic3tIlDJ8
      /7WLeP7YdZgmRZ1fwZcf3oHBnoZq3s6qBAPwg9cu4fA7V+zajHWdYfzhE7vzBpWq4WVZKSR1
      E8PTMXQ1BeCV8+d+5Uja1YkFHL0wAZNazawn5lW88sGNmg2U05o4G1SUc2xcjVsMwLE44gkV
      isdjdwHMxtRCEj8/OQzDpGCwinV+9t5QTbl+owkdQ5NR6C7da6oBTm2eHb/JxuR8As8dvZpx
      r5dG5/HGqdGc704vJPG91y7i7w6fxLsXJnPYAm+G6jFFIuhrDUCRCo8zZ7/RXQISKd2s2WrA
      A17lMhQzxpBMpaDrup3dSQ0TsVgsb4MGw6Qwzax704yapR8PTUbxFz84hgU1hXWdYfyHT++G
      r0pOAycMathFR6IourI0T86rOYxzADA6k5kGr6YM/N1PTtiFOe+eH8cX7t+G2wbbAFg5Xi8c
      G0JLvR+9rSF0NQexc6AlpznJSkMgAohQfKLmTICOxgBCfsWuTZUlAbcOttdE+HmaMzdqnaqP
      s2NJPiQSqr0CZpPhuqG13octfU04dnESgMVQsX9LV81qbp9/bwiRuPUcL47M4+TVady6sa3q
      15FFGZQ5dgFireJvnh5FLKnjlnWtaG8IQJYE6Fms33VZ0fnh6Riuji/Yv2sGxTvnxrBvUzuG
      p2P4zotnYVCG0Zm4zVq9viuM3390F0K+ytg9aoVSFtOcCXDi6jQW4g4acVFAU131DUXO0+nx
      eHKEHyhcqM2L27nLk5RoM8iSgN+4dwvWdzVgal7F1r7miikZS0HY4TwgBAhVqQ2VE3aNA1lc
      gWNJHX/74w9weSwCAHjz9Ch+5+Ed+OT+dfjBaxcy1KBXTwxj78Y2dKajr15ZhCQSGI4skoDP
      qq2OJfSMnDCOiyPzOHzkKj5z14aq31+tkTMBLo/OZ+h8Kc3A2EwcXVk9qpaKYqpPMT3T2Xes
      HIR8Mu7fs6b8AVeAB29di5mFJK6NR3DHtm4MdtfG2E7pJo6en8D4XBwbuxthUIprE4ureDyp
      48i5MazrbLD4iRzvdzaaxAeXp+wJ0NkcxMFt3Xjlg2EYlKIt7Mc9t1jPa11nGIokuPaOOHlt
      Gp8lG286o9mVG5SQRRJoryKhrYqU6MBikUu+1pVAYaYCqyWnkVMYv9rg90j48kNWHVytBIMy
      4Lsvn8erJ4fBGPCz94awd0N7DhGXKAh44/SIqx3gkRfFQBIInji4AXs3tiOW0NDXXm/70CWR
      IOhTMBvNTTFnjCGlmxX3klsp5Iz2jq2d+Nj2btQHPGgN+/H4wQ12XUA1wImsvC4+/dJPYnF9
      3gyrTTHvzFIxH0vh6Plxe8HSDauJ9rb+ZogCASFAe4Mfd+3odiUiGOisz2H/kESCdZ312DnQ
      khFAYoxh36YO13FMzKn4v394HHOxzECkmjJxfnge43NqTb1tlSJnB/ApEn7tlzbjsQM6JJHU
      hJWYF7mUS0vCM0Y1XUNCVV1re88Pz0M3TGzqbfyFoBQRXDwdXkXCF+7fiitjEahJAxu6w2gI
      enDP7jW4NrGAeFKHKBAc2NqFJw6uL4ua8pP7BzAdSeDdCxMZqrJJGU4PzeDF4zfw+J3rAFhe
      sP/re+8iltBBAOzf0olfv3cL5ColslUDrtJNCCqq3y0GbvjytqWVrP6UWg0vCDJfPCEE/+Pn
      F3D4HSv347bBdvzWJ7bXnFWtVnDWPxRCfUDBx7Z347mjV0GZZcT+0q5eBDwStvU1ZXx3e38z
      /uvnbsWl0Xm0hP3Y0BUue5FQJAG/88gOjM3E8c75cfzozcsZE2FyXrVd5i8eu45YwkpdZwDe
      OD2Kgc4wPr6ju6xr1hI5E8DZQrRS3dqk1PJKpxnYuF/ayepWyblNSqEmEqCm6errfun96/b/
      370wgc9+XMubA1IOFEWBaZrLVmBz5vosvvbsKegmxecPDeK2wfa83yUAPn3HOmxZ04TxORXr
      usJ5o/YEQGdTIKfpdtlgDB2Nfhzc1oU3T49ict5KPxcFgu39nGiZ4PzwbM6hLx2/jk29jXZa
      w0ojpyLMZNQ2MivRXRnP66dmxjk4rQpvYVTuBOBF8KlkEvnCVj2OzvIt9T74lOqobz6fD3V1
      da6kXNUGIQRfe/YUZqNJRFUN33rxLNRU4QxXQSDYvKYRh3Z2o7cluGy0Kg1BD377oe3Ys6EN
      G3usPtJOG6HBpUZkeDqGv3zqGBLa6qjWy+IGZbb7x8maZpgMs9EkQn6lpEgmXwEEgozVn7M4
      VwKrjWnSMpzzXPPLD+3AD9+4BN0w8dC+fnjk6ngk7Mm3TJmmzrQJ02RwcdysGvS31+HfPrwD
      DNkcpgwHt3Xj/I1cup3JORU/fvsKOhoD2DXQguAKBtAyJ0CW24wQgtNDs/jG82cwF0vCK4t4
      aN8A7trRXdDdJYmLp3Wu9EtRq0RRhCRJGQRX2WgMefDFB7Za91IllwPfsZZL+BljePLQIL79
      gtWk/LE71iG4DH0ClgKL6jX3nTTmaebHADybttVaw3784eO7VywrN+PJCsTqo0QIgcmAi8Nz
      +LufnMCCakWGdYPin18+hyPnxvDEwQ2uWZT5IrfA0iaAleFZPLxdbZej1+vN6DO2HNg32I5t
      6aYlK7k6LhWl9JuenLd2gy8+sHVF3NoZyzjnzGQQ8P1XL+KvnjpmCz8HA3BlLIJvPH8G8WTp
      1VdcBeLXKReaocNMB7+coAxIaCYMs/oPj+86K1FkE/BKN7XwA+necw5j1++RXKnes9tHLSdy
      9lZCCIYno/j5iRsZTHHZmFlIYD6WKqmNDw8GVe76pABjOZ6fBVXDU69fwoXhOTTV+fDpO9eh
      r73e6nqyxLpgQRAQCAQsXtGP6FUqQn1Awb977Ba8eXoUukmxa10rvv7cKdtrxNGzgo2/XaU3
      kTJgFMlfbwx5SyImcqo/2eRVpSKmxpFMJiESZ7Yo8MzbV/HzE8MAgLHZOBbUFP6XX78DDfV1
      oJTCNE3oug5N08raXnkHGm78foTK0dHox6fTgTEA+MxdG/G1Z0/anq2OxgAeuX1gxaL6rhOg
      pyWI7pYQrqXTYiVRQGdTAKIgYC6WRDjgweMHN5S1RVeq+zPGYOg6SDppn1JqNT0GcHE008Mw
      PhvH9LyKkN8i1JJlGYqiwOfzIZVKIZVKFdwZCCGQJAler9emVbwZ0i1uJtyyrgVdv3o7zl2f
      hUcRsa2veVmaAeaD65WDPhlf/sR2vHj8BiJqCrvXt2HPBiuPPZbQ4ZVFKBW6GCuZCB6PF3Ez
      DoOaENOqiWGa6GoK2pMUAMJBLwIeEfG41YVeEAQoimKzS3ODlrdI5eATRZZl6LqOeDy+qqlV
      buZSRQBoC/vQFq6sR1y1UbRJXjUeNl+1Q6FQRWoQL3oxTDOj2uvKyBS+/uxJXBuPoD7gwWc/
      Pojta5tcz8ET8HgwyzAMUEptChZd11c9nWJCM+02Vnfv6sX6rto30v6wo+ZdIoFFD1AwGKzY
      Dsg+Xzweh6ZpMCnDgqrB55FKYgzmdQjOrvGapiEWy+2Qs5pACME//PS0bfMEvDL++785UJVU
      j19kSABgmJZBIgiCa47NUsEFXpKWruuZpomFhQV7VxIFYrNSlwJOnJtIJOw2qrIsIxwOQ9O0
      nGZ7qwlO70lSM7CgVifX6RcZgpMR2j3JYGkIhUI20e1Sm1Pzlb+aUV5Kqa36cO8P36lWExhj
      +OWPbUR7YwAeWcQDe9fWvIn2LwLI2PgYI4RAIEJN2obyhnXcDliKusVX7mohHA4jGo3aLtpE
      IgGPxwOfzwrLx+Nxm4l6tcCgDJSym67yarVCAIiVAURq00KIUloVvk7DMKoq/Bw8VsDPnUql
      bBXL7/evunJLSSC/kMK/oOplZR6UCol7VRgsL8PxS5OYmFPR0RjA5jVNkEQCnyKBgeYUoZQC
      wzDg9VpJUW51vtnp0vnOX4tWR/lUKUop4vE4gsEgPB7PR22WlgGFvI2EEHz/tQsIBzz41B3r
      XL9T8XW5F2gulsJfPnUso/FFnV+B3yNhe38LHrm9Hx6ZQBBE13yOfBBF0W5d6kZom0imcGV0
      FjFVQ19HGC0NIVfO/0gkUnXfdzEXL2+8F4vFVnVc4GbG8HQcLxwbwlwshc29jTi0q8e1djmW
      NCAQVL1E1z7bU69fyhB+wMq1WVA1TBwbQjjowb239CCdklnyBfJ5VLjwf/eFk3j+2BB0w0Rn
      UxC/9+hubFjTltMOtVbEXIWgaRp8Ph88Hk9N1K9fdIzNqvg//8dRO+HyxJUpDE1G8VsPbrW/
      w99RwFOb3s4CYK2Ep665t6KxBmGRH5VLXAugIG/ltbFZPH9sKJ17xHB9MorDRy7n2AwrpYfz
      AJws31xZmU7PXvbPasIrJ27kZBu/fWYU0+kG7VaLXhOGaVZcoVgMtjS7bTscBMCatrqKBJEQ
      4roLWExjWg5V33w8lXOjvIh+JaBpWt5mHKsRfNKapmkvPvz31QRCCKJqbp0FAxYL6RkDAwMh
      hXmilgKBX+j2zZ2uXwh6Zezb3Im7d/VUfBE3FYYQgjXt4QzOIUkk2LuhPccGIIQsyX26FPBi
      GFmWQRkwFUlgcj7hSjC1GsAFngs//2y1gTGGrX25tJQNQQ+60jLB37skSq4UONWAbQM8dNta
      TM2rOHJ+HJQyiALB/i2deOzAOtQHPEXpRTJbq2bSlbgZkIQQNIdD+N1Hb8GzRy5jLpbCng3t
      OLS733W280S15Ya9mjLguy+dwxtnRgEG7NnYhs8fGlx1rMjAIq1kdgFSLXcxyhiuji/g0mgE
      nY0BbF7TCKGIa/22wXZcn4zixePXYVKKhqAXX354h80bZNV/13bnJVNTU8zOiUl3hknpJrpb
      QmgL+8Gb1yU10+q40RzM6fzo1C/zuTL9fr9NhJt9LG9oUYgvyDRNRCKRatxz2ZAkCccvTeIv
      fvCuzW5GAHzxwW3Yv9mdKW2lkM2qnW9hqjbeOD2Kbzx/Bpphtbp94NY+fOqOgaKpNYQQ29nS
      3uCvKplZKdxK0isfDGNiPoH+jnr86K0rmFlIoL0hgCfvHkRbulA5ltDxZ99+G5PzCUiigD98
      fHfZXVVUVYUgCDkN8DhVSjHwaO1KNMEzDAPjs7EMaj8G5FQ2rQa4kQzXGppB8eLxGzZpLmUM
      r54Yxr271yDky2146ARjDCGfXDVq9RtTMbz8/g0osoiLI3NoDHnxb+7bktd9Kp29PoN3L05l
      EOIOTS7gb378Af7TE3vQ1RTAiavTdid4w6T4+YlhbOptzFltij3seDyOUChUkVHJJ8pKdYHc
      2N0AryIimeazUSQRgz2NKzKW1Qgno4j1e/4+DbVCNKHjz7//nt2TAbDq17f3t+DOre42rr0/
      Ze8S87EU3jhttc9pbwhAcGxNnU25XfpKEWhKKXRdr9goW0lPTE9LCF96cDs29TZiY08DvvDA
      Vuza2AW/31+VFO+bGYok4OC2brvhnkCA2zd3IuiTcyZGLXHuxmyG8AMWVWQhcmd7X3DjfdfT
      HDz9HXX4zfu34o3To1jbXof791bOr889FOW6tZy9sFZC2Aixyvl4Qw1FliCm1TKPx2PbQbyI
      3jCMVeN6LKXbzlJxcFsXWsN+XByZQ2dTEDsHmiEsgxHLoRsUPz16LeOz9sYAfu+Rnehqzk8F
      KVlGq0VjNxdNQUu3BqnzK9jQ3YjD71yDVxFxYEsnDmzpXDGXGvfGrNQE4OBGmmla/chsV50k
      2XXIvOqMMQZN01a0sJ4xBsooKGMQed+sGgilKBBsWdOILWtWRi1UUwYmI5nRekoZGkKFa0Uk
      a+Wy+N0lUcCBLZ2oD3qwta8Z33/1Aq6k2+xcGYvYrGsmTZPT5qEprAWqUU9QC3AvltM24cY+
      r0UGsKKTgOviJjNBGCnbp25ShumFJEI+uSZ0+dVAwCujqymIc+oiIW9va6iomzrjbgyTQpYE
      /PLBDZiKJDDkaLPz/mWrsRxXYSioXUFWzsOstCkGT1xbbRPADZRSm4XC5/PB6/WCUroiWaWE
      EEiiBJOatppGGc3oKVYImkHx1z96H6euzaAx5MUfPLqrpj2jK4UkEnz+7kF879WLGJ+Nobe1
      Dk8c3FDUrZoznYenLHdfnV9Bb2sdro5bO8C2tZbuazJrNbFX5BJaUXJQajFPV0qOdTNmZCYS
      CavLvc8HSumy0ywCDsY/xkDLrPw7fW0GJ65YeWLTkQSeO3oNv/WJbasyutzdHMTvf3InUoYJ
      ryyWFFPImQDjc3HcmIqipyWI3390J147NQKfIuHObV0w0wxtHOWu5pTRJeXVKIpStQIbN9Qq
      aMTrjwOBQE3HXwh2dLjM43weCVaXBwt+r7QqhZ9DEkkGOXMx5DyPWELHuxcmAFh5GY/s68c9
      t/TCK1t1AJIo2epIOeqPldhUfldHJ/x+PwKBgN1ZvpoJUlb7JSvz0KzyTsNVIsYYgsHgiiX2
      VYKN3Q14+PYB1PkVbF/bjIf3Daz0kKoK16lSaOvgOmW5qwBf/SutO9Y0DaZpQpIkhEIWlyQv
      lKkWFm2MGnV0pNQev5PZYjWDEOCxAwN2JdbNMOZyIACWvs/R3hjI2wnQibLVH0qXlNHH9WdV
      VTE/Pw9VVWuqClX7RTvHKoqi3XFGluVVx0DhhtVYT1ANkFMXh1h9wIeTV6egGxRb1zZXnWuG
      Uqtlks/nRzAQqCgINj8/X/MXwPmRGGO2qldNhEKhnLwnHiwTBAGGYdicpB9heSC11HlBBFKw
      EdtSwN1uACBVaAAnU8mKYwCW16N0o7ZWk4xHiXnaBGMMyWQyw7PFiXm5vfARag+JMgqRWerM
      fCwFw6RorPNWNcBls7hVsNUzxqAmEjBMs+wJxHceURRLcv0txUAvBs4/yikZOSGXEyvRiOMX
      HRY1IgX+4fBJvHdxApQB/e31+OKD29BUJIxcCqgjbiBWYABrug4jnUBnmAyikL88kpfQCcRq
      xmemYw48XsHHkQ+1DrLx/CBCyIpltd4sWK6gpyAQAYffuYY3To8iqZnQdBPnbszin352uiq+
      EL6TV1LXa6kJCetBEAKaFmo39cCaIJaA8Rat/OL8b0aN2CXKgZOV+mZyh9YKzoJ9aruijaq7
      ovNBEkTBTnNw4spYBFFVy/AQlQtL2CpXf0zThK7p1u6R1pvzeZKcabd8lQXJrlazmm1LK1Rf
      zFd+HsPw+/2rnpV6KeBCbf0/V6ALEWEBbFl2AYmAwOfJrcaRJQFSAaaIUlNseWGEWCbrNG9P
      NBPV8PbZUaR0E7vXt6Gvrc71+wIRANFaYRdL4WCPkQE19fGXCtM07ZVfkiTbHvgwwkphz9/W
      Nt/ny7lLSyevTqO7OYjzNzLb2t+yvi1v5h8Dg2GaABgIEQrr9g4VqFRwXXkumsBXnz5uE3a9
      fmoEf/DYLehvzz8JZEm2Er9g1e3yUVFKgfQuspJJdU5vEFcLP4wTgKE0PZ6BLa5J6fqBSmzF
      SiG9dnIY716cyvlDIQJWa4LyUTMUdrCwklmh+cznbYzO3ZjFDUcLzUhcw9Hz43knALCY+AVY
      adv258gt21spxONxCIKA+vr6lR5K7cAYKFiOaORWElo1CkJaZV2+BHsLeRVzRSrQNgmWy5Ay
      KyW62KCFEgxgzgLm1NnltPvSKbhyCczIizXKAihdDDSlPyx6/EeoElgmjeYiAbJg88uudHq7
      qzR1NgVwewG6D845I4lSQdoLLrbcf1/oZnm5o67rtj98sLcBm9c02c+wozGA/Zu7AJCcGmY3
      8OS9zJ9FI5oy62clIEkSTNO86WgXy4GTloSxtCYgiLaKs9LCD2TtAL2tVr3vpt6m6qRD8JU8
      TYVSVB9MR0c5vLKI331kB04PzUAzTGzqbcKlkXn8/eETiCV0bO1rxuMH18OnuO9W+a4XTxr4
      zkvncPzSJBgYdvS34HOHBlG/BI9XIfDIL89i5S5QPgFWoh1rUjMRTxmo9yuQxOoLIiFW0xUz
      bQTXitltqciYAPfuXoPbS0iEKxVcdVFkpejNC4KARCKBeNLA6aEZMAZs7WtCwCth9/pWAMCJ
      qzP422c+sGkJX3r/OqYjKv7j47tLFiCTMvzlD4/h0si8/dmRc+OYmFPxlc/dWvXmE07WCJ7v
      k0qloOu6XSjj9XqXlX36gyvT+PZLZ7EQ17CmrQ5fuH9LmgStunAK/moUfiA9AQgB7t7VW1Dt
      KRecxYG7+oo9AEoppiNx/NVTx+w65LXt9fj3n9qFOr81gV4/NZLDyXl6aAbTkQSastjq8uHS
      yHyG8HNcm1jA2euzNutDsXsDiuuvvEieJ7llU8Jwl6jf7y/axLtaiCcNfPvFs5hKF5BfGJ7D
      v75xGV96cGtZfR9KwWoWfA7p7l29ePTABnQ2B8AYBWPVGTTX+xRFKfogvMtBJQAAGjZJREFU
      uO5//OKkLfwAcHU8gmMXJ3HXjm4AyBsdNMtQH2ai+TMtC/2Np1mYlKYNawJFKsx6xqO+iUQi
      r3BzvlO/349kMlnzFIlYQkdEzcw5Gp+Nw6QMQhFVqBSqwZsN0vquMERRTKcLmFYa8BJPameA
      EuRQIbp+H1YiGKdkcUIzrXyelG5ioCOM4xcnM5yZ/R31aK1f5DAthu7mYEaJHwdJ/y0fKKPQ
      DSc5b5q6u8jTopRCURTXFGdFUeD3+23KF6/XC0IIotGoy5mqg3DQg86mIK6NLxIebOhugFTE
      S3fk3ARePzUMyizSq/2bO4oSJt8MsG0Ayqj1KrNcV5XCIru1PC/FXKCmaUDTdWzvb8bz7/ns
      7bml3oedAy04cm4c33v1AhbiqXRZJUHAK2OgM4xfuXsTyonu9rSEcGBrF14/NZLx+d7Bdgx0
      5PfLO8s/eRyEUobsBFJCiE2WxRPx3AiyeOuoVCq1rJQpHlnAF+7biqdev4ipSAKDPY14aF9/
      wVf+2qlR/ONPT9kes7PXZ6Amddy7u3d5Bl1DkKmpKZbQLcYFv0cCY0ur3AKsABSlFF6vD8F0
      f7B8YIwhrsbTwSERE/MJHDk7DgZg32A7AII/+/ZbNicnAHhkEX/0y3vR31FX0W6lmwyvfHAD
      756fAAPDrnWtuHtXb1EDOCNqmUb2c+KNt3kwLx87nLM0ciUY5EzKYJgUiiQWFH7KgD/95ls5
      7bPaG/z4b7++v6S4TKXgzTJkUYA3j6dvqZAOv3MNLxy/YTcsePLQIALeyoXfmWqgKIpNHCXk
      8f0yxpBKWVQhAiHobAzgsQOLhdcvHL+RIfwAkNJNjExHMdCRPyJcCLJIcM8tvbh39xp7DKWA
      WKHKgojH46irq7NrmPOBp3vweMByQxRISfUPjDEktVy7JKWbMClDraIY0wtJfOP5M7g6HoFH
      FvHxnb14YO+aqhvqwtBEBJF4CguqhjfPjOJffn5+SSfkOSBWoGzxAXNVwNm6BwB0Q4dpGnkN
      5XzMXl5l6XW0tahz5Qa9ohSPKUSj0RXhCSoHokCwdW1LzueDvU01W5UZgP/vJydw8uo0Ygkd
      MwtJ/OC1C3j77HjVr5Wzf528Oo1E1oprUpZDnJsP3NuhKJ4c3kzOCeTk+eSuQZInorxroAWt
      WT7qzqYAtvQ1lTSe5QR3afJ7LoabpdD88TvXY/f6NnhkER5ZxPb+Fnzu4xtrdr2pSALXxjPZ
      PhgDjp4fr7pbNectiQLJ0AmPnBvH4XeuIprQsa4zjCcPDeZEiZ0vkTEr61JJRzuzm2HwgBA/
      xqNYLUjzbW1Bn4w/fHw3fvTWZYxMx9DbGsLDtw8gUAOOSh6xrRTc+E0mk6t+ZS8HPkXE7z+6
      E7PRJBgDGkNe1DKtXLLzyzKvUW17gzKXCbBvUye8abXjzNAs/v7wSTv4dPT8OGYWEvjjz+8D
      kGYdptQapsN7JIlSUQY4/rdkMllUF20N+/ClB7fZv1d71aQMePn9Gzh3Yxa3rG/Fvk0dlRnX
      9m62/P7BWlOgM8bQEOQlsrXdtZrqvNjW34JjFyfszySR4M5t3VV79wuqhq8+/T6kW9a3YSqS
      gkkpbt/cifv2WIYhIQRvnR3LibxeGYtgbDaOjkZ/VrXVYq691+stKfrLM0BLQS1VhTfPjOJb
      L54FABy7OImQT8HWClQsmzEvneezXOAln0v13q2WQBdjDF96cCv+9Q0fTlyZQtAn4/69a7Gt
      imrvc+8O4eLIPKTbBtuxf0uXfeFy4AwC8UN9Ph+UEoJfwGKkdKVxfWLRxUcZw42paNkTgBAC
      v98PXdeXNcOTUzoCVixHKJv90+LRf/vcOI6cHUPIr+C+PX0rzgDtlUV89q4Ntq1Rq0kpOIuS
      nWCMYd+mjhyaxP6OerQ1eK3CZWaCCAIEUYQkiQgGgvD7/CUXwC+FACqlm7g4GsGVsQUY5tIe
      zm2b2m2PRp1fwa51rWWfgzGGWCxmB7WWi+2NOt5dsY6M+XD0wgT+4aenceLqNN44PYq/+fEH
      mI+vDhumVo6C+/eswfquMMjk5CQTBAH8B0DG9s2N4FhCx0BnGJ/7+EaEfJZXJxAI2KRTTgO3
      1G04Ho9XxIVz8toM/vGnpzEXsyZQW0MAv/PwDvQuYdUan1NxdXwBG7oblkwH4/dbXqvliPDy
      HYCnH5erAhFC8LfPnMDbZ8fszwRC8HuP7sSugVz354cJlAEkEokwnoMiCIIdweSeGlEUQZnV
      PMOryBAlwa4DdvPylArGGCKRSNkq0Ew0hT/9xluIJjJXqJZ6H/7XL9xhN1leSYiiiFAohPn5
      3KzTcsGZFYQCCYVLNYC/8/J5PP/eUMZnjx1Yh0du76/ofMuBpXrsOCTus+YruNfrzWj65lzd
      +YUrhWmadlpEpVvbqavTOcIPWL7jSyPz2NRbXv9iEIKYqoEytiQKGCd4wK8afY15UxEIIsQy
      2RVKRV9bHQjJ7BQ6Oa9WTciqjZNXZ/DCsSFs62/GL+1aWj6S5FR9gMyev+XSEHIPSN5KrHjc
      5sfn5y/3Aaf0/N6VlEs2aSHoJsN3XzqLdy9MgDKGTb2N+NVf2ow6/9KN2FgstmThYenCcgDp
      FOzyejKUirXt9Qj6FETVxYVlfDaOU9dmsKm3wTVGw3fu5Sb30gyKb790FhNzKk4PzWDnQCua
      S6wFcYPr6CstZHB74aaDjU2SJMTj8SVt2Ru6G1xL+DyyWDCb0w0/OXIFL39wA9GEhnjSagzy
      nZfOlj0mN1Rj5SSEQHK4NmmNCpjbG/z4lbs3oaclZAdBL49F8NdPv4+TV2dyvs/tDupCdlVr
      iAJJB+KsxnhLbdpXtekrpHvmuiW78ZpXn88HURShaZpdLFMu1rSG8Inb+jO8U7Ik4MlDgwj5
      Sl+5CSE4en4i5/Oz12cRT64e3s7FssIi/EtLugZw68Y2PH5wQ8Zqn9AMvHV2LOeavDBpuSlM
      AGsC/M7DO/ClB7fhf/rsrUueABJQ2yginxTJZBJerxd+vx/xeNzOEyoXhACf3D+Azb1NOD00
      A1Eg2DHQgjWtoZLPYVerybnzXxIFCKus0oMQsix0jgGv1fzbyafklcVcLh/AwbS3/Aj5ZOyv
      UvmuLQG1NHZEUYSiKFBV1a4VBip/gATAhu4wHjswgEdu7y9L+DlMauLQzt6cXPjbN3fmZZn4
      sKO3NYRbB9vtfLCWeh8O7ezJ/SJ/aKu83rcUEFVVmc/nszk1uTsUyD8pdF3P6GxSCu0J9/kr
      igLDMBAIWO3ra1n+lw+MMeimDkmU8ebpMbxy4gZMk+G2TR2455bektprlnwtFC0hWFXQDYoL
      I/OIJjRs6GpAo0tMhKde1KKLznLDVqCyPTI8VTmRSNgpzJRaje54Tj+HKIrw+/3wePIHkPiE
      cWZJrtTDI4RAkRScvT6HY5cmEfDIuGtHD3aua6lIWCkDFuIaJJEg6LBDjl6YwA9fv4SNPQ34
      1V/abNfQrlb3ImDZU1vWNBb8jqWS3fzCD6QngK7rWIhG06RNEhYWrIJpt2ol/rvz5nnVlzMH
      JntHCIVCiMfj9gRIJpMIBoMIBoMZnqHlwuisiq8+fRxqyjJ4zw/P4T98ejc2dofLOk88ZeBb
      L5zFB1emoEgC7tvTl04oJHjq9UsYn41jbDaOg9u70VLnw7NHr+HaxALWd4Vx7+41SzbiSsH7
      l6dx7NIENnQ34MCWzqrsSB8G4QcAyaQm1FgChqHDMHQQsljJxSk73JD9AHhfK64OiaKYYeQS
      Quwev6qqQtd1RKNRBINBhEIhRKNRMGYV3rx3cRIzCwms6wxjsKfMwFaJOHdj1hZ+wIovnB6a
      LnsCvHZyBEfOjoEBSKSAH711GZt6m9DXFsL6rjDGZ+NoCHrQVOfDt148hyPnrJSDM0MzWIhr
      +PzdGwtGeZeKC8Pz+OrTx2FShtdPjUAgpGoG5IcBUjwWhyiJVu/fEmg+CiGVStlBLrcACe+M
      wiOkhmFgYWHBLiRfiCfw5997D5dGrRQCgQAP3taPT92xrup6dFPImxP9bAr5yj7P6EwsIzs+
      pZuYiqjoawvh1+/ZjI9t70Zr2A/GrEnnxOmhGSRSJjwKIAm1USmuTUTslHbGgMuj8x/6CcDJ
      C0p5ngJndy41mYoyYGgyimOXpjAVSeSURnBVhtsMzs+TySQikUhGegClFNFoFLqu4/VTo7bw
      82s9+85VTM1XnzZw85pG3Lm1C17FKvPbu7Edeza2lX2ejd2NGUZznV9BT4vllRIFgoGOeoR8
      MhRJyLAPACBk83LWTp3Y2tdsX1eRBOzeUP49rjbYLZXSMmamS2ytNljWwmqYBnRDtz/jTCXZ
      qnaaGrG0F8AA/Oy9ITz95mVouon6oILfvH9bhtGUTCbh9/tt2j+eHmEYBiRJcs3+5IManclt
      F2RShsn5BFrD5a/OhSCLAn71ns24Z/caUMrQ0RioqOTu1o1tiMRTeOf8OLyKiPv39KGtIZdn
      06uIeHT/wP/f3pUFx3FV0fN6uqdHM6NtNLZGa7RYkWTLkndbdhJlwyRVWUnKECqF+aAgHymK
      gio+oCBQfPCbH9YqqqACBFxJIAvEgLHjGOwkNrbleJdsS7L20T6jWbv78fGme3pWTY9mpFHs
      86WSelqt1n3Lve+cc/H6sWtY8AVRZrfgqe4m8Cbk1Ti2usKG77+wG5eHptHoKkVjmt4KKiSZ
      wuMPwWYRcu6VmgvIioL4lksUem4ZK+PqdzN66oaJRLfmhjIwjy+Mw6dvaTYZs54g3v/kFloj
      9AS1uqEOAu3h4ipKqXBPkvZHZp5DVUXujVsBgOdIWje4TCDwHB7f1YBHt7EzBSFNW6ntLZVo
      cJViZiEAZ2kRyuxmYAUklC6HFS5HZu/w0uAMXj92FTOeAEqKzPjC/S3YlcXKmC+wIKcxCkQ9
      JYN9X4kodAk4xPLOYkVc1NgACEtyAhnNF5QiDxUl0SmKAq/XC0EQYLVaQQjRKkTpRDDd7VU4
      1z+J3husY41g4vDsfS2oKM6e7LQSIEjfUUe7jgDOEksseSuHwR8My7g4MA33vB81FXa01TsM
      0cNnPEH8+m8XsBAhxfmDEn5z+CJqnHbUVNhy9pzLgTrTE8L6vik0sYG6XtqpgCawaNWVQlYU
      8PqLl5qJyuwiOhqcOHOdcWhMHMGO1krwcf98dbSpZwaUUoRCIYiiqCW/yWDmObz89BZcvT2L
      mQU/Gl2lqy7NKxRQAJOzfozOeFFZZkWVwxYzduYXQ3j1rbMYmIh6fnY2OfHSE10Zn2xfH57V
      gl9FKCzjws2pghkA6gzOZv/E4I+5VlsNolU2OWJsrAr7+SNnh7BlQyWcpeKSFSATR3DwcxtR
      t64YYzOLaK+vQHe7K+mnVO97r9cLWZZht9vh9/u11qCphDA8R9CxxEHMnQRKWR70/ukBvHvq
      BsKyAhNH8PkdDXj+gRZNkffn49djgh8ALtycwj/ODOCZvc3Jbx4HcwoTsmScqdUFC+BMHThU
      rXTstREHk76RWZy4NIYfvrg7wehVtQRXP0DAfHqe6m5a8jRTFEWEw2Fttvd6vSCEwOfzQRCE
      rKSQ2YICcM/50XvTDcHEYVvL+pyJX/KJaU8A75y8gVvjCxiZ8mo9d2WF4vDpAWxucqKtlp2T
      9Cbp9QwA52+48ey+DRkdNLbVOVBTYceIrhhRZhOxo6VwcgC2n2da6EyCX41TmcpJiw08AAy7
      PRh2exMqBBSJtiUmzhRjbBWvHFOh7/Wlv05RlLx74MdjbGYRr755VnOdPvHpCL79/HbYLCsj
      XM8GskLx2r/YCXMyKJTi5ui8NgBSMViN8Jqsognfem4b/vrffgxMLKC6woZn9m5AaS7aZeUI
      ar5phDigDgKFKjEVICCOCxQPjnCgHAta7ee6y9SATqYEWw3D11T4+Mq4FvwAa7xxaXA6ZXUj
      nuaxGvD6w7g5ll5T7CxlpWFKKXa2unDs/O2Ea3be6zL0NzhLLHk1IVsuWBJsXIiTarXgAaYJ
      rU2RbHKEAzFFtzvJ8gQjiXShY2LOjzdP9GFwYgE1Tjueu79lVRJAi9mEUpsIjz85HaW1rhzb
      dPYtB3ruhXvOh4sDTMFFAOzrqMGj24xrZgst6FUwIzUl8nX6BDjV5+NjlLx59Dztal6PEiuf
      kV12/A0lOXY7U4gswdG4LVCjqxTfSbIF8gYk/OT3pzCpO3kus4n40cHuvHWQTIdPB6bxhyNX
      MOsNYH2ZFbvaXPD4wqh22rF3Y1VC6ZVS1utsasGPaocd1U7bmqJiLwVJlhAtYcqZH+DqfJPi
      t+pkYmKCqh26jSq01AGgv2EhtsNUk+DzN90wp0mCP746jl++dyHh+wf3b8SDnbUr8KSJYD29
      Qii3iyvCHC1kMNoD21pHVWvq+VO0c48GwvYrKtUn0fqRgFcoa2dPliECUc1xKSg4mh/d6nJA
      wAx29y+xHQjLyfeWUpw1vD8o43/9E6hy2AwL8Y2AUgqbhU/gEN2p0J/ocpwpZnVLVZVM+D4h
      MOk4b7zm+5PFYqkKIwodkizDFGGnphuc7fUVKC4yx/gOFZl5dDRGW6cSQvDakcs4dWUMomDC
      D17ck5ccQb+6FuKquhpQCZsylZNatSTM8JFL9O8v/j1yXERwna2/i944K1s7lWSgFFjwhREM
      Z2+9oVC2ZFKqaKzAdAleRbGIl57sRP36YtgsAmqcdnz9iU644shts15W3g2FZSymSFKXA73h
      rfo1TeDd3plIFmPx/rYcx+j9PBdt0pgqNonb7aYaUSiPwgwjGJ/14bf/vIRhtxdFIo/Hdjbg
      4a46w7QZjf6q7gUz/PskhcIXCMMqCkk9iIbcXrz30Q3Ury/B4zsbcqohVp9b8/vU0dXvgkGf
      C8RMvlm8J+J2u6kSOSTguexXglxBVoBXfncy5jSSIwTffHZrRl3cVwr51vVqudndwE+AylDI
      xcTAUdV4tUBmmZFpb0zwAywYzlyfKIjnU5HvWnk+ZZJrHZmKtzKBLoNd/j80VVAYedBUfHqB
      5/IedCuFQnaFWItYzvtkznCI8nqWM6ooKCRZjqsnsSQ70/u6HFa01Tli9LNmnsO+SBebmDuv
      sUDy+MN499RNLAbCeGzn6ndhWesIhGQcPX8bN8bmUGYT0dNVZ7hHBJmcnKQmkyni90gNnwbr
      wUp3ckyyynGc4c4lvqCENz7sw+WhaZTbLXhyTxM26ijSQ5MenLg4Aq8/jJaacjywuSZpslpI
      IITg1bfO4nxE7OMsseDHB/fe8Ydb2cIfkvHTP32C27oO9gLP4eWnt6KzMfP2VtrbN+Us+VXV
      YQTXhudwNELQemRrPdrrHRmdNlhFHgf3b4zeUTfLn+mbxK/euwApcmj10ZUxfHRlDN89sKPg
      B8Ggjq8/42HNyT+rAyAqV2TkNZPJlHULp2Q4cnYoJvgB5mp36INraK/fk1aaqkdWT+QNSPD4
      w2mzhuGpRfz8nV6c7ZvE2b5J/Ozt87jtThS9p0Ky3mWBsIxDx69pwa+ib2QWJy6OGP0zVhSU
      UjzQWatNAJvuqdDYnGsV+v+P+rWsMHeGsCxBivQ0MHGmnDpJE0JSMmXHZxfhM+DubWj6kRWK
      v38ygA96b4NS5qVZXGSGPyShp7M2onVl1YvLg7HGU76ghMuD08vq4zXnDWJ6PrmmuH90Dg9v
      qcsqJ1gpFuvT3c1orXPAFwhjc6MTfIG5UBuF2ida1eeqJH3VroQQAl4w5/x8iVKKEmtyG84i
      kU+Q6KaDoQFwfWQOb5/s14yWDp8e0H7We2MS3/vybvBctKlyVHnJNkXRRsvZgVK2z0vWJaa4
      yJxx8CtU0bTKNLJlM/OZtXZdDggB2vPkdLc6iOhsdXaZgiAgEAhqkleJkw0VQTJFT2ctTl4e
      TdgN7Gmvhs3AttLQFmjY7UlonK1iZHoR84shrT7b1bwOO1pdMPMczDyHXW0udDVl13WQUuDU
      lXH84t1ehKVEaoTAc9i3qTrj+ylKLL1gLVWSCgkEkVNZWYYkMZqJWWD+soBqhxNKaki1XDRV
      leAbT3SistwKjiOwWQQ8vLUez9/fYug+hlaARlcpBJ7TglA/wze5SlFuF7WTZKsIfO3xDoxM
      sX1/rdOe1Hgqk1Lm2OwiXj92NaaHFSHss+tKi3Cgp9VQSVElUt0N/OzB9vuKFtyaOhAUoihC
      lmSEpbBWGUxFtU8lqc0EO1rWY3ODE15/CGbBZKhDkAp+2hPApcFZKAprEledhtnYVFWCFx5q
      w9FzQ1AosG9TNYqtZgRCEna3JQo0zDyX0omM5RO3cK5/Eh0NTjzV3ZyyijM+40sgnXU1r8eX
      HmxFmc0MMYWbQSow814eHHJL4LuToFAlgaCnKApCoTDMggBeEBCW2P9sqberDoJsOgaJAgdR
      yN43in/jwz6cvs4cBcw8hwM9rXhka5KuIGAz50NdtehurwIFltVJ5cz1SfzlP/2gAG6NL6Ci
      tAg9mxMPuwCgstwKq4WHNzIICAE21jtQmaVdIiEEwhqgcRcq1NleDWy9S1swGABBrLP4Uvyy
      1eSfcfptQEhScOj4NYzOLKb9kMVsWnYboamFWGPdqfnUBrjVDhu+2NOK6gobHMUWPLSlHvd1
      JB8sd5FfxFO143n2sixj0bcISZ39l1hhc02jN4qEaTAkKbg6NINqR36F4LtaXTjeexvueT/K
      i0Xs3Zg6iSUEuK+jGtvvrYQsK7BZhJjTZgpgaj6AaY8ftc5i2AvY7mStQ9VYKHJsn7d0uZys
      pM4BVhtJIyWbJckoL2ddqQWvfKUbw24PairsGcn+2KoT+yIpBf547Br+fW4QlLI68Ff3byoo
      Q9fPClSVmiJHk1+1C6jm15kkBtRu94nubKsPvikuSSWEYFN9eca+PrIC9I/OIhiS0VxdBnuR
      kPFAsPAEG6rY78/WR2h0ehFzHh+2b4iWWC/emkRnoyPj4/C7yAyyIoMq0dNffcCrdHpKoj/T
      a3glSSpI+ez/AUm6JZpfZFZfAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
