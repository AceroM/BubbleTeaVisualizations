<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.0821.2225                               -->
<workbook original-version='18.1' source-build='2019.3.0 (20193.19.0821.2225)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ny_city_tea' inline='true' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_city_tea' name='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Wendigo/git/BubbleTeaVisualizations/data/nyc' filename='ny_city_tea.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_city_tea.json+]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[ny_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_city_tea.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='integer' name='categories.Index (generated)' />
            <column datatype='string' name='categories.Value.alias' />
            <column datatype='string' name='categories.Value.title' />
            <column datatype='real' name='coordinates.latitude' />
            <column datatype='real' name='coordinates.longitude' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='transactions.Index (generated)' />
            <column datatype='string' name='transactions.Value' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj' name='ny_city_tea.json' table='[ny_city_tea.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_city_tea.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_city_tea.json+].[Table Name]' />
          <map key='[alias (categories)]' value='[ny_city_tea.json+].[categories.Value.alias]' />
          <map key='[alias]' value='[ny_city_tea.json+].[alias]' />
          <map key='[categories Index (generated)]' value='[ny_city_tea.json+].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[ny_city_tea.json+].[display_phone]' />
          <map key='[distance]' value='[ny_city_tea.json+].[distance]' />
          <map key='[id]' value='[ny_city_tea.json+].[id]' />
          <map key='[image_url]' value='[ny_city_tea.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_city_tea.json+].[is_closed]' />
          <map key='[latitude]' value='[ny_city_tea.json+].[coordinates.latitude]' />
          <map key='[longitude]' value='[ny_city_tea.json+].[coordinates.longitude]' />
          <map key='[name]' value='[ny_city_tea.json+].[name]' />
          <map key='[phone]' value='[ny_city_tea.json+].[phone]' />
          <map key='[price]' value='[ny_city_tea.json+].[price]' />
          <map key='[rating]' value='[ny_city_tea.json+].[rating]' />
          <map key='[review_count]' value='[ny_city_tea.json+].[review_count]' />
          <map key='[title]' value='[ny_city_tea.json+].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[ny_city_tea.json+].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[ny_city_tea.json+].[transactions.Value]' />
          <map key='[url]' value='[ny_city_tea.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_city_tea.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_city_tea.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Ny City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.621234' measure-ordering='alphabetic' measure-percentage='0.378766' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:rating:ok]' palette='summer_10_0' type='palette'>
            <map to='#00a2b3'>
              <bucket>4.0</bucket>
            </map>
            <map to='#8fb202'>
              <bucket>2.0</bucket>
            </map>
            <map to='#97cfd0'>
              <bucket>4.5</bucket>
            </map>
            <map to='#b9ca5d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#cf3e53'>
              <bucket>3.0</bucket>
            </map>
            <map to='#f1788d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#f3a546'>
              <bucket>5.0</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='ny_places_with_reviews' inline='true' name='federated.1u4b5640oxsa2s11makhd0otyu9l' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_places_with_reviews' name='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Wendigo/git/BubbleTeaVisualizations/data/most_updated_data' filename='ny_places_with_reviews.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_places_with_reviews.json+]'>
                  <map key='categories' value='false' />
                  <map key='categories.Value' value='false' />
                  <map key='coordinates' value='false' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='reviews' value='true' />
                  <map key='reviews.Value' value='true' />
                  <map key='reviews.Value.user' value='false' />
                  <map key='transactions' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[reviews.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_places_with_reviews.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='reviews.Index (generated)' />
            <column datatype='string' name='reviews.Value.id' />
            <column datatype='real' name='reviews.Value.rating' />
            <column datatype='string' name='reviews.Value.text' />
            <column datatype='string' name='reviews.Value.time_created' />
            <column datatype='string' name='reviews.Value.url' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n' name='ny_places_with_reviews.json' table='[ny_places_with_reviews.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_places_with_reviews.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_places_with_reviews.json+].[Table Name]' />
          <map key='[alias]' value='[ny_places_with_reviews.json+].[alias]' />
          <map key='[display_phone]' value='[ny_places_with_reviews.json+].[display_phone]' />
          <map key='[distance]' value='[ny_places_with_reviews.json+].[distance]' />
          <map key='[id (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.id]' />
          <map key='[id]' value='[ny_places_with_reviews.json+].[id]' />
          <map key='[image_url]' value='[ny_places_with_reviews.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_places_with_reviews.json+].[is_closed]' />
          <map key='[name]' value='[ny_places_with_reviews.json+].[name]' />
          <map key='[phone]' value='[ny_places_with_reviews.json+].[phone]' />
          <map key='[price]' value='[ny_places_with_reviews.json+].[price]' />
          <map key='[rating (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.rating]' />
          <map key='[rating]' value='[ny_places_with_reviews.json+].[rating]' />
          <map key='[review_count]' value='[ny_places_with_reviews.json+].[review_count]' />
          <map key='[reviews Index (generated)]' value='[ny_places_with_reviews.json+].[reviews.Index (generated)]' />
          <map key='[text]' value='[ny_places_with_reviews.json+].[reviews.Value.text]' />
          <map key='[time_created]' value='[ny_places_with_reviews.json+].[reviews.Value.time_created]' />
          <map key='[url (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.url]' />
          <map key='[url]' value='[ny_places_with_reviews.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[reviews Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.text</remote-name>
            <remote-type>130</remote-type>
            <local-name>[text]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.text</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.time_created</remote-name>
            <remote-type>130</remote-type>
            <local-name>[time_created]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.time_created</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_places_with_reviews.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_places_with_reviews.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([reviews Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating (Reviews) per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[reviews Index (generated)] : MAX([rating (reviews)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id (Reviews)' datatype='string' name='[id (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating (Reviews)' datatype='real' name='[rating (reviews)]' role='measure' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[reviews Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Text' datatype='string' name='[text]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.text</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time Created' datatype='string' name='[time_created]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.time_created</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url (Reviews)' datatype='string' name='[url (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating (reviews)]' derivation='Avg' name='[avg:rating (reviews):ok]' pivot='key' type='ordinal' />
      <column-instance column='[rating (reviews)]' derivation='None' name='[none:rating (reviews):ok]' pivot='key' type='ordinal' />
      <folder name='Ny Places With Reviews' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Reviews' role='dimensions'>
        <folder-item name='[id (reviews)]' type='field' />
        <folder-item name='[reviews Index (generated)]' type='field' />
        <folder-item name='[text]' type='field' />
        <folder-item name='[time_created]' type='field' />
        <folder-item name='[url (reviews)]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating (reviews)]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.603936' measure-ordering='alphabetic' measure-percentage='0.396064' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[avg:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#edc948'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8194352.8778034812' min='-8253994.1740365922' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4988340.6862074751' min='4952555.9070456494' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{64805FE1-FDDB-4F91-8F41-7B7060DA1F73}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Ratings'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8218614.2489090515' min='-8243908.6336284708' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4979713.1666128393' min='4968196.5675835321' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{15180E0B-8209-4E63-9CBE-D6DA149E45E4}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Reviews'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
            <datasource caption='ny_places_with_reviews' name='federated.1u4b5640oxsa2s11makhd0otyu9l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1u4b5640oxsa2s11makhd0otyu9l'>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[review_count]' derivation='None' name='[none:review_count:qk]' pivot='key' type='quantitative' />
            <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>review_count</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8221820.5297887521' min='-8245917.360977957' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4981367.5523950607' min='4964637.6023177551' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <size column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' />
              <lod column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Name:&#9;</run>
                <run bold='true' fontsize='12'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Longitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Review Count:&#9;</run>
                <run bold='true'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Avg Rating:&#9;</run>
                <run bold='true'>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='4.2849259376525879' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{979E6B02-A1A9-4FCC-88D4-C7578786D8F5}' />
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' name='Bubble Tea vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3F09A9D7-FCAA-4571-B27F-4B6759B6BB69}' />
    </window>
    <window class='worksheet' name='Bubble Tea vs Ratings'>
      <cards>
        <edge name='left'>
          <strip size='268'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8632FE1-CAF5-447B-9EF6-73C4059304B0}' />
    </window>
    <window class='worksheet' maximized='true' name='Bubble Tea vs Reviews'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' type='size' />
            <card pane-specification-id='2' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating (reviews):ok]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating:qk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:text:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{567C2FCC-0299-4F54-BEAB-4FF0C5AC8A8C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea vs Price' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Ratings' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d5Ql130m9t1KL3funumZnpzzIAwwGIAACYIASBAkwSiRlEjlcGx5fdZc
      ypJXWsnHx15rKXm1a0krWuJSJFciwSwGgCBI5AEwAZjB5Jy7p3s6vVjxXv9R79a7Va9erg6Q
      /Z3DQ8zr9yre8Avf7/uRmzdvMkmSAACMMRBCAACSJCEej4MxBsYYJEmCLMtgjAGA9z3+b8uy
      YBgGYrEYZFn2vit+L5/PQ5IkqKoKy7JAKfWOz8/ZCA51wBggEdLU9zsFpRSWbQEANFXz7gdw
      n0EqlfJ91i5sx0E+nwMYwOA+D0VWfN957dQYjpyfQE86hvfetQaZhFr3mA6lQPnZhoIAmqbB
      cZzyO1PAGINh6AAAibT/fAkh3nsNA6UUqVQKsiyDMoZcLguEfJ0I79mhTtV3VE1FPOaOU9u2
      wRjzxp8kSQ3fjSJJEiRJAmUUlFJIkLzBL8syLMvyLkRVVd+A5hMDAHTdfWilUgldXV3ebzVN
      gyRJcBwHsVgMlmXBsiwoigJJkmCaJmzbBr+OeqDe5ENT348CDO4k5i9CnMDJZBKxWKzzczAG
      I59zny0BGGXeCxRxz9ZluH3DUqgKgdTgxbqDjwEk+JkLfk+maXoLkabFyp8ZkEjjwVMLVyfy
      +G8/P4U7NyzBPVuH8eMDl6ApEh69czUUubLAqqoKVVVBGUO+IFVNVj6+JEkCpdS9bsl/TY7j
      QFEUyLJctTg1c/0KPxGlFIQQUDBIwsogzkBKadWJGGMoFouwbRu2bYNSipmZGSSTSSiK4h1D
      13VvMgGAbdu+m2zmYil1vO9Fseo2A4lI3srP/xePx5FKpSI7h23b0HXdG6Cqota8v5ja3KTn
      AwZwB0lwNRYXEMdxygtU3H3GaG7w1ML+k6M4dWUKt2ZKGJ0q4Nk3rgAANEXGw3esrHrnjLHQ
      nYo/b8YYHEZDr4kxBl3XkUql2loQFcBdWbm5kkomkYgnoOs6FEVBIpGAZVm+i+UXZVkWbNuG
      YRiglHoPnVKKfD4PVVWRTCa9lSYMzc5U0VRSZGXeJkDw+iilyGaz6OrqgqIodX7ZHBhjKBQL
      3v0pdQZ/K8ckEoEma6CUwXEcb5UH/PckPlfHcRcxWZKbOs9kVkcmqUFT/APvnTtHMJXVcdv6
      IVwYnQn9LR+whBDYtlX1d8aYdx0OdVDvieiGjng83vRCKkIBXHsakgTGGGKxGHK5HCilME0T
      qVTKe9F8K+L2O1+5+H9ziH4EpRTFYhGapsE0zbp2YT14OxGbv9W/FviWGwUs2/WdvO0+gsHv
      UFo2E2UQUr1yBicACAHAYBhG05P6+aPX8dVnT2LFYAa//wt7fJNgsDuO33jfVhAiYceafmiq
      DE2R8ODuFSCEIJFI+Ew8I2Rx5Nfo+nys7jtnjMEwTahqfZ8oDAo/mUzcF2pbdpXjym1d/nmp
      VIKiKJ79KA5+oOJA27aNQqHgfcZ9CG5utQqJSKi7FEQMJuyM4vUqSjQ7EGMMhUIBlDFITe6E
      DY8JBsYoAAJdL3nn4RB9mbDPmnV8Xz89BtuhuDg2i7GpAlYOZby/UUpBGQVAoSkET9y7FgTu
      OZLJpM9BtW0bRtl/9O6BMciyAspow8HvXX+bz65quoedsFgsglKKRCIBAIjFYjBNs2pr5RcT
      j8d9/+YeOnd2uZfeKuZz5Rf9IhGSJEXi+ALuymeYRserPod4zYwxbwAxMBBJgkQqkR0GIZJW
      Pn2zpg8AvHPXCC6MzmL9sm4sH0j7r0Gw1xlzTbBEPIFkMumbfIwxFErFqmMT4jrE4r2Ixw8u
      SPydtDM+fBOAEAJFUbyIjgjuxCaTSQDwHFrR2eIoFoveQI/H477jUUrnJXoTBUTHl/szACIx
      fxhjME3DczgZYx2FHfkxg6HnStCg/J1yHJGUTR9CiBf5a2UA7dm4BNtX90NTZMhStYlVGbQE
      6VTKC48Hz8EC44ebgpRRyJLsizRatuXdE79exhgSiUTbi6NvAqiqilKpVPPLjuN4sXx+o2Ez
      VJZlKIri2ZQ8DMp/83abAAB8Dz4K8OABhyxVD45WEB4pIcKKKZVX1LBdnrQ1+RJatb9ACPEG
      LmUUmXQGqqqGDn436JLyAiheJJK5+QsiEd9uoSoqbNt277M82ePxBGJarO33ojiOA5RtqFqR
      GhF8SwveiJjMymRce5Anw8Tvhz2IxQjxGnt6emBZlhfSjeL6uVnJB0ynx6Q8lCiEiQkhgZAm
      c5OIgRBkO9GTRiCEoCvd5S2A4vGdcoAlpmmu000IFEWFaZnuPYRck7gTy5TCoQ5UVUWq7FN0
      tAM4jg3ISsu2KDeZRHB7nyeLeHYOqMSe3w4TgIM/eE3T2o5gBWFZFgzTXf2jGPyu6eO3u1nZ
      sQbgBR4A1wcg8A+s4OpvOwxXJ3KIaTKGe1No5/Li8bgXLBDvTzcMN+sLoEAkaJoKAjfBReBO
      5LBr8l1veRylU+ma48k1MU3P36z1jMthUKnt4Epw63EcB4VCwcvyiTmAt8vqL4InWnicOYrj
      5Qv5SFdeMVrihkHLwQlaOYckSVWTjcfaxc9Mm+IL3zyEM9emQQjwyJ2r8fEHNrY0PviCEYw2
      WZaFXC7rRYQAN+ro5pTscvSq9qLAF6B4PB56fPF7+Xzex2JQFMUbk+JzV8JS7u2Cmzt8BeI5
      AiCa1Z8y6vJWyg9oviZTM6G4ZlHSSzBNs+4q1wqC0SoGbkUwN8FZNj/DchdhPs1rp8Zw5tp0
      +djA0wcu4cHdKzHYHUczEJ1Sn9njOJjNzoZSLEg5DwGg4RiJxWI1HWoekSyVSj7WAU/aBmk9
      iqIgMm+Umz7igBczj51GTkRfwqGOu8qx6ghUp+cIowzw8G+ncKiDYrHoiy51Aj74xf+mjgNG
      qUvhUFQv5i5LLtlN/C2DhGffvIrD5ya8z03b798xAFbA52v22sT/zhfdfFC9lb3RosCZCbUG
      v7vD5EKjmMHzmabpRiubvqMmIN60mPUVw1btghACRa6Qnlz+SMeX7IExBtvxJ/QSiQTS6XR0
      q3+pJISNozkmN384JMnlLqVTaaQzGXR3daOnpxfpdNoL4wLu83zr4iS++tOT+Ot/PoLZomum
      7tm4BH2Zymq/c+0glvY2x3tyqRzVTq9pWTANw+d7+O6BVky4WhPEjfiE0x344stX/mbeF18w
      OiezBA4a9t9RgUc1JFlqO5tcCw51fA9X0zSP/BfV8XmI2bW9Ay8RwJvnJ/DUgUvoy8Tx0fs3
      oD9T2+zgtj6nr3hU7To7C99BGWNQZAUjg2ks7UuhLxNDOu7SCLqSGv7kM/fg8NlxJGIKbl8/
      BKmFx6yVIzt8oXJ5YTkA4at/JWsMhC0K4uCv9S54eJ7nmOZ9AvCD1Rr0c2GrR5lL4LtJ0GHr
      6uqK5NoZYygWS3UXhdm8gS89fRy5YiUU/VuP7ah9TFSSXpqqQWpiovLdgtvhQ90J/K+f2QdJ
      gi8CmI6ruH/H8ibvrnw9Zac+SE0u6SXPb6sHx3Fqmj88oRqaSCvb/PV2kDDw70Y2isIywm8H
      8JUUxD9Ro6w3cCj1eDkuql+SbjrQzYoJNpM3qr4jXrNvwWl2kjK3PkC8L0Vun0cTvCYeKubX
      Zds2isVi3VCvyD/ik5r/nv8/L5wJO4ZhGJ7Z0+piJUlS5xPAc75qTID5KlxpB97gRzUPJqpK
      L3f1L/heathxB3sSuHfbcqiKhK6khkf3rK57TH68Zvk7XlycyCgYNqK0ULkZxnNCfHLycG8j
      cL+FH0uc4IlEoub4cRzHF+1pBV4gYmJignUyQLkDEswOA/AiEIsl+SU65YBbhkhQHXqLxWJe
      HUOnsG0bU9NTvs9qrYgOZZiYLSGuKehOaaEuI3fWeSBA0zTEYvGG12qaJgxDxysnbuIff34K
      +7Yuwy89tKWTW/OuR5IkpNNpn41OKcXU9FSFQkL8C2HYxLAd2zPPOKUmk8mEVscxxpDNZn3j
      TqwybBYd+QD1Vn8xA7cYBj9QsYH5AJRDJiYhpCNylQjG3GIX8d/1inlkiWBpbzL0b+I9iLAs
      C6qiQqqTZGSMwjAMSJKEa7fy0E0Hl29mfRSWdsAnILfPxUHKOf78mihzy205R4jvvgRudI8z
      SCljkFDhlNUaP7quVy26nIPG4/7NoOMJECy34zH/xZb1dajjVjsJq1TY9XHKbiTndBzohg4C
      4nuh7YKbByLlwbZt5Gke8VjczbwHJjVjDIZhAmAgkPDEvesxMpDG1lX9kQx+bqIEn1nwNr3F
      klE4lEKRZBC4USIb/hoUh7nsBM4kCD4zx3FCV3nDMOA4DtLpNGZmwivRgmh7Aoi2mghOg15M
      g9+1fy0AbqFFTV6IokDTtMjOmS/kwVUeJEmqGQdvFmK8XHz+lLoZckVW3IIToWCHMgrLMj0z
      L6HJvgiP7bCqKFAj8F2S0xHCnqeqqP5idkI8igYhBAz+BCknGlJKwQBoiuSZNBw84lMv0WXb
      NmZnZ5u+l46XOvHm+Q0tusFvWSDEfSlyndU9KrsfcF8EpzxwG7iVYwcz3dx08K2UAu3EvU/T
      NzgYYzANA3A5oVXnGJ8t4d9++RV84ZuH4NDmd4NEIlEzLMkhyzK6Ml2IxWKQZLlM0RBDlf76
      ZD5Z3DAtQTqdrqq8azT4xftu5juMsfZ3AI9gJcteSeRicXZFuAPFdgd/jReWSCQirfMVU/9A
      84X/HFyixq3acgtDeLQquPLz4/PPDdNA3El4ihyWZdX0O65N5DE2VcCt2RLyuoXuZHO7nyiP
      0+h7nBJPGYNtWbBsu0wt92fdXcKaCkWRkUqmoGl+DaZisegVWkUB/vw6ToTx5EcUNu5cwB0k
      takYPMkS5XVbtgWrbKNyp7tZeGYlIVCIWxllOw74isnNHXHw8wnAF6RiseAKTpU5QbXubefa
      AXz6oS3oTcebHvxhBDrx2vl3+P/zRYUxBlVRkCjfQ76Q963m8Xgc6XTaywmIO51hGF5IlZdy
      RhWk6GgCREXqmitws6FWtAeAx4+pFZ9vB4VCwbN1Wz0mvw6ZhwMdBgbq2cdifYU4+N0VtMK/
      d80JQJbrkMskgnfvXtHRvYrXzSsAa1V/cciyjHQqjZgWQ7FUhKqqSKfCOVemZSJbrh9w78uB
      JHdOYODPKRIqxGKdAIAbTWBS9eBOJpM+h7cVHkk9mJbpJpyEWD8hBLeyOl49OYruVAx3b15a
      paUjglIKSIAEyecHhNFNuOkTDBnyHaGV+9FNB1cncujNxNHfFa+dh7Btn33O/RGx7qMReKSQ
      CwyEDn7T9Dm0re6mjUAkyZ0A3F6cCwLbYkBwy47FYj6yGx8s7UC0xxkYSuVtXRx8JdPBX37n
      DVydyIEAGJsq4AP71iEWMgn471zTp2Ini+9HkiQosuIViQfPBzSmFgehmw7+r28fxtnrM0jG
      Ffzu47uwZWVf6HeD+kEiYa3V51hrgtq2jdnsrC/qJUvR1K64oVjXp5IA11mpR2Z7OyOYiRYT
      XXylisKUk2R3UFLHqRqM0zkdo1N5AK4l//TBS/jc376A//qTE7Cc6iSim6STIUkV+xmswrdi
      5dBqrKzlGSZX2WrU6cLYLM5cn3Z1OksWXjx2o+Z3w2rCuS8YhWaS4ziYmZ3xyaJENfj5buVF
      n/gJgYqD9S8JwYFdj1vS7vFlWYYsuWLApmVWrbz9XXGsXtLt/duhDLmiieePXsNzR66FHlcM
      e8qyDCJVsraMub4Ap3BXJ6Fan8x9mThiasW8GO6rnZEOk1qMorKQMXcHnZqe8gapmLlvBwXd
      9oV4+bV6XKrPfe5z/44XsAdNgWCG9+2G4ECQZTkyklsQjDFkc9nQyIsiS9i9bhC96ThOXZ2E
      GHLv70pg97rBquNx219RFMRjcZT0UtX7EAeeaI/LstxyuWUqoWJ5fwa2w7Bn01I8cudqKHUc
      6GYSnmKOIhghCsKyLMzMzng1E77IVpsT4NilSfzv//g6LoxlsWfTEp8VIBGXhaokEglfZKHW
      RS/GEGez4PcYdbiTwymLAdu2XVNZuSup4T13rMThczdx+qpbc0sIsGPNQNV3uV+hKCo0LQaU
      B4K4O4vvqBPb3/sdgNvWD+K29dWTMez6zLIWZ72QaKFQ8FEWeEljUMOTD35fbXPZjGvlXkyb
      4rkj15CIKbhv+zKMThVQNGxcncjBoQyS7H9OAKDouh4qbBv2gN+Ok0BRFJ9UY9RgzKU7G4Ze
      XrFqRykIgP/uA7vxz69ewK1sCXdvHsbtIQPOKdv6muYmkhxhgQqeO2j7B5tqzAUYY54ic5iY
      btjgB1zHNp/PI5PJeKabOPhF1UBeJ9DKePv2S2fx9MHL3jW8a9cKJOMqVi/pglpjN1OCcWXx
      JsRdwbZtn+O4mMGvnRe0z+WkdRzHS+i4q2/9c6UTKn7xXZtq/t29dlr1Lur5Zp65EIHKRCOI
      bE6RmySiFlkNcP3MQqHgReGMQK1whS7Reki6aFQW8rxuYSqnY8uKPvSma2u5KuIg5yesVdzi
      hEQ4FiPE1ZJ3o5kru79YKgqx+M7Ow1iZIhx8D4QgmXCdUtuxqxxQjvl4N1RYXGothsViteAt
      ByEEjuP4JDj5dTvEERZdCpDWFtsn7l0PxoC4JmMmp+OPvvwKZIngkw9uxr3bloX+RuLhK/ek
      lVkdtuXyKNHbIVzKB4Kovxk1aDn7yU2fjrX94X/ulLqmRkkvgYEhnkggnc540iAizaDTwV80
      bJy5NoPpJkoxASART4ROAK4G2Coqod8yFaIN5mxvOoZff+92fGjferx07AYMy0HRsPHUgUuw
      nfAxq/DVkUeBgtlEvr1y8K14MfsDQacwSpqDiFKpCIJotD354BKP41AH1KFAWdPZlZivaJTG
      YjFQykJDr60gV7LwH548iGsTOXQlY/hXH7kdqwS9fw43MuU+y1oSJe2WKALlSUDktvuTlQwb
      3375HM5cm4ZhVUzG2aKJrz57Eg/etgIrB/33JXHbnkOcBLVk52yP0bc4dwNxEvOWRlFcp8jA
      5Nt4VCWfYbsudRwwVtmRDcNfBSXLChzH9nhDtVArL2BYFOMzJRy/NIkr4zlQBswUDLx6cjT0
      +vi986KhuVoA2z3uPz13Bj89fKV8LwyJmILVS7u8nMt/+s6bVcdWZFkOdbDElT+4CwDwVqvF
      WvAuIoqGFkHqcb5QiMzpZKxa2lw0R4GKnSx+p1imXNfjx9ycKeEvvnUIpuXgdz+wG+uXuQm5
      N85P4G9/cBS65SAZq0RyCFBTCEsiEuRyXkKULfd+G8F4MG2KU1enocgEm0Z6q/STaoEQghNX
      Jn2fLelN4rffvwt/8HcveR1Gg1DEmc0PFPysFt4ODjEhpIpb3ioYY570hkc6i/Aag9Lm/Jzc
      5yKEeLylqqRXA/PrpWPXcXPadUp/evgy1i/bia8/fwY/e+MKTNt9x0XDxshAGkO9Sawb7sG+
      bcOhz0BRFJeyLFwD7/zDO7SI/mSrz9y0Kf791w/gwqhLgLtj4xL8zvt3NjUJGGNYO9yNW7MV
      53rtcA+W9ibx24/vxMkrU3jnrpGqhVwRewED4at9GN4Og1/TtMhqfBVF8V42/18U9+8OdKfq
      WEFfTHwnIoep0b1tXtGHH71+EZQyZJIaRqeKePrgJQRf8YqhDH7rsZ01370kSV5nR37OUqmE
      fKGARKKSZ+FKDrxxeium55vnJ7zBDwCHztzElfEc1iztaur3n3pwM8CA8zdmsGVVPz5y33ow
      xrBn4xLs2bgk9DeKOPh5aKsRJ2gx1v2KkCS3SV+7faOC8Pg+ZXORN/4DgFdPjuHqRA6P712L
      uNZ6jqTRTisOcL448UHVTNKLkIoM108PX0FMldGXjmMyVylGUWSC+7Yvr5lsY4x5sidc9LhQ
      LKBQcPWOgv0GuAx5IuG2263XdShKdCU1/M7jO5texIGyCSSy+QB/NhhAlYkU1vhgsYDXqwLR
      8JeCW7kY4y7oNr7y0xMoGjaGepN4oA05Qcpqa5yKJgVQ4Qc51Gm6V/Kzb1zxkcFePTmK3/+F
      u3B5PAvddDAxW8SONQNYN9xd9Vs++HnJKN/1DcNAsViEIlcqAcPAW+02i93rBrF2uNtnAq0M
      iUY1Qiu7jiIWUvgIXIHcAI/tLjatHxFR2PtB8BeoaVqVElkypmDPpqW4MDqLzSvCufP14ISY
      PiK8mDghZT+hvAugeUU4TfF/T5Ul9GViGOgeau73mubT4+etb7nvUY8C3arpqSkSPv+JPW05
      we1CCbMjg3F0AJUa00Vs+0ep6QO4Dh7Xu9R1vWo1IwT47MNbW9pyOXhGtd7q7/s3KiZQs6s/
      ADy+dy1OX53CdN5ATJXx0fs3QmrSqeRUElGSPp/Pe9fHGKvd/bFMmGuVXq8pEnau6W/pN52g
      KWlEMSQn3mwjiutcI3j+TCbTVrfwWuA7H7f98/l82WzpvLF1sBdBLQRD0QwMqtycKgNHybBx
      7VYeA92JurwY8ZyMMaTK7U35+DAMw7P7AddKCArXOo4rQJYvFOazp3nbaIo6KO4SYTN9ISZA
      kK7Nt+Kojs3Djtz04au/J1lCSNv0hzAac91rYRSESJBIe1nnREzBhuU9LV2bqqqe8BXgLgai
      MxvWqsiyLMxkZ92oVlnycLGj6SsMG/gLmQUOrv5i95Oojm8Yhqdtk0wmy3SRyt87mfatUDTc
      71JQSFA6SL4ZltsnuF5BPlBpCyUmu7jSBZ8cYsMKHvK0LAsSCJhQE6FbDmybIp1of2c2bVfh
      IqbWvm7ddPCtl87i4lgWe7cM4927R5p6tkq7g5g7wvV+3640SLPn5+fmhS5R7Eac6sHlPcS4
      v5t4ksAggbH2+yFw4hctr+6ocd2qqvpi6a3Y/kG8fvomvv3SWRBC8IkHNoZWofFrSwZ67/IG
      c/z5iqpwhWIRxWLBp+fDd6nnj17HN188A9uhuHvzMH75oS1N+R8i3jg/gW88fxqMAQ/dvgq3
      rx9CX6bajPv5kav46eErAICLY7NYs7QrNLIVRKTSiCI4tXcumtlx8Or+WDwWqXNuWRby+Twc
      x/GqnoKc/04JcO5AkaBIldg6B082qarmFYbINcytidkSvrf/As5cqy0Ga1gOnnzhDG5OFzE2
      VcA3XzwLy65+J5RSr3ui6OeJoV/RKbYdG8WiuzNwlQV+b7MFE1979iTyJQu66eD5o9fw5oWJ
      qnPWg2lTfPOFMxibKuLmdBFfe/Ykfv/vXsT+k2NV3xUbilDKkC02F36V5tJ+97gyc2Apic3h
      xPaXUSCRSCCZTKJUKiGXy9Xlt3cKvmIqsuIllFRNg6pq3sLhJuLCV/8vfPMQvvvyOfzZkwcx
      mW2sm1kLfHXnyUN+Lt7Yj1Mh+ORgjCGXy3m/Cy4IswWjSvHi1mz718dh2RTfevFM1bEf2DmC
      oZ4EFFnC1pV9NSVdgpgzL4VnTxuhHbMlyFWSJTmShnY83MlfdDqdbpjJ1E0HkkQa2tWNwAMN
      DIBlmtC0mFcKyXedquuFG+EB3NVbpACLiKkyPnb/Rnz7xbMgEsFH37EBqnC9YdleQkhVtZvY
      /9e1+blZWL0bLutPY8VgBlcn3AZ5cU3GrrXV9c/1oCkSPnr/Rnz5J8cxW6is6LbDqqgcy/pT
      +KNP34PZgoGB7kTT76PjDjGdgIFBVTXXvm6h66Pt+Iv4e7p7fBGLdsCr3YAKwUvTNJRKpZrZ
      zLcuTuK//PAoNEXCv/7YnVje31w70UbgA5Iy6smq13o2p65O45nDl7F99QDetWuk7nFrOcGM
      VbT+xQSo2G2dF7PzfBCnmPOQcBhmCyaefeMKSqaN+7YvD60xaAZnrs/gP3zjoLfqf3DfOnxo
      37q2jhXEgk4ASZZc1QO4g9oyzIaTgJY1ccTv9ff3dxxycxwHhWLBazkKNJbj/r+/fwQHz9wE
      4CacPnzfev+1UobT12dgWg42r+j16e4sJvAWRyLRjcf8ATfezx1jAKEF73ONm+W6heG+ZNPm
      TTNQAH9cer5i+ryMECgTqBQVju12OW+ERCIB23FAHQeZdKZjvUh+7+lUGrqhI6vnkIjHG2Yx
      79y4BEcvTJR1f/zUAsqAv/3RMbx2yi0uWTmUwR/84l2LchKIUR+ewRUTXqJfYFnWvA9+AFjS
      k8CS3e4O51CG45cmMVMwsHvdILqaVLYOAxkfH2dARRx2PqkOjDFI5WQTCKAXSw3P7UYbCHp7
      eyGF0Dg6uRbuV8zMzoDR5vRCp3IGFFlCd6rS5fDs9Rk8deASDp8b9333N963A/u2VnPtFwo8
      pi9OAMdxPEFa0TTi4yLYmG4+cSur4/LNLC6OzeLHr18CLdcAfO7jdyLe5sLiFcRE3Xm9GRBC
      QB0Hut544HNIREIsHg+VPG8H4u4ny7Jr8rDmI0p9mRiOX57Cn3/rDAzLwZ6NS/DjA5dgh2h+
      Libwew5yfcRu9sGYf6lUWrDBf2U8hz978iDyJX/N8eWbWdyaLWFkIN3WcZWFFsX1BlqTg06S
      JMQjKHEMnp8vBLqutzSxciULf/X9Nz1Nmn9+9ULo91YOZXDHhuYYmHMNkesjmr28rROHGPXh
      z2ahcPTirarBDwBL+1Loy7QvfKaIXI+3A7gagW3bdbVpWoEY2mv1OdycLvoEmYJQZAm//t7t
      2L1usGP7//zoLF45fgPD/Wk8sHN5TbWzeuCDP5lM+tpCBVd/XtTCx0exWFzQhXJkIA1ZInAo
      gyITPHzHasQ1BXu3LPXVNLcKRSy25qbQYlV/49x0HrKMSqiLZzvb0RBaPpBGV1LzMo+SRLBz
      zQCOXZqELBE8cd963L15aUfXBwCTWR3/8duHkSuvgoZp47G717R0DD74ebUcf3ac98RrPkTT
      B3B78hqGMWcmMgOQLZpIxVQocvg5dq4dwG8+thMnr0xi55pB7F43iCguRwGEJMwCMTubAeeo
      iEmaZpu1hUG8Vx75aO33wFefPYm3Lt7CbeuHMJ3XYVgOHrptFW7fMISJmRIUmfEXn9gAACAA
      SURBVKCvKxpd0onZEgp6xQS4PJ5t6ziqqlZle03T9GW7+e7AF8W5LGks6Db+6vtHcO7GDLqS
      Gn79fTuwaaSauSoRgrs2LcFdm8Jre9uFb++YzzBoqwg2uO6E+szT+LIsI5FIwDTNlrf3y+M5
      /OzNqwCA106N4q9/7yGInI8lvYm2ry8MK4cyGBnM4Mp4Dqos4a5Nre8qkiR5baFEu1+sceYJ
      L9Ep5soUc4EfH7joyZncypbwD88cx59+Zt+cV4Jx+EbRYtX44YoEhmF4L7HTF5JMJlEsFpvu
      KB7EQFccmaSGXNEsN7+YW/s4GVPwbz6+B2euTWOgO4GRwdaiHjziA1Tec5DoFo/HPbufr/5i
      r+O5gChjAgDZggnTpkgIAgMOZTBtirgmR15k402AxbTyE0I8agO3PTlHnVIKy7J82pjtHF9R
      FGQyGeRyuba0LNMJFX/86b24PJ6LNDMZRMmwMZU3MNAVRyquNKXfHwY++MX3LErjc+1+0SzM
      F/JzHh7fs2kpDpy+6QlX7Vo36Bv8N2eK+PsfH8fEbBH7ti3DE/euj3R3WFAqRC1omoZ02l3h
      eHhyrhJ0xWJxQcN79TAxW8J//M4buDldwOol3fi9J25DpsXCEs7i5AVD4jPMZrPed9LptLez
      ctMnm8t21KGlWbx54RaOnJ/A0r4k3rVrhY+r9OVnTnhtpGSJ4A8/eXfTOkHNYNHVrGUyGc/J
      5QkYsTtKWE+sdiGyHaMAgxutAQP6u8PbjLaC/SdHcf2WW4R+7sYMjpyfwH3bw2W+Q6+nHPUJ
      li5yH4gj2N+LN7Lm36WMQm5RqrwV7F47gN0tMkWjwqKbAEB1n1mepY1SjJeX+UUFw3Lw//z4
      GN48Nw4GYNfaQfzGYzvaTtEDQE8qBgKUu6MDXanWE4BicQv/f8MwfBldsXUUF70Sq/nmo/FG
      LTy6ZzWu3yrgVtkEakcnqB4WnQmUSCQ8e3UuIbIdo8APX7+Eb75wxvfZE/etxwf2rm37mKZN
      8f3953HyyhTu2LAEj9y5qmX7N5VK+UStHMdBNpv1En48J8BBGcXU1JQ3+Ofa/GkG8+IELxbw
      bKwsy744f5STlFIaeZXXhRvV0aQLN2ZDvtk8NEXCR9+xoeXfcU2fVCrle4Z81xNNI54Q4ztr
      sVD0RHrb1emPGrJEfI5xlOhoVAUrs6IA7xtVKBQ85mHU55iLtP7IYPXWzEOVvD6ai2E1gu1Q
      jE4VvaxvqyCEeCu/OIB5tpc7xpwIxykljuM25FBlJbLG1IsdHe0AFVUDRG4n8mhEsVhEKpXy
      dRDsBI7jzEla/+E7VuHUlSmcue62QF23rAeP7lnt/f36rSJuZUvYNNKLVLx2JMdyKL74o7fw
      5rkJZJIafvvxndiwrDlNHw6RvszBG3qIu4PoGIu74mJOiEaNtieAu/q7jpTjOKCk0iA67OHx
      3YL/vdkHzEWpovILDMMAA2urB1U9pOIKfv8X9+DqeA4MwMrBjMdVOXBmHF/80VuwHYrVS7rw
      3z9xG948Nw7DcnDPlmH0CGptl2/mcOjMOChjmMrpePbwlZYmAFd1AIRsr2O7HH9W2R2CUaFi
      sfi2IURGibYngKhYwMHFXsMmAuO/YWWB3RYGYFTkPMYYDMuMfPBzECA0SvH66TGvPuDKeBb/
      6btv4NKYG4N/49w4Pv+JPZ5zm4or0FQJuukuLj3p5rlEQUEroGL38wYfXZkuzynmME1zQaq8
      FgPatil4H1exOJ2D6wH57V1WmRhtDMCoil+ciBpbtIJVQ5XETSKmYlrQ5r98M+sjuS3tTeGX
      HtqKDct7cP+OkaYZn2K8X8yV0LLSBaUUmqpViQc4jjOnsi+LHW3vABIhIJLs064kpLZgrkQk
      QG5PBkWMUnAbthXwc1q27cppzLN5++idq5DQZIxOFbBv2zIcPHMTTx24BADYtKLPJxtICLBv
      63BTpZOMMdiO7dVUh7Fjua5PIpFAJp2p2h0Wmue/0OjICfbseVZJtDQqsG9n8AeZn61MIp7Y
      IYTAobTjXr7tQFUkPHT7Su/fK4cyWDfcA8NysHvdYNvXxM1QBlSZPgBneuaRSCSQTqWrZMyD
      /Q7+v4h5S4S1qzzBwJBIuHUAqlDB1Aq4zk++kF/QrGbU4DsAX92Dz3VmZgZEIkglU1WDH4g+
      Gfh2xLyOBoc6sB0bTgvRBkZdQdpYB8JXsix7sub/0sDj+UE4jgNJlpFMJKsGPy8AaqcC7l8a
      5m0CiHZmKzsAZQymZcFqg7IMwBNu1XUdjLXWP6oTlEwH1ycLNeUKowDXMgrL2BJCkBIquzh4
      ODqfz9elgfMyxdGpoq/H2L8kmDadPypEO3RmxtyOKLZtAYxBKasYtALbcWBZJlRVhUPpnDMb
      AVe/5i+/8wZGp/JYNdSF33vito7Em8IQjPoEEfYZYwyz2Vkoiop0JgOznBkO2xlPXpnCF3/4
      Fgq6hbs2L8VnH95Ws1737QbKGJ584SxeOX5jfk2gVpNggBs9SiVTiMfjba3e1HFAiISYFoMy
      T8X+r50axdWJHGyH4fzoLN4415oseDOQZbnlNrAlXXebWeg6crksiESQyWRCm4v85OBlzJQV
      nl87NYobk/koLx+2w/DaqZt44/xEldBtJ/BoJ3Xkfg6cdqNw2aK5+MhwIgghkMtyJel0uq0J
      oKgqbNuGZVuupug8xEC7BRozIfBU46IEpzA3u7M6lKJYjoYBAAGBoRsw9HA/oFdoQhFTZSQ6
      kB4Jw48PXMS3XzoHIFrFPFFYmJBKmyZuxskSwY3JiuO/qCcABw/VtRP/LxQLLldJctuLtjL8
      p/MGZElCV7K1Kqy4pkAqa9gs609j66rouh5y00ekOPPP61XOGYbu1gAQAqUJLdUP7lsHy6YY
      nynhodtXYqArWor6zZlK8m18JrpEnCRJkCB55jMAvHFuAt/ffx6qIuNTD27G9jUD+MFrF0Ap
      e3tMAABt6xWlkikQAJZjo1QqgTQxiShj+OKPjuHVk6MgAB6721V+btbaePZwpTn1+EwRk1kd
      w33R9DCTJKlK1qQRKKUolkotmaA9qRh+/b3bO73cmvjgPeuQK5qIqTLeI+RIooJhUcgygek4
      +PIzJzBbcHe6r/3sFP7NJ+7EzjUDePP8RGcTYD5VpduZALy2lZad32ZNqLcuTuLVk66qMwPw
      o9cvYu/W4ab1/0XzIa4pkXHZuaJbmOnDq+bC4JR3BkZpx0raUWGwO4H/8cO3R35cxhieOXwF
      Tx+8jExSw0ffscGn02raDiZmSjh5ZQpAhyYQAysT4KQ5dzDbWf0lSUIykahQBuCK8TZCruQn
      hlHGfHydRvjIOzaAMWAqp+PRPavR3URv3kbgSs1czrDVBUeR5abu/e2OqZyB7758HiXTxlRO
      x08OXcZjd6/BD169AEWW8IF71iKmyh75sLN6gHL4bK7pBbVCfc2A/453Wmkm87lr7SB60zFM
      lxuvrV7ShdVLmlci6M/E8VuP7WjresPA+U/c8W2FBuJQCtNy2Z7BAEC2aMKhrKnm2W9nvHfP
      Gty/YwSyRBDXZDAGfPLBLXjq4MUKFaIdc4aHmzpp39kIYjfyVsEpEPz+uDl0fnQWb128hSW9
      Kdy1aUlone1UzsD+k6NQZQn3bluGVLz5taITicmw33LHV5Qqb/ZYlmUhm8+BBNS3z96YxV98
      6xAch+LX37cDezZGKzkYNRiAom4jrsl166KDJtBn3rO1poyK7QhOMLeTuX3ZDGdGIhKIPHd1
      o8HWPK1ClmVvYgPuPZ64MoW/+NYh2I772YXRlfjUg5urftuXieGxu1a3fE4ehxbrIlr5rU0d
      SISAMdds4devaVrLpo9lW5jNZUHg0tdFvHlu3Guwd/DMzY4mAN+ZTNOcs/4B3335PH70+kWs
      WdqFz33sTl+TPxGEEDx8xyp3xZdJXQVtRSZuIoyXNnI2Z7OcGfclRz/4+dYdj8c70gAF3Emk
      qqpnP7907Lo3+AHg1ROjbdfehsGLQ1PaslgiAwMYA6X+xnPtmIC8EIZSGpr72FuuREvFVdy/
      Y3mLV+oH7y88VwshIQQ/OeQ2HTl7fQYXxhqLDcQ1uSn5+HKPML/83UIzJt1BRCF3OPjFe6KU
      wnEcZBL+pFRet/Bn3ziIzzy8tanO4o1AhWfJV/IjFyZwYWwWm0b6sHVVX91chCIrXndIwF//
      0OpuQsv077DfrRhM4//4tXe4cukdRql4N812JCabAWMM92xZhuePXsPSviRWDkWnDEemp6dZ
      JpNBsVT0ZLAXUguGZ/HS6TQS8c6SL7zfgSRJXmvPmYKJLzx5ENdu+VP7W1f143/62B0d54lF
      v8h2GJ46eBnfeemslxW+c+MSvHPXCmxtQk9U1PPnCg7NgjLq6p5ac1sBJ8syMplM2yLDzYIx
      YHy2iJ5ULNJGg0TXdRaLxcqhQgfZ2dkFVQRgjEGLxZBug/gWdizLsryBxEv/GHO7rfz5tw55
      dnBUE4A7sVfGc/jrHxzFzalClSmkKRL++JfvwbK++nkFvopzsbBWJkBJLyGfL0Ce41oPrtgx
      lz0E5hLe0yGELEi9bBi0iOxJ7pgVCgVf3SshwLrhbnz4vvXo74pj5VDGzfSW/04pw9h0ETN5
      o2U7nl/304cuYyxk8AMuDXdsqrlCFMZYy84vd/qlQLTEtCkOnLmJV06Mem2dOnnOXLzs7VxX
      oIi1tothFjOgY8e3GRACPHTbSty3bbkvWkAZwz8+dxovHL2GmCrjMw9va6u5Xb1terA7gfXL
      ehseg9v/rTrAhmkgny9XvxF+LODJF87gp4evAABuWz+Ez39yH+KxGCilXoO8ZkskJUlCJpN5
      28upKPl83rvpxVAc3UnSKwypVAqapiGfD6fzBh3AiZkSnjtyDbZDYdoUP3jtAm7fMNSyafSL
      79yEZX0prxB+/bIeWDZF0bCQSWhN84qA1oWquAIdBQWjDMlEEjZlOHbplved09emcGsqi65U
      zGs6wrtGWpbl6x0gXoemaW5thePMud0/H1AALJrCaMYYVCX6pFor99eTjmFZfwpXxl358C0r
      3KjNsUuTeP7oNSzpTeJ9d61p2JkwWAjPmNvdsN3CmFaeSSIWBwGBbVtQFVcoizHggZ0r8O2X
      zoIxhn1blyEZU+A4jq84XlVVxONxZDIZTz6eD3xZlmFZ1qJa9SezutekpB3O1aJSh2aMQVLc
      OlZVVSPLMZRKpZbMu8msjv0nR9GV1LB3y1Jkixb+5Cv7vT61771rDT5+f+uita2CO9RdXV0d
      mYW8BNK0LFy/VYBDKVYMZupmVBVF8VomEUKaKqOcb+RLFv7gSy8jVzSxeUUfPv+JO1s+xqKi
      Q1PGYJRKKJWKIISgt6cX8VjnXRZbNe36u+J4vyBIlS3kvWgRgFAH1uNFRbiYeBLlHRANefiX
      5wRWNNlbzLZt148o64gqioJ0Oo1SqbRonN5bWR25cnvaSzfbU+JeHEt/GbIsYaC/H91d3YjH
      E1CU1gpRaqFT32ZkIIOtq/ohEYJkTKnKnHL6Q7UaXvvgPZFF9b1WEYXmJ/+t4ziwbRuqqiKT
      yfh6CiwUVg1l8ODuFRjsTuAX31VNZ2kGi8oEAtxVLxaLedSFKJDP5zvWvjQsB1fGc+hOxTDY
      nfA5sY7jeNnbqPj28Xgc8Xgctm233RAwCt0fSZKQTqeRzWaRTqeRz+cRi8WQKNPMs9nsggdP
      OlkkFpUJBFTi3lEiCoctpsrYsLxapdktveNtjKJbSGzbhmVZbZtUjuNEInpFCPHsfh5JMwwD
      pmmiu7sbqqouuLBuJxNwTicAZ5bWq9APgmc8oxLDFdmgcwFCCGRJggQuRc5w5to0TJtiw/Ie
      t/hCJnV5OWHgFXD8GQbRSGcpKju91vNjjCGfzyOZTC74BOgEczoBGGNe42XArx3KO5Xwh5tK
      ubQAWZYjDbHN9QQA4Cle66aDP//WIZy97sbHU3EVPekY7t8xggd3L4PNAKVJnhVvCBim6mbZ
      Nk5cvIlswcCu9UvRlU6GKr9FgXo0B9u24TgOYrHYonGMW8Wcm0BhbUh5ZIPr2QdXuU59EpH/
      AzS/RTIG3MqWIBGC/q7Wo0/PHbnmDX4AKOgWCrqFb754BptX9GJZf2vkPr5zBgf3d184gX/8
      2SlQxrB99QD+50/fi3QyUfXb+YDjOIjH4///BGgFfAfwNOwD7Y86NX/EXUSUVq+HomHjr/75
      CE5dcTskumpoW0M55bWcrvHZcHkPShlsh7bMsnUcB6rqj4TZto39J254ndVPX53C2GQO6wMT
      QFXVeUlwWpblKVMvluSYCE4o5CFl/t9eqex8X4zt2J5Cg8ebjzgKxSXVW4ki/fOrF3D80iSc
      8mB95fgNvPjWDdhCb2LLpvjmi2fxp199FX/zg6MYn/GbBptGqvk9qiLhvu3LsXKoq+WJHdYX
      WZIkX31ybyaO3ox/8M+HSod4jZRSaFr04l+dgg9+fo1hvui87wCMoVI2JzWvbNb++eqv/tdu
      FTA2XcCxi7eq/nZhdAb3bR9y49+yii/95Dj2nxgt/20WZ6/P4E8/s8+rF75r01Jcu5XHs29c
      geNQ7Fo3hF941yb0pmJ1uT/8GoMyJ2ErqizL+OVHdqG/K4GZgoH33LkGvV3VtGpN0+bNOTVN
      E7Is48Dpm3jm8BUM9STw0fs3oKeNxt5Ro1Gd+7xOAFeqrhLilImEbDbrTYIoSiCDg6neBHjh
      rev4h2dO1FQ/HuxOAJBA4EA3bRw6M+77+1ROx+lr07h9/WD5nMBH7luPx+5aA8oYEpriDfyx
      6SLGpgrYuqofmlDPKvoqwZfEGwSKndwJIejpSuGTD+/22KJhL3c+GLUchmFgumDhy88cR0G3
      cfb6NFRFwmfes3XerqEWgiH1oE817zuAeHJZlj0n2LKsyGzIXC7nKyUMg0MZfvjahbrS3z8+
      cAlvnp/ArzyyFQPdCSgygRmgwkgE+PmRa2CMYefaQTx35Bos28F925d7tIOb00X86VdeRcm0
      sXfLcEuSKaVSCbIs+0yMZkwcSZLmzQ+glGI2V/RJwU/nFt4pDntGwc8WNBGmaZovIiSWMLYL
      zm0H0LFCgWE5uHQzi7976jj+7afuxkO3r8L395/3/r5uuBuXx3P47suuyGtcO+N1d3zxrev4
      3MfvxJqlXRibLqJUnjkXRmernOhGA7pYLLaVDZ6vCQAAy/rTuHvzMF4/NYZUXMWje9Z0lKGd
      L1RNADF0ONfOlGVZUMvqzZUqJqkjXZ1mIUsEj9291jOBkjEFS/tSuDBaTaqazOqwHIYP7luH
      Zf0pnLw6hcHuJN61awQ/Lje7A+ANfgAomTbevDCBNUu7sHVlH+7ZMowLY7P4+AMbGyaxguB0
      5XZ7LMyHQ6zIBL/yyDY8dvdadKViGB7shSRJsCzL02eaK8mUThC6A9hOZZ9XA4Q0t2idlbVm
      Op8gXEtGXP25L9DOsbkvwSMoYZEUjvt3LMfa4W6MTRexbrgbsiThaz87idNXpz0xVQDYONKL
      uCaDALh781LcvXmp97dH71yNQslyO9nYFPtP3ADgKkK4zbIJNFXGbz62o2NiWyuDWbz3+YoI
      yRLxRIBzuZwnRyOGSTmpjlM95htiSBQIIcNxVQMAoeQuHsoEXPWITswVbtsGlelUVY2ED8TZ
      kK0maQgheOGt63j5+HXEVQWffWQbempo/B8+N4FvPH8aUzkdW1f2Y8NIL8Znitiyog+aKuPv
      nzqGoZ4E/tWHb0dXUqvp8Da6D17Z1uzzZowhl8vBNM3Iw8ztQAxNc31Ty7JqVurNBXi7LH49
      EpGq8wASkaDIiju4Q8hdTCzz7nBl4VuipmleqV2wi3knIIS0te0y5ppEo5MFHL0wgT/5yn4c
      vThZ9b2x6SL+9odHcXO6CMumOHJhAhdHZ/Erj2zDPVuH8dSBiyjoFi6OZXHorBtBoox6jQJb
      2Q1aXcXnKsfSLiilME0TxWIR2WwWhUKhZoO/uYKYAOOToerp8O2hlr1J4HbdkGUlkl4rYmaO
      rw7tbtnBREcrKnciioaNv3vqGLJFEwzATN7A3z/1ls/GH58p4as/PVnVBO/ohQlQ6u5m21YN
      AHCZpOuGu31ZSSrstPXgqcy1aMpwE2ixgqt1xOPxeastcImLMmRZ8Rb3lqNAnu3UxgXwyiLx
      xXPbMCqHWxwo7RLhRqcKvgowAMgWTNzKljAykIZuOfg/v3EAk9lqnpPlUHzvlfP40L3r8MF9
      a7F73SC6Uhp607Gq9rDNrs6UUUhNyPyJ4EREXvMbJdox48JgWRZM00QymfR8g/mARAhQ1l2d
      1/2Rhzv5as+Zony16vRFBSVE2p0AQz1JaIrfB0nGVfRlXILcjVv50MHPceD0mNeUYdWSjCc/
      Lgnlja1EdAiRWuYRMeY20+C+Q6sN9WrBdlrv9VwPhmGAUlcJMOo6kEYghMzvBMjn88jn815B
      BY8CzNWNt5tYyyRUfPLBzVDKq66mSPjUu7d4ShB9XQlfNtf9TcVJHhlMhyqyuWLCFR+r2XtQ
      lNafj2VZyGaz0HUd8Xjcmwidg++w0cT3+SLFK8/m22eZ95JIV6KD+ezzeDzuS4pFBV3XfYpw
      Ybg6kcfZ6zMY6Ipj2+p+n1JCrmhhdLqAZf0ppOP+cPCBMzfx5AtnYNkU79y1Avu2DuNnb16F
      psh4zx0rq77fDnjELZFIuA2xW3hPhULBF/3iz7XTXZbXPbOyfHsUu0omk/FYr1zOkodwech0
      rjCvE4CriYnKx2HfiQqN5FBePj6K//qTY55c+l2bluI3H9tRVy5EhO24ORFNmZvkHY9UpNMZ
      JMuUkWbAGMPMzEzL5l8z9yCGyaNqjBKLxbzeZ0Gnnx8/l8vNiVM/r1QIkZs/H5TdeiuH7TB8
      66Wzvl4Br58ew4O3rQilNYfB7ZxO3Ngyi9aUcxOO5YGmtLbSGoYBy7Yht+BnuA1SWMNebxKR
      AAmR9lvmPDBZluE4DrLZrO/v3JmfC8y7EzyfqLcCOpQiV6xOkM3kqz+7PJ7D9/ZfwKGz414h
      ingOSl0bNl+ycPjcOC6OZSOxkPkq2IrSBGMMxVIRlNWXaQlWzDnUAUPjoAG/nihp7DwAUquU
      cy4zxvO6A3DagyRJkGXZR/OdC9RbNTRFxuYVfTh2qZLgSsQUrA8oP9zK6vjCk4eQK5mQCMGv
      vXe7r6s5AwMhwMSsjn//9QOYyumQCPD+vevwxL3r2r52PtGkFrVSzbL9TFCpfpJJdTafZ0QJ
      kXzdgfjn890jwrIsLzIYVkY7V5j/irCyCnGpVIqUKcidJx5daqRXQwjwa+/dgS3lRhVL+1L4
      3cd3oT/jrwW+OpHz2qZSxnDq6pTv7247IwnPH72GqZxe/h7wzKHLngR5m3cEwLWzW4GulwT7
      uX6vN3fA2yCoyLtws4tPhPkAp8MDrrkzn6JbiyNP3iEYYyjpJZejRCq8k0YTLKbKmCiXNQ71
      JLB9dT9MmyJXrGy5a5Z2e/F/RSbYtXbQd16gft1BrettRiqGMdaSPqphGDAMCwfOTOBHr1/B
      raxRkxPPzSoC4g1+AnjRzflQ0xAhhqzns7xyQeoBeMw3qi2WEIJ4LO7KEzoUpllCsVSs2vqD
      GJ8p4lbWnQCnrkxh/8kxfP2509BNG7vXD+FXyyS4z39iD45fnsSy/hQ2CibSdN7Ec0evIl+y
      sKQ3CUWWvATYHRuX1FSQpsxlvoKQmjIpfOzJTeYAisUibNvGM4ev4MkXzoAx4OXj1/GHn9yL
      rmR1SNatzitn5UmFkuKee2E4/KVSyTOD5gvKQtwqN1f4thfFTfMssKoATNNc/rldfxtfMZjG
      nk1LceT8OB66fRW+8swJr3DltZOj2LKiDw/sXI6hngSGekZ8v82VLPxv/+01z+wJomg0dtwI
      6kXCmDdIa4Gv0mK8/NTVKW/y3MrqGJ8poisZ3vyP510YY2AkRPwK7VFe2oVhGJ7+6HxBWYiG
      SFyDnqPTUkiHUiBQAklp45i2RAh+9/GdIITgVraEpw5c9P39J4cuIa4pKOgWNq3oxchAGtmi
      CU2R8OrJ0ZqDHwCG6/T/kojUFLeHU0dq3Qc3pcRk0W3rhjx1i2X9KQz31+9DBvhD0qTc23ih
      GmVx03W+qskWxAQKqp11Gh4tFgvIF/KQJBlxLeauapQ2bWIxxtCfiWP98l6cuTbtfX5jsoC/
      +cERAK68yfplPbgwOgtNlUMVDzIJFZtW9GFJbwrvq9Nku9F1eZnWMjW83veDym3v2LEcA90J
      TGZ17Fw7AE2RcH50FumEhqGeRM2BXSvUOjFbwuWbOQz1JrFiIN0pA74muBWgqqpH5JsPVYsF
      UYdOJpO+HaBTzMzOoKSXoCmu89SubzGZ1fGHX3q5iuLcLD5073p88J61bf1WBKdA8Faxtd4P
      L/jRdQN53UJclX0d1PO6hS88eQiXbmYhSwQf2rce79+7JvRYYdh/cgxfevoYLJuCEOCxu9fi
      I/et7/j+ONLptE9TiEfweF1IMCEWNShjC7MDcM16vhN06vXbjh1JWr6/K467Nw/jhbeuNfX9
      e7YMo2TayJcs7Nm0FA/dvqKj83PwUKSmanXviTGGQknHV545gddOjaEvE8fvPL7LU6N48a3r
      uHTTHUQOZfje/nN41+4Vno5RPeimg3/6+SlYNi2fC/jhqxewb+syr+yx3nUB9RcirgZCKa2i
      OViWhUwmg3g8Pqc5gTfOTSycCRSLxSLh/birpQNViuZWPv3QZpy5Pt2wjSkB8K7dK7BheY9n
      r3L6Qicy6dyu51TxeoPItExcGsvi5eM34FCG0akCfnLoMn7t0W3lv/t9K8rceoVmwCe279rg
      aqeGTQBeK06p2ytBluS6DjwPgJRKpdB75JqjPGAyF7KLVydyC5MHEAd/p6s2Za4DHGXWsqhX
      R3AkQvC+u9Zg1ZIuLO1L4dMPbfX6BfgpBa2VOgbBS045O7bm9xiDrhtQcT5zZQAAHJJJREFU
      ZX8kSWzPes+2ZT6a9t2bltasbQ4ik9CqHOiYKmPVUKbmdVu22XQijRASWv5KCPHYody3mauy
      yd3rBhdmB+ik7DEIx6FAOZkTxTFVWcL65T04fNavAsfAsG11Pz7+wEb33yGDnE/GTsKHlLq/
      bmT+ONSBZZlYPpDCR9+xAS++dR1L+pJ4/91rYNoU//TcaRy9MIHeTAz37xzBumXdviReIygy
      wW+/fye++KO3cP1WHr2ZOD797i01u1y6pbKqlxxkqGaXcpUIRVFqsgH4xJ+drcjTzJXy9Ool
      XQujDBcta5JCjYiWy/HZh7chHddw7sY0RqcKYAzoTcexrC8VOvBth+HKeA6JmIzB7njbg981
      oygURa1izgZhGKbrR0kyHrlzFd5920pIkrtTffeV8/j5m1cBuI59JqnhI+9Y3/J1jQyk8Uef
      3ouSaSOmyqFK2RxB2csw8M7ys7OzNXdJzhWbLyyYPHqkTELqtEzeqleHnEmo+OwjW+BQ4PDZ
      cYxOFXDHhiH0pKtDnyXTwReePIjzo7OQCMFje9fiw22S4DgBLhbTvGsEKmoGYqbWMHRASKS5
      1GwX5wPiXlfHc7AdWncA14IskUiKewC3QIlL3tSiqtu27fkF85EH6HiqqaqK7u7wTGMtRHlz
      mup2OG+lQyN3Vm3HrimcRUCgSAR3bVqCD96zFiMD4e1FXzl+wxtwlDH8YP95ZIutx6/56u/q
      ImneoOeRMp7wotS9bre/QvgE3lom+HGsX97T1uCPGjza1yjqZxjGvNExfDuAoih1ldTCwKMV
      iqI0VboWtRy6oigunbe8GoqRmFrn4f0JgIDOURswA3QLBnihQ8DVF91/YhTZook9m5bWjKDw
      /1dV1e05JjynoMoFl/ZgLDwy8vAdq2BaFEcvTmBkIIOPzUNT70ZQFAWpVAq6ri+qnmK+CUAp
      9Txuzi/hcnaNkEwmkc/nvW1blmUkk0nvWI7jeGSnqMAYQ66Q96qZuAVKKQUjLk05aE9WapEJ
      pDr6R83i7s3DePrgZU9K8Y4NS3ztlf7z947g2CW398DTBy/hf/nUXgz3JX3cezH1z9UbarE4
      CSEwDKMsTRm+qssSwQf3rcWH7l0X6UqqWw5+/uY19KQ17N0y3JJPIeq/zsfq3qyZXTUBisUi
      HOpAUVX0dPlNG1HDk08MwzA85WJeUcSlMyzbghaLgcDd9rq7uyNd/RljMHTXFpakaiZjrcfM
      49NRXEtfJoY//cw+vHFuHOmEit3rKpGWW1ndG/yAK7h14PQYPnDPWi9Kwq+DMQZZUaCpjeUP
      my0PjHqg/ePPTntJQlmScNemJU3/VtSDmutWStwcbsYvDF2OKWNglELXdciK7JXAybJctYKL
      bERFUeAQB2rZxkslkx7bEIhmwIlwqFv55NMCQmWVCStun4sqp66kigd2Lq/6PBlTfBRpAMgI
      +qA8WMqY2w0yk840HPw8MbQQEBmuQeGwRpAkyZNoqSdU0Cn44twsFKC6kRiYu2Xl8jn3W4JD
      pshuhk9WFE8Wg4c2k4mkqwFpmb6VbK5K62zbrjq2RCQQiXgJmYVEMqbgEw9swtefOwWbMmxb
      1Y+7Ny+B7biUX1nRyosLQUyLec+4HtoVEJstmLg5U8TIQLpmnUIjfOKdm6AqEnpSMV9ZaDPg
      dn88Hp/Thnp8AWw2KkjGx8eZ6BQGHa9GcF+aAkXhuwNBLpdFd1f3nJe25fJ5mEZ41dNcyJSE
      gfsQorZpLpfzXYNuUZQMB/3dcfAKsmQi6XvWzT530zRbVlR+5vAVfP2503AoQ0yV8ZuP7fTa
      Os03OAmyE45PPYvCrW5jDWotKlD4Shn8ctB+rBlRoRSUmgjuytlcFqqulc0mGYRIUMuy2FFB
      7GMQRNS+Bh+korw3NwfF3ZMQgnQ67ftNt7ATtrrABF92qyJRUznDG/yAG5X6yk9PYOuq+xBX
      51elA3BDnOl0uqMJ4Moyhtv4bi1D8+9eAQOIYCvziE3VQYX/NQNX4sKfwk4kEsikw7kkrYIx
      Buo0z/lv9xy8mbdYnBJMSgXrGzSttT4Ajb5bKBSQSqVaev4cY9OFqj5oswUDuaKJeHdzHBuH
      Mvzk0GWcuTaNDSO9ePiOVVCaFA8LgjHWkQ9Ay/kSoNJfupMx4DMG+eAPs8+asU8bQWpB36YZ
      xGIaTGPuYsqJRAKqqvroG2ErThhaeSlefF94vmKNLuCaDLzTSisYGUhDUySYQm5ioCuB7hZa
      mH7n5XP44Wtutdyb5ydQKFkd5RY6kTokcO17p8w6JawzgTUJqLyARh50p2E1rvwVRXiOEJcw
      1ioYANuhqHcJiqIgnU57xKxWd79WUWtx4WSxZNINLnDtnFauoyup4bOPbEc6oYIQoC8Tx68+
      ur1K3LcWCCE4cn7C99mRCxPz4l/Vuh7+vKJIqioMDGCNw0diAXa7J5UFglen4GzCVmA7DN99
      5RwOnxvHuuEefPLBTUho/oiIaMNzQloz3SujDvVy06tUKiEej3uJRm6OtbKK3rNlKXatHcBs
      wURfJuajTNcDv/fh/jSu3ao43sM1SIHzCYlIkVTsK83GTatCpWXEYjEkEklIUllZzKFwHM5Z
      KSfOHMcLpUZFhSjpOizLamllPn550tvKRycLGBlI45E7V/m+w48nBRxXbhoG7X0RUUeeCCGI
      xWLI5/NeVr1dJGNKW+FPhzr4hXduRNGwcPlmFquGuvDJBzd3dC2LCUozgz84GEQw5gqqep1e
      QLx/BzksUfKAFEWBrpdaUk4zA7W+vPaXkEpnScuyvISNGLHh5pvjOKGTQJwkfKLzBKG4ewKu
      acMnE++PVosiks/nPcHY+ez+ziERCd0pGf/DE7eDUlcJO4pXOJ03UDJsLGtCtWIu0fCJil1X
      wiaAaZqYnpn2spjBKAn/XdTgzimnQjdznu1rBrBr3SBOXp7EyGAG921f5jVq42YFJ/cFIU6C
      oGwHH/ymaXp9j3lfX96fQLw2Phkcx4Gu614OIQyJRAKFQsH7viRJ0Mq6R3MNQghMm+FrPzuJ
      C2OzuH39Ejxx7zrILbxPw3Lw8yPXcGu2hPt3LsfKwQxKpoN/9w/7UdAtfP4X9mDDsh44lKGg
      W0jHVY/WMhe4ldWhm7bH7vWeepgNK5ostbZ3/mIYquVO5hKqoqC3p9dtg2pW6LOSJId2ZwGA
      hCbj9z60G/mShVRcRSqZ8IqzeVaZO5m1yGi8vWexVIRlWZBlGd1d3cgX8tB13f2OEJ+uR2rj
      4DFx7giLjq6mubmUXC4HSimy2SzS6TQymQzy+fyc2+LPH72Ol4+7vY9/OHkBG0d6sXNNf9O/
      /94r571m4m+cG8cf/9JeqAG1u9miib/+/hFcHJvFhuW9+K3370Q6Hm2REwCcvjaNP/vGQVDK
      8KmHtuDdu1fU3wGaYe/JioJMKo3YPOo5Au4gUlUViqpCN3SPBl2LIckhEYLulNuQQay7rRXm
      DIIBPtarbTuYmpoCygO/HXo1JyHyMGfYYpNOp5HNZj0VhVQqhVgsBl3XcezSJH584BIIgPfv
      XYvNK5rrb9AMDMu/0wTNyEbgqhSAm3+YyRtYOZTBv/vlezwT6JnDV3C6rMd0/PIkDp8dx73b
      lni9fKPC6avTXk7k5OUpvHv3ikpBTC37vlaLTs5d78p0zauYaRDxWMwliHl028b69rzoWhSo
      beRMO46D2VwW+XzOJeGVBzz3dzi1uhEHhTFXVlGsGeDn59cjXhdjrvYPp1fwz3ivtfHZEv7z
      997EicuTOH55En/53TcwlYuuhva+HcuxZmkXNEXC7nWD2L66+dUfAPZuGfZIieuW9WBJr+vM
      96Zjnv0fjErF1PKwjHhz27dtGYb7UuhOaXjPHSsBAOTqtat1TyOaQaJTG4vFkE6l59XsqYWZ
      2RkUCgVPGVpTwgvKZVn2uhFyB7VRgo8xhkJRx3NvXMRktoi7Ni/FUHfz7YpE2JTha8+ewv4T
      N9CbjuG3H9/lqSzwRYb7IzzObZombNuuWRj+2qkx/M0Pjvo++70nbsNt66Lj+tgOQ9GwkE6o
      LalVA+6EvzyexUzewOYVfYhr1c/asBx84/kzOHllCtvXDODD966Fqkh1i5rahTiGgRpOcLAa
      qSr0GY8jnUrNexOFWkin0rBtB5ZtQiKSR4bi4E4mj+zwwdZMVIVSiiefO47vvXwODMCrJ8fw
      h5+8q62Q4tXxHF586xocyjA2XcTTBy/hN9+3A0ClJkDXdS/xxd9DPVWEkcGMj3KtKTKW94eX
      b7YLRSY11SAagRBXfQF1SgdiqoxPv3sLbEqhSBIYaNNktlYRNOdDDSy+6odl22KxOLrSmcga
      pEUB1xHtgqpoIETyBj+Po3d3d7t1w+UwZ7NmD+BOgBOXJ73d+OZ0oW6P4HpQFckX4Qhu/dwM
      4j4GLzqqlwNY3p/Crz26HcsH0hgZTOM33rcDQz1zo6MzlyDElaQhBJGt/OdHZ/HdV87j+aPX
      YVjh4f6qZazeiV2bP1MzGsQYQ1EvIVlHz3IuwB3i/r4+j3deKpU8AS4xB9FqLkKWZdyxYQnO
      XZ8BZQwrh7ow2J0AZQxnrs3AsBxsXtHrCVTVO/by/jQ+dv9GPH/0GoZ6knh8b7V6BL8XwCXB
      xWIxUEoRi8Vq7gR7tyzFPWV+/kJnaOcTk1kdF8eyWD6Qrqq1fvHYDXzp6WMe5eX5o1fx+U/s
      qV50rl+/zkRKtNjClNv3fAD1dPeEare7dnIRul7yZP26urprhiPnEjw+Ljru4n20urIwxlDS
      Dbx2/ApmCgZ2rxtEJqHhiz96C6+eHAUArBzK4POfuBMxVfKpLIeqTRAC22Gehk8YMpmMW5rq
      OF5eIZlMQtf1OeuWWLlmYCqngzKG/q54yzb/XIMxN4l27sYMvvT0ceimDVWW8Kvv3Y69m5cC
      cJ/xv/4vz1ft1L/7+C7sCZRxKoqqVNEcwpI2yUQydFVnjKFYKvmoz5ZlYWZmBj3d3fPeGbKe
      Xd/K4HeV1+xyNxcH21b1eFnn65MFb/ADwJXxHA6fncA9W6sNXbdmgQBgXkcYruEjcqtEn8sw
      DG+g8/LHQqG+VmlUeOGta/j682dAKcP77lqDD0Sgdh0lXj01hq89ewJFw/ZWd8uh+MH+C94E
      AIBCqbpsNB8meSkRyX2xZfsz2LuKR3xqidnajo18PuclhMTvzLfselSgzCUIqooCAjfL29zk
      qaZHuM+gvPMENoRgyJN/tlCyIZZN8dTByygZNgzLwTOHL6PQUaO/aOFQhqcOXERBrwz+MDDG
      cJcwGQAgoSmhIVzFPbADVu5ZBRAvw8kd4VrhTsYYCoWiJ3kiSRK6u7qhG3pDcdfFDF3X8f+2
      d2WxUZ1n9Px3mTv7jHdjbGwMBoMxS1gcSMJStTRkT4SaTYr6kCYvVV+ivvBW9SVS1FZq1UVR
      pbZqpaaiaUvTtE2apFma0IaYGBzA2GDAY/CKx5713rnL34c793rGzHKvPR4PSc6LNeNZ7sz8
      y/d/3/nOkVIpvc2T5SBJUtZkXlXtwZ2bVmWFQHd01CFX4pohDAhLTL+hrN01vSsA5WvhLASG
      IQi4HaYyttflyCuoNRAK48LIDLa212LdKnvCaIsFIUDQI2AE0az7eZbBAwt2qicPdYLnWJwZ
      nkKVV8Bjd3egLkcDEJmYmKCG0pg+6FkoigwQXXUtGAjm7e2llCI8OwtRTJqZI78/AGcZbS5L
      CYNzn5JlU+VZVRRoOaQXMw/BG5qD4Fnk1CEqBEWd18ohpLAfWLkwOh3Dqx8MQVY1PLx3namA
      nYlPBifx89fOpJ3lGbxwdGdJq8+FMB5O4Pj7g0hKCg5uawFDSM5DsIFMzlbO/98Yu0EzRYtA
      DDowgc/rh6+Im6OiKJiNzEGRZXi9Pnjc7hVfyRYDSilOD4Twkz/3QuBZfPfxHqyu9yMai5ld
      SPmgaqopVGt3AmS+P8+VzxxuKfjBH09n6R3d1dWEZ49sWcErWjwYTdPSWzHAsAwCgQBcTicc
      DgHedB9qIbAsi6pAEAF/4LYd/IBOdXjj1BWEYxLGwwm823cNoiiCalYML0jWH6swDekIKbpS
      lQOZlO1CWFgU87uzd/yPzo/hxVdO4dKNbJHeUlyfHQ1YK2CMgxrLcQgEgvB7faiuqobfmzvf
      vxAGQ9JgVd6uYBgGXW01INBj4c41NVALdIFNhBMYm9Gpzkw6fLHrrcimuUOGm8pKfn8GmVDV
      1KKD7OF961Af1EOONfW+rKYiQgj+eeoqLo6GLVtNWYXhr5wZOi4VZGxijKqqCpfLhaqAHscZ
      KbhK4PmUC3q+P4krN8Jw8Czqgy6Tq78w/OkdmsTP/toHCuD5+7eip7Mx6wdZie9sJirh7U9H
      oKga9nc3Y3Wt9UYTSikUTdX1RvWTOpgiRT2N6g6SdX7nLfz9M8PT+PDcDTxUQFXbLijVjQP1
      Sn/pRJY5vZGFBZ/OnxuDv9QqzpUOSvWMzNomXVo8Htd7YHOFPwOhGRhKIxdGZtDT2Wiumitx
      kBVlFS8d/8TM3nx47ga+/819qMrhZ5ALhBDwNq+bIUBDHsrFtvZabGuvtfV6VmAkIko5Lpl4
      IgGnIJgGxUB2RfiLgpQsg2c5OHjeLD6RPJyUA1ubURdwocbvxKHtLVmPXYlF49pENMvULy7K
      +OzKzbJfx3JiMTQWK+CyhGXNrqrKH/z6ipu+ZpotTrWYL4nnOUhSymyNLJT1aa714qXn9gNA
      yUIf8wBqnqetT6agVwDLkCwBLF2G8UsUA6eqqqnsvLAsX6lIySnMzs0BCwafTnvm4fN683ZW
      5QPLsHDwPERJgqapRRmJt0hHQpfsI4QsqovJsBhdeE1WFqOGoAvfOLARJ05eAtV0t/hNLdVF
      n1cpiIsK/nHqKgSexb27W8vqZsNBo5iLzCEYCN4WoY/OmZeyBr9xvyzLaXsd3ehDVVW4XYXl
      RLS0DLzRe2sqO9j8ERiG0Wsotj9R+vmEQEOGBqiqe/X6XA5YmcOHd67BPd2roWn0FiPsd8+O
      4uS5MQg8iyN72rBpTWVNjhMfXca/Tl8DoFPED6e7tcoBDkgPAkmE11PaRorlgKzIEMXcgljG
      7hWPx8FxXNHBb4BSimg0aubi2fSB0K7p9VKYk5k7Smgqjpdf70c4JmFfVxOe/kpnTq+DhXDl
      6LZ6py+E3751wbx9IXQTx57qwdoG/6Kv9fMETnA6oSgyBKF4zCjLMmRZNldLoLwpP0MfJx+M
      azEaxzmOg7PA5zKZrm433G73/A4iy2bO2e5OUAhGe+Dw2Bw2tlSjPuCCrGp6d5kR+xOCN3tH
      MB7Wawwf9I9if3cz2hrsiwoTQkxFBwOKSnFqYLyiJsDD+9bBwbMQeBaHtjeX9b05l9MJnrdW
      9FIUBfF4HIlEAoKgKyuUi+6saRrCc2Eoqlpwpc3U3NHUwqJfsiwjFouBZVkIggCHwwE+nQUy
      vGxLSVK7dGMWP3y1F2JKhcfJwyVwiCZSeOZrm7F38zx7MbNpgyFkSTExn0MDlLOoC2rKQqat
      rziWLalKgwGPk8PRe9aX/HWtgAOsZX0opXA6nZAkCalUCqIoQlEUBAKBZT83UEoRiUXnrYFI
      /kmXeY4pNnANEVyDzZopYrUcDjPnrt2EmNIPunFRRjzNT3+nbwT7Nq/SBxcFHryzHZF4CpNz
      CRzc1rIo9bTpuSSOvz+EiXS12oDP7cD+LdZWWVVTs/hKGmFQYoHvFYfl6ocxmNxud5bC83KH
      QJRSxJMJJJJxgBYmpQGYd1jPaC3MhWQyaSrBCYKAVCplFgGNglapJ8H6piB4joGsaLrzOscg
      KSno6dTbGY3dtMbP4tuPbIOmZRtg28Ef3hvEJ4MTAPTX2L2hEVU+Jw5sbUatxRRp9m9Llmwp
      W4mwXbbkOA4+n89MnS73BJBSEqLRSMEGiFzwuD0FwzNDFyiRSJgy5JkghIDNsdNolOLM5WnM
      JSTsWFePgMcBVaO4OhGBW+Dz0nIBoKu1Gt95ZAeGrs+iq60GTTUeJCUlJ0+dISTnaksp8J/P
      riMpqzi4tTmnzDkFMBub79BjCMGjd3egzmZtgCEMeI43axKVnh5fDIgoitSOl1c5OS+KoiA8
      G4asGJVZUjQ/bzSQL+xOy4QoiqbNkaIoWaJTxfCLv/XjfwN6I4zf7cCzR7rxu7fPY3JWz0zt
      6WzE8/d1L5u+5Xtnr+PXb54DAHx9VxueOLgh5+N6hybxmzfPQZJV7N/ajCcPbay4/t5KgO0d
      oFyrgKZpiMSiegyazq8XGvwcz5t+xK4CqhRGvSCRSNg+wIdjEk5dnO8FjiRS+PFfTkNR5xeF
      jwfGccf6evQsaMkrFTLtSQtZld7RUY/2VQFIsor6gOvLwZ8HK9+ClAOUUsTiMSiyXDDmp5SC
      43l4PV440mrRxUCILo1ohD92+m913RqSVYTLHPwGRqdj6LH8qvZwaHszbkaTEFMqHr3rVlkV
      AwTIS4abmtMNvOsCLpMC/kVFRU6ApCgWdREkRHdycTmt9SEYqVFZlou6veSD18Xjob3rcOLk
      ZWgaRVujH363A2eHp7Me195orUeWAqZ0R43faWkgCjyLp5dgUHF1IooXX/nY9Ea4d3cbHj+Q
      O4z6IqAiJ4AsF16VnU4nPGlpRiswtPtFUVxyI8WDe9vR09mImChjTb0PsaSMn57ow5XxCDiW
      4MDWFmy3oMspyip++fd+9KX9t7avq8e37tti2b5osXjv7Kg5+AHgg/7reOjOdrgWaZ5dLuRK
      UpQCFfmpmRyxOaUUDocDXo+3YHoz1/MkSVqSL20mCICGKrcpdVnlFXDsqT2YmktC4FgELXLw
      3+odQe/QpHm7d2gCbaf9eKBnbUmuMx8WZo1YpvL5X8A8+9eQmClV30VFfnKPyw1HOjNlqNIF
      /IG8ynT5YIjNLrfODkMIGoJuy4MfAC6Pzd5y3/CY9R5aQ2bdLg7vajUlyjmWwWN3d8zLkVcw
      GMKAZXQNK6s7vxVU5g7AMAj4/FDdKlRNA89xtlcpg8ZgUBwikUjJ+kg1SnExFMbEbALdbbWo
      8dvn3jfX+czwx7yv1mu5wHj8/UG80xfC0f0b8NUdLZbft8bnxPee2YvQVAxBr4DaRVz7SiDf
      75+QFPRdngLPMdjeXpeT+lEIFTkBgLRODsct6gIVRUEikYA33RcA6OnRQjLjdnDy/Dh+9cZn
      UDWKxmoPjj25Bz6XPUmTe3e1YSA0g0vX9Z2gY3UQh3e2pvteSdGax7XJKCRZRWjSeg3DgMCz
      WN9UWjGruXgKr/13GLMxCXd1NWHH+tL5E+SDRilefr0fZ4b1heTwzlY8cXCjJfq4gYqdAItF
      KpVCLBYzK72EEJPlWSr0XZ40u68mwnGMTsewyaYwlMfJ4dgTezAypdOw19T7AEqRTCkYHJ2F
      g2OwoTmY15Du2SNbcPbKNHZvKCC8XyZQCvzoT6dxLW2H9OmlSbxwdCc2ty5v30EsqWAgNGPe
      Pjs8haP3dNjaBT43E8CI9w2LU+OsoCgKYrFYkWfbQ2dLNU4PTUCjQJXXWZD+UAiE6OnP3//7
      Ii6GZlAfdCOWlBGa0lf1ns5VeO7+LTmLWFVeAQe6Vy/pc5QKMzERo1PzO5FGKfqvTi/7BPA4
      ObQ2+DGY9hfraK4CZ5M5y5kMy9scBksVmK/2EkKQSCRKLji1v7sJboHF+EwcuzY0wO/ibzEb
      dzgcpq9wIbzbF0I4kkR9wAVQCq+TM3eTSELETEREta+ypSa9Aoeu1uos37O1DX5LBuxLAQHw
      /P1bcPL8GBwci31dTaBUs8Ub+z9bjMqWCuixEAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Reviews' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
