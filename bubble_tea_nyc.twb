<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.0821.2225                               -->
<workbook original-version='18.1' source-build='2019.3.0 (20193.19.0821.2225)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ny_city_tea' inline='true' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_city_tea' name='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Wendigo/git/BubbleTeaVisualizations/data/nyc' filename='ny_city_tea.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_city_tea.json+]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[ny_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_city_tea.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='integer' name='categories.Index (generated)' />
            <column datatype='string' name='categories.Value.alias' />
            <column datatype='string' name='categories.Value.title' />
            <column datatype='real' name='coordinates.latitude' />
            <column datatype='real' name='coordinates.longitude' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='transactions.Index (generated)' />
            <column datatype='string' name='transactions.Value' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj' name='ny_city_tea.json' table='[ny_city_tea.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_city_tea.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_city_tea.json+].[Table Name]' />
          <map key='[alias (categories)]' value='[ny_city_tea.json+].[categories.Value.alias]' />
          <map key='[alias]' value='[ny_city_tea.json+].[alias]' />
          <map key='[categories Index (generated)]' value='[ny_city_tea.json+].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[ny_city_tea.json+].[display_phone]' />
          <map key='[distance]' value='[ny_city_tea.json+].[distance]' />
          <map key='[id]' value='[ny_city_tea.json+].[id]' />
          <map key='[image_url]' value='[ny_city_tea.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_city_tea.json+].[is_closed]' />
          <map key='[latitude]' value='[ny_city_tea.json+].[coordinates.latitude]' />
          <map key='[longitude]' value='[ny_city_tea.json+].[coordinates.longitude]' />
          <map key='[name]' value='[ny_city_tea.json+].[name]' />
          <map key='[phone]' value='[ny_city_tea.json+].[phone]' />
          <map key='[price]' value='[ny_city_tea.json+].[price]' />
          <map key='[rating]' value='[ny_city_tea.json+].[rating]' />
          <map key='[review_count]' value='[ny_city_tea.json+].[review_count]' />
          <map key='[title]' value='[ny_city_tea.json+].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[ny_city_tea.json+].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[ny_city_tea.json+].[transactions.Value]' />
          <map key='[url]' value='[ny_city_tea.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_city_tea.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_city_tea.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Ny City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.552276' measure-ordering='alphabetic' measure-percentage='0.447724' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:rating:ok]' palette='summer_10_0' type='palette'>
            <map to='#00a2b3'>
              <bucket>4.0</bucket>
            </map>
            <map to='#8fb202'>
              <bucket>2.0</bucket>
            </map>
            <map to='#97cfd0'>
              <bucket>4.5</bucket>
            </map>
            <map to='#b9ca5d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#cf3e53'>
              <bucket>3.0</bucket>
            </map>
            <map to='#f1788d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#f3a546'>
              <bucket>5.0</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='ny_places_with_reviews' inline='true' name='federated.1u4b5640oxsa2s11makhd0otyu9l' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_places_with_reviews' name='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Wendigo/git/BubbleTeaVisualizations/data/most_updated_data' filename='ny_places_with_reviews.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_places_with_reviews.json+]'>
                  <map key='categories' value='false' />
                  <map key='categories.Value' value='false' />
                  <map key='coordinates' value='false' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='reviews' value='true' />
                  <map key='reviews.Value' value='true' />
                  <map key='reviews.Value.user' value='false' />
                  <map key='transactions' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[reviews.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_places_with_reviews.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='reviews.Index (generated)' />
            <column datatype='string' name='reviews.Value.id' />
            <column datatype='real' name='reviews.Value.rating' />
            <column datatype='string' name='reviews.Value.text' />
            <column datatype='string' name='reviews.Value.time_created' />
            <column datatype='string' name='reviews.Value.url' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n' name='ny_places_with_reviews.json' table='[ny_places_with_reviews.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_places_with_reviews.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_places_with_reviews.json+].[Table Name]' />
          <map key='[alias]' value='[ny_places_with_reviews.json+].[alias]' />
          <map key='[display_phone]' value='[ny_places_with_reviews.json+].[display_phone]' />
          <map key='[distance]' value='[ny_places_with_reviews.json+].[distance]' />
          <map key='[id (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.id]' />
          <map key='[id]' value='[ny_places_with_reviews.json+].[id]' />
          <map key='[image_url]' value='[ny_places_with_reviews.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_places_with_reviews.json+].[is_closed]' />
          <map key='[name]' value='[ny_places_with_reviews.json+].[name]' />
          <map key='[phone]' value='[ny_places_with_reviews.json+].[phone]' />
          <map key='[price]' value='[ny_places_with_reviews.json+].[price]' />
          <map key='[rating (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.rating]' />
          <map key='[rating]' value='[ny_places_with_reviews.json+].[rating]' />
          <map key='[review_count]' value='[ny_places_with_reviews.json+].[review_count]' />
          <map key='[reviews Index (generated)]' value='[ny_places_with_reviews.json+].[reviews.Index (generated)]' />
          <map key='[text]' value='[ny_places_with_reviews.json+].[reviews.Value.text]' />
          <map key='[time_created]' value='[ny_places_with_reviews.json+].[reviews.Value.time_created]' />
          <map key='[url (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.url]' />
          <map key='[url]' value='[ny_places_with_reviews.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[reviews Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.text</remote-name>
            <remote-type>130</remote-type>
            <local-name>[text]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.text</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.time_created</remote-name>
            <remote-type>130</remote-type>
            <local-name>[time_created]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.time_created</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_places_with_reviews.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_places_with_reviews.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([reviews Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating (Reviews) per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[reviews Index (generated)] : MAX([rating (reviews)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id (Reviews)' datatype='string' name='[id (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating (Reviews)' datatype='real' name='[rating (reviews)]' role='measure' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[reviews Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Text' datatype='string' name='[text]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.text</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time Created' datatype='string' name='[time_created]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.time_created</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url (Reviews)' datatype='string' name='[url (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating (reviews)]' derivation='Avg' name='[avg:rating (reviews):ok]' pivot='key' type='ordinal' />
      <folder name='Ny Places With Reviews' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Reviews' role='dimensions'>
        <folder-item name='[id (reviews)]' type='field' />
        <folder-item name='[reviews Index (generated)]' type='field' />
        <folder-item name='[text]' type='field' />
        <folder-item name='[time_created]' type='field' />
        <folder-item name='[url (reviews)]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating (reviews)]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.538745' measure-ordering='alphabetic' measure-percentage='0.461255' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[avg:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8194352.8778034812' min='-8253994.1740365922' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4988340.6862074751' min='4952555.9070456494' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{64805FE1-FDDB-4F91-8F41-7B7060DA1F73}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Ratings'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8218614.2489090515' min='-8243908.6336284708' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4979713.1666128393' min='4968196.5675835321' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{15180E0B-8209-4E63-9CBE-D6DA149E45E4}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Reviews'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
            <datasource caption='ny_places_with_reviews' name='federated.1u4b5640oxsa2s11makhd0otyu9l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1u4b5640oxsa2s11makhd0otyu9l'>
            <column-instance column='[rating (reviews)]' derivation='Avg' name='[avg:rating (reviews):ok]' pivot='key' type='ordinal' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[review_count]' derivation='None' name='[none:review_count:qk]' pivot='key' type='quantitative' />
            <column caption='Rating (Reviews)' datatype='real' name='[rating (reviews)]' role='measure' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>reviews.Value.rating</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>review_count</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8202151.3528707596' min='-8254706.3085974604' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='4984743.2182622124' min='4960381.9605086045' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1u4b5640oxsa2s11makhd0otyu9l].[avg:rating (reviews):ok]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1u4b5640oxsa2s11makhd0otyu9l].[avg:rating (reviews):ok]' value='' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[avg:rating (reviews):ok]' />
              <size column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' />
              <lod column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Name:&#9;</run>
                <run bold='true' fontsize='12'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Longitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Review Count:&#9;</run>
                <run bold='true'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Avg Rating:&#9;</run>
                <run bold='true'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[avg:rating (reviews):ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='4.2849259376525879' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{979E6B02-A1A9-4FCC-88D4-C7578786D8F5}' />
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' name='Bubble Tea vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3F09A9D7-FCAA-4571-B27F-4B6759B6BB69}' />
    </window>
    <window class='worksheet' name='Bubble Tea vs Ratings'>
      <cards>
        <edge name='left'>
          <strip size='268'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8632FE1-CAF5-447B-9EF6-73C4059304B0}' />
    </window>
    <window class='worksheet' maximized='true' name='Bubble Tea vs Reviews'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1u4b5640oxsa2s11makhd0otyu9l].[avg:rating (reviews):ok]' type='color' />
            <card pane-specification-id='2' param='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating:qk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:text:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{567C2FCC-0299-4F54-BEAB-4FF0C5AC8A8C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea vs Price' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Ratings' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Reviews' width='192'>
      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
      4DruXKlmF/wfznqI6ap0KZcAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
