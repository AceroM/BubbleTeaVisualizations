<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='full_city_tea' inline='true' name='federated.01krj5n0tx1bh410v9i4q0kpho1p' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='full_city_tea' name='semistructpassivestore-direct.1pukcyo1llc2421c8217b1lpjhdl'>
            <connection class='semistructpassivestore-direct' directory='/Users/angelalim/Desktop/BubbleTeaVisualizations/data/nyc' filename='full_city_tea.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[full_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1pukcyo1llc2421c8217b1lpjhdl' name='full_city_tea.json' table='[full_city_tea.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[full_city_tea.json].[Document Index (generated)]' />
          <map key='[alias (categories)]' value='[full_city_tea.json].[categories.Value.alias]' />
          <map key='[alias]' value='[full_city_tea.json].[alias]' />
          <map key='[categories Index (generated)]' value='[full_city_tea.json].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[full_city_tea.json].[display_phone]' />
          <map key='[distance]' value='[full_city_tea.json].[distance]' />
          <map key='[id]' value='[full_city_tea.json].[id]' />
          <map key='[image_url]' value='[full_city_tea.json].[image_url]' />
          <map key='[is_closed]' value='[full_city_tea.json].[is_closed]' />
          <map key='[latitude]' value='[full_city_tea.json].[coordinates.latitude]' />
          <map key='[longitude]' value='[full_city_tea.json].[coordinates.longitude]' />
          <map key='[name]' value='[full_city_tea.json].[name]' />
          <map key='[phone]' value='[full_city_tea.json].[phone]' />
          <map key='[price]' value='[full_city_tea.json].[price]' />
          <map key='[rating]' value='[full_city_tea.json].[rating]' />
          <map key='[review_count]' value='[full_city_tea.json].[review_count]' />
          <map key='[title]' value='[full_city_tea.json].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[full_city_tea.json].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[full_city_tea.json].[transactions.Value]' />
          <map key='[url]' value='[full_city_tea.json].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>130</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[full_city_tea.json]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per full_city_tea.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at full_city_tea.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='string' name='[price]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Full City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.596154' measure-ordering='alphabetic' measure-percentage='0.403846' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea Places vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='full_city_tea' name='federated.01krj5n0tx1bh410v9i4q0kpho1p' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.01krj5n0tx1bh410v9i4q0kpho1p'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude per coordinates]' derivation='Avg' name='[avg:Latitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude per coordinates]' derivation='Avg' name='[avg:Longitude per coordinates:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='string' name='[price]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.01krj5n0tx1bh410v9i4q0kpho1p].[avg:Longitude per coordinates:qk]' field-type='quantitative' max='-8175034.6119467905' min='-8294143.4906567149' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.01krj5n0tx1bh410v9i4q0kpho1p].[avg:Latitude per coordinates:qk]' field-type='quantitative' max='5001427.3301094119' min='4921664.3137494484' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.01krj5n0tx1bh410v9i4q0kpho1p].[none:price:nk]' />
              <lod column='[federated.01krj5n0tx1bh410v9i4q0kpho1p].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.01krj5n0tx1bh410v9i4q0kpho1p].[avg:Latitude per coordinates:qk]</rows>
        <cols>[federated.01krj5n0tx1bh410v9i4q0kpho1p].[avg:Longitude per coordinates:qk]</cols>
      </table>
      <simple-id uuid='{1810D3D3-00D3-409F-BE71-1AC6154F6AEE}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='Bubble Tea Places vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.01krj5n0tx1bh410v9i4q0kpho1p].[none:price:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.01krj5n0tx1bh410v9i4q0kpho1p].[none:name:nk]</field>
            <field>[federated.01krj5n0tx1bh410v9i4q0kpho1p].[none:price:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='8' />
      </viewpoint>
      <simple-id uuid='{1C64A694-1177-494C-BAAC-FFEBD05C571C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea Places vs Price' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
