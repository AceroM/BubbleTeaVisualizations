<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ny_places_with_reviews' inline='true' name='federated.1u4b5640oxsa2s11makhd0otyu9l' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_places_with_reviews' name='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n'>
            <connection class='semistructpassivestore-direct' directory='/Users/angelalim/Desktop/BubbleTeaVisualizations/data/nyc' filename='ny_places_with_reviews.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_places_with_reviews.json+]'>
                  <map key='categories' value='false' />
                  <map key='categories.Value' value='false' />
                  <map key='coordinates' value='false' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='reviews' value='true' />
                  <map key='reviews.Value' value='true' />
                  <map key='reviews.Value.user' value='false' />
                  <map key='transactions' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[reviews.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_places_with_reviews.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='reviews.Index (generated)' />
            <column datatype='string' name='reviews.Value.id' />
            <column datatype='real' name='reviews.Value.rating' />
            <column datatype='string' name='reviews.Value.text' />
            <column datatype='string' name='reviews.Value.time_created' />
            <column datatype='string' name='reviews.Value.url' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n' name='ny_places_with_reviews.json' table='[ny_places_with_reviews.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_places_with_reviews.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_places_with_reviews.json+].[Table Name]' />
          <map key='[alias]' value='[ny_places_with_reviews.json+].[alias]' />
          <map key='[display_phone]' value='[ny_places_with_reviews.json+].[display_phone]' />
          <map key='[distance]' value='[ny_places_with_reviews.json+].[distance]' />
          <map key='[id (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.id]' />
          <map key='[id]' value='[ny_places_with_reviews.json+].[id]' />
          <map key='[image_url]' value='[ny_places_with_reviews.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_places_with_reviews.json+].[is_closed]' />
          <map key='[name]' value='[ny_places_with_reviews.json+].[name]' />
          <map key='[phone]' value='[ny_places_with_reviews.json+].[phone]' />
          <map key='[price]' value='[ny_places_with_reviews.json+].[price]' />
          <map key='[rating (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.rating]' />
          <map key='[rating]' value='[ny_places_with_reviews.json+].[rating]' />
          <map key='[review_count]' value='[ny_places_with_reviews.json+].[review_count]' />
          <map key='[reviews Index (generated)]' value='[ny_places_with_reviews.json+].[reviews.Index (generated)]' />
          <map key='[text]' value='[ny_places_with_reviews.json+].[reviews.Value.text]' />
          <map key='[time_created]' value='[ny_places_with_reviews.json+].[reviews.Value.time_created]' />
          <map key='[url (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.url]' />
          <map key='[url]' value='[ny_places_with_reviews.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[reviews Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.text</remote-name>
            <remote-type>130</remote-type>
            <local-name>[text]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.text</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.time_created</remote-name>
            <remote-type>130</remote-type>
            <local-name>[time_created]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.time_created</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_places_with_reviews.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_places_with_reviews.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([reviews Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating (Reviews) per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[reviews Index (generated)] : MAX([rating (reviews)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id (Reviews)' datatype='string' name='[id (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating (Reviews)' datatype='real' name='[rating (reviews)]' role='measure' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[reviews Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Text' datatype='string' name='[text]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.text</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time Created' datatype='string' name='[time_created]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.time_created</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url (Reviews)' datatype='string' name='[url (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating (reviews)]' derivation='Avg' name='[avg:rating (reviews):ok]' pivot='key' type='ordinal' />
      <column-instance column='[rating (reviews)]' derivation='None' name='[none:rating (reviews):ok]' pivot='key' type='ordinal' />
      <folder name='Ny Places With Reviews' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Reviews' role='dimensions'>
        <folder-item name='[id (reviews)]' type='field' />
        <folder-item name='[reviews Index (generated)]' type='field' />
        <folder-item name='[text]' type='field' />
        <folder-item name='[time_created]' type='field' />
        <folder-item name='[url (reviews)]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating (reviews)]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.603936' measure-ordering='alphabetic' measure-percentage='0.396064' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[avg:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#edc948'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='ny_city_tea' inline='true' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_city_tea' name='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj'>
            <connection class='semistructpassivestore-direct' directory='/Users/angelalim/Desktop/BubbleTeaVisualizations/data/nyc' filename='ny_city_tea.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_city_tea.json+]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[ny_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_city_tea.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='integer' name='categories.Index (generated)' />
            <column datatype='string' name='categories.Value.alias' />
            <column datatype='string' name='categories.Value.title' />
            <column datatype='real' name='coordinates.latitude' />
            <column datatype='real' name='coordinates.longitude' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='transactions.Index (generated)' />
            <column datatype='string' name='transactions.Value' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj' name='ny_city_tea.json' table='[ny_city_tea.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_city_tea.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_city_tea.json+].[Table Name]' />
          <map key='[alias (categories)]' value='[ny_city_tea.json+].[categories.Value.alias]' />
          <map key='[alias]' value='[ny_city_tea.json+].[alias]' />
          <map key='[categories Index (generated)]' value='[ny_city_tea.json+].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[ny_city_tea.json+].[display_phone]' />
          <map key='[distance]' value='[ny_city_tea.json+].[distance]' />
          <map key='[id]' value='[ny_city_tea.json+].[id]' />
          <map key='[image_url]' value='[ny_city_tea.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_city_tea.json+].[is_closed]' />
          <map key='[latitude]' value='[ny_city_tea.json+].[coordinates.latitude]' />
          <map key='[longitude]' value='[ny_city_tea.json+].[coordinates.longitude]' />
          <map key='[name]' value='[ny_city_tea.json+].[name]' />
          <map key='[phone]' value='[ny_city_tea.json+].[phone]' />
          <map key='[price]' value='[ny_city_tea.json+].[price]' />
          <map key='[rating]' value='[ny_city_tea.json+].[rating]' />
          <map key='[review_count]' value='[ny_city_tea.json+].[review_count]' />
          <map key='[title]' value='[ny_city_tea.json+].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[ny_city_tea.json+].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[ny_city_tea.json+].[transactions.Value]' />
          <map key='[url]' value='[ny_city_tea.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_city_tea.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_city_tea.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
      <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Name,Price)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:price:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Name,Rating)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:rating:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Name,Price)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:price:ok]' />
        </groupfilter>
      </group>
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Ny City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.580762' measure-ordering='alphabetic' measure-percentage='0.419238' rowDisplayCount='2000' show-aliased-fields='true' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:rating:ok]' palette='summer_10_0' type='palette'>
            <map to='#00a2b3'>
              <bucket>4.0</bucket>
            </map>
            <map to='#8fb202'>
              <bucket>2.0</bucket>
            </map>
            <map to='#97cfd0'>
              <bucket>4.5</bucket>
            </map>
            <map to='#b9ca5d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#cf3e53'>
              <bucket>3.0</bucket>
            </map>
            <map to='#f1788d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#f3a546'>
              <bucket>5.0</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:price:ok]' type='palette'>
            <map to='#59a14f'>
              <bucket>2.0</bucket>
            </map>
            <map to='#edc948'>
              <bucket>0.0</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>1.0</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='alphabetical-order' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Price)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:price:ok]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='41.869146999999998' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-87.663617000000002' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:name:nk]' member='&quot;Tbaar&quot;' />
                    <groupfilter function='member' level='[none:price:ok]' member='1.0' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Name,Price)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:price:ok]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:name:nk]' member='&quot;Moge Tee&quot;' />
                  <groupfilter function='member' level='[none:price:ok]' member='1.0' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:name:nk]' member='&quot;Vivi Bubble Tea&quot;' />
                  <groupfilter function='member' level='[none:price:ok]' member='0.0' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Name,Price)]</column>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Price)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8175442.6151892245' min='-8273601.5380931282' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='4999386.6125811217' min='4822971.9595926702' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='cell-w' value='60' />
            <format attr='cell-h' value='40' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{64805FE1-FDDB-4F91-8F41-7B7060DA1F73}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Ratings'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Rating)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:rating:ok]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='41.869146999999998' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-87.663617000000002' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:name:nk]' member='&quot;Tbaar&quot;' />
                    <groupfilter function='member' level='[none:rating:ok]' member='4.0' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8190145.0073846132' min='-8255199.6736402391' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='4992208.6240629451' min='4943370.6632387573' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{15180E0B-8209-4E63-9CBE-D6DA149E45E4}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Reviews'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
            <datasource caption='ny_places_with_reviews' name='federated.1u4b5640oxsa2s11makhd0otyu9l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1u4b5640oxsa2s11makhd0otyu9l'>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[review_count]' derivation='None' name='[none:review_count:qk]' pivot='key' type='quantitative' />
            <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>review_count</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8212752.2738065952' min='-8245917.777834855' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='4983738.2117675589' min='4958048.9428084381' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <size column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' />
              <lod column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Name:&#9;</run>
                <run bold='true' fontsize='12'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Longitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Review Count:&#9;</run>
                <run bold='true'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Avg Rating:&#9;</run>
                <run bold='true'>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='4.2849259376525879' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{979E6B02-A1A9-4FCC-88D4-C7578786D8F5}' />
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' maximized='true' name='Bubble Tea vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>41.869146999999998</value>
                <value>-87.663617000000002</value>
                <value>&quot;Tbaar&quot;</value>
                <value>1.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{3F09A9D7-FCAA-4571-B27F-4B6759B6BB69}' />
    </window>
    <window class='worksheet' name='Bubble Tea vs Ratings'>
      <cards>
        <edge name='left'>
          <strip size='268'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>41.869146999999998</value>
                <value>-87.663617000000002</value>
                <value>&quot;Tbaar&quot;</value>
                <value>4.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8632FE1-CAF5-447B-9EF6-73C4059304B0}' />
    </window>
    <window class='worksheet' name='Bubble Tea vs Reviews'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' type='size' />
            <card pane-specification-id='2' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating (reviews):ok]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating:qk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:text:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{567C2FCC-0299-4F54-BEAB-4FF0C5AC8A8C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea vs Price' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Ratings' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Reviews' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
