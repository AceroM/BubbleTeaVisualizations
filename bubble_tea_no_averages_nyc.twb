<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ny_places_with_reviews' inline='true' name='federated.1u4b5640oxsa2s11makhd0otyu9l' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_places_with_reviews' name='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Miguel/Desktop/DataVisualization/BubbleTeaVisualizations/data/nyc' filename='ny_places_with_reviews.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_places_with_reviews.json+]'>
                  <map key='categories' value='false' />
                  <map key='categories.Value' value='false' />
                  <map key='coordinates' value='false' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='reviews' value='true' />
                  <map key='reviews.Value' value='true' />
                  <map key='reviews.Value.user' value='false' />
                  <map key='transactions' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[reviews.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_places_with_reviews.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='reviews.Index (generated)' />
            <column datatype='string' name='reviews.Value.id' />
            <column datatype='real' name='reviews.Value.rating' />
            <column datatype='string' name='reviews.Value.text' />
            <column datatype='string' name='reviews.Value.time_created' />
            <column datatype='string' name='reviews.Value.url' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1w0ruu706a776m1c7hpja16wez5n' name='ny_places_with_reviews.json' table='[ny_places_with_reviews.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_places_with_reviews.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_places_with_reviews.json+].[Table Name]' />
          <map key='[alias]' value='[ny_places_with_reviews.json+].[alias]' />
          <map key='[display_phone]' value='[ny_places_with_reviews.json+].[display_phone]' />
          <map key='[distance]' value='[ny_places_with_reviews.json+].[distance]' />
          <map key='[id (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.id]' />
          <map key='[id]' value='[ny_places_with_reviews.json+].[id]' />
          <map key='[image_url]' value='[ny_places_with_reviews.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_places_with_reviews.json+].[is_closed]' />
          <map key='[name]' value='[ny_places_with_reviews.json+].[name]' />
          <map key='[phone]' value='[ny_places_with_reviews.json+].[phone]' />
          <map key='[price]' value='[ny_places_with_reviews.json+].[price]' />
          <map key='[rating (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.rating]' />
          <map key='[rating]' value='[ny_places_with_reviews.json+].[rating]' />
          <map key='[review_count]' value='[ny_places_with_reviews.json+].[review_count]' />
          <map key='[reviews Index (generated)]' value='[ny_places_with_reviews.json+].[reviews.Index (generated)]' />
          <map key='[text]' value='[ny_places_with_reviews.json+].[reviews.Value.text]' />
          <map key='[time_created]' value='[ny_places_with_reviews.json+].[reviews.Value.time_created]' />
          <map key='[url (reviews)]' value='[ny_places_with_reviews.json+].[reviews.Value.url]' />
          <map key='[url]' value='[ny_places_with_reviews.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[reviews Index (generated)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.text</remote-name>
            <remote-type>130</remote-type>
            <local-name>[text]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.text</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.time_created</remote-name>
            <remote-type>130</remote-type>
            <local-name>[time_created]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.time_created</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>reviews.Value.url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url (reviews)]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>reviews.Value.url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_places_with_reviews.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_places_with_reviews.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_places_with_reviews.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([reviews Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating (Reviews) per reviews]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[reviews Index (generated)] : MAX([rating (reviews)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reviews level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id (Reviews)' datatype='string' name='[id (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating (Reviews)' datatype='real' name='[rating (reviews)]' role='measure' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[reviews Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>reviews.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Text' datatype='string' name='[text]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.text</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time Created' datatype='string' name='[time_created]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.time_created</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url (Reviews)' datatype='string' name='[url (reviews)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>reviews.Value.url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[rating (reviews)]' derivation='Avg' name='[avg:rating (reviews):ok]' pivot='key' type='ordinal' />
      <column-instance column='[rating (reviews)]' derivation='None' name='[none:rating (reviews):ok]' pivot='key' type='ordinal' />
      <folder name='Ny Places With Reviews' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Reviews' role='dimensions'>
        <folder-item name='[id (reviews)]' type='field' />
        <folder-item name='[reviews Index (generated)]' type='field' />
        <folder-item name='[text]' type='field' />
        <folder-item name='[time_created]' type='field' />
        <folder-item name='[url (reviews)]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[rating (reviews)]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.603936' measure-ordering='alphabetic' measure-percentage='0.396064' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[avg:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating (reviews):ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1.3333333333333333</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1111111111111112</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.1666666666666665</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.25</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.3333333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.5833333333333335</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6111111111111112</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6666666666666665</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.6842105263157894</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.75</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.7777777777777777</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.8888888888888888</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.9305555555555554</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>1.6666666666666667</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.083333333333333</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.1111111111111107</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.166666666666667</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.2380952380952381</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.333333333333333</bucket>
            </map>
            <map to='#edc948'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2.3333333333333335</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.5555555555555554</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.666666666666667</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.75</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.6666666666666665</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2.8333333333333335</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='ny_city_tea' inline='true' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ny_city_tea' name='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Miguel/Desktop/DataVisualization/BubbleTeaVisualizations/data/nyc' filename='ny_city_tea.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[ny_city_tea.json+]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[ny_city_tea.json]'>
                  <map key='categories' value='true' />
                  <map key='categories.Value' value='true' />
                  <map key='coordinates' value='true' />
                  <map key='location' value='false' />
                  <map key='location.display_address' value='false' />
                  <map key='transactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='ny_city_tea.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='alias' />
            <column datatype='integer' name='categories.Index (generated)' />
            <column datatype='string' name='categories.Value.alias' />
            <column datatype='string' name='categories.Value.title' />
            <column datatype='real' name='coordinates.latitude' />
            <column datatype='real' name='coordinates.longitude' />
            <column datatype='string' name='display_phone' />
            <column datatype='real' name='distance' />
            <column datatype='string' name='id' />
            <column datatype='string' name='image_url' />
            <column datatype='boolean' name='is_closed' />
            <column datatype='string' name='name' />
            <column datatype='string' name='phone' />
            <column datatype='real' name='price' />
            <column datatype='real' name='rating' />
            <column datatype='real' name='review_count' />
            <column datatype='integer' name='transactions.Index (generated)' />
            <column datatype='string' name='transactions.Value' />
            <column datatype='string' name='url' />
          </columns>
          <relation connection='semistructpassivestore-direct.1axiebk03aflbs1c13r3w1uhpxrj' name='ny_city_tea.json' table='[ny_city_tea.json]' type='table' />
        </relation>
        <cols>
          <map key='[Document Index (generated)]' value='[ny_city_tea.json+].[Document Index (generated)]' />
          <map key='[Table Name]' value='[ny_city_tea.json+].[Table Name]' />
          <map key='[alias (categories)]' value='[ny_city_tea.json+].[categories.Value.alias]' />
          <map key='[alias]' value='[ny_city_tea.json+].[alias]' />
          <map key='[categories Index (generated)]' value='[ny_city_tea.json+].[categories.Index (generated)]' />
          <map key='[display_phone]' value='[ny_city_tea.json+].[display_phone]' />
          <map key='[distance]' value='[ny_city_tea.json+].[distance]' />
          <map key='[id]' value='[ny_city_tea.json+].[id]' />
          <map key='[image_url]' value='[ny_city_tea.json+].[image_url]' />
          <map key='[is_closed]' value='[ny_city_tea.json+].[is_closed]' />
          <map key='[latitude]' value='[ny_city_tea.json+].[coordinates.latitude]' />
          <map key='[longitude]' value='[ny_city_tea.json+].[coordinates.longitude]' />
          <map key='[name]' value='[ny_city_tea.json+].[name]' />
          <map key='[phone]' value='[ny_city_tea.json+].[phone]' />
          <map key='[price]' value='[ny_city_tea.json+].[price]' />
          <map key='[rating]' value='[ny_city_tea.json+].[rating]' />
          <map key='[review_count]' value='[ny_city_tea.json+].[review_count]' />
          <map key='[title]' value='[ny_city_tea.json+].[categories.Value.title]' />
          <map key='[transactions Index (generated)]' value='[ny_city_tea.json+].[transactions.Index (generated)]' />
          <map key='[transactions]' value='[ny_city_tea.json+].[transactions.Value]' />
          <map key='[url]' value='[ny_city_tea.json+].[url]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias (categories)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>price</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[ny_city_tea.json+]</parent-name>
            <remote-alias>url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude per coordinates]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per ny_city_tea.json+]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at ny_city_tea.json+ level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Price per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([price]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias (Categories)' datatype='string' name='[alias (categories)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>phone</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>price</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>url</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
      <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Name,Price)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:price:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Name,Rating)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:rating:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Name,Price)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:name:nk]' />
          <groupfilter function='level-members' level='[none:price:ok]' />
        </groupfilter>
      </group>
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias (categories)]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Ny City Tea' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[alias]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[latitude]' type='field' />
        <folder-item name='[longitude]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[review_count]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.609314' measure-ordering='alphabetic' measure-percentage='0.390686' rowDisplayCount='2000' show-aliased-fields='true' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:rating:ok]' palette='summer_10_0' type='palette'>
            <map to='#00a2b3'>
              <bucket>4.0</bucket>
            </map>
            <map to='#8fb202'>
              <bucket>2.0</bucket>
            </map>
            <map to='#97cfd0'>
              <bucket>4.5</bucket>
            </map>
            <map to='#b9ca5d'>
              <bucket>2.5</bucket>
            </map>
            <map to='#cf3e53'>
              <bucket>3.0</bucket>
            </map>
            <map to='#f1788d'>
              <bucket>3.5</bucket>
            </map>
            <map to='#f3a546'>
              <bucket>5.0</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='alphabetical-order' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubble Tea vs Price'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Price' datatype='real' name='[price]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>price</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Price)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:price:ok]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='41.869146999999998' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-87.663617000000002' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:name:nk]' member='&quot;Tbaar&quot;' />
                    <groupfilter function='member' level='[none:price:ok]' member='1.0' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Name,Price)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:price:ok]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:name:nk]' member='&quot;Moge Tee&quot;' />
                  <groupfilter function='member' level='[none:price:ok]' member='1.0' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:name:nk]' member='&quot;Vivi Bubble Tea&quot;' />
                  <groupfilter function='member' level='[none:price:ok]' member='0.0' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Name,Price)]</column>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Price)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8160518.9897000641' min='-8332286.4991681101' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='5036032.8622294283' min='4798902.4986191113' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='cell-w' value='60' />
            <format attr='cell-h' value='40' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
                <format attr='minheight' value='1560' />
                <format attr='maxheight' value='1560' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{64805FE1-FDDB-4F91-8F41-7B7060DA1F73}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Ratings'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Rating)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='level-members' level='[none:rating:ok]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='41.869146999999998' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-87.663617000000002' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:name:nk]' member='&quot;Tbaar&quot;' />
                    <groupfilter function='member' level='[none:rating:ok]' member='4.0' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[Exclusions (Latitude,Longitude,Name,Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8190145.0073846132' min='-8255199.6736402391' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='4992208.6240629451' min='4943370.6632387573' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <lod column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{15180E0B-8209-4E63-9CBE-D6DA149E45E4}' />
    </worksheet>
    <worksheet name='Bubble Tea vs Reviews'>
      <table>
        <view>
          <datasources>
            <datasource caption='ny_city_tea' name='federated.1ws3bop1n9p2s417nxgop0sr4h7z' />
            <datasource caption='ny_places_with_reviews' name='federated.1u4b5640oxsa2s11makhd0otyu9l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1u4b5640oxsa2s11makhd0otyu9l'>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[review_count]' derivation='None' name='[none:review_count:qk]' pivot='key' type='quantitative' />
            <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>review_count</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ws3bop1n9p2s417nxgop0sr4h7z'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='real' name='[rating]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]' field-type='quantitative' max='-8212752.2738065952' min='-8245917.777834855' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]' field-type='quantitative' max='4983738.2117675589' min='4958048.9428084381' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' />
              <size column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' />
              <lod column='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Name:&#9;</run>
                <run bold='true' fontsize='12'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Latitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Latitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Longitude per coordinates:&#9;</run>
                <run>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[avg:Longitude per coordinates:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Review Count:&#9;</run>
                <run bold='true'>&lt;[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Avg Rating:&#9;</run>
                <run bold='true'>&lt;[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='4.2849259376525879' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</rows>
        <cols>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{979E6B02-A1A9-4FCC-88D4-C7578786D8F5}' />
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' name='Bubble Tea vs Price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>41.869146999999998</value>
                <value>-87.663617000000002</value>
                <value>&quot;Tbaar&quot;</value>
                <value>1.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3F09A9D7-FCAA-4571-B27F-4B6759B6BB69}' />
    </window>
    <window class='worksheet' name='Bubble Tea vs Ratings'>
      <cards>
        <edge name='left'>
          <strip size='268'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
                  <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>41.869146999999998</value>
                <value>-87.663617000000002</value>
                <value>&quot;Tbaar&quot;</value>
                <value>4.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:price:ok]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8632FE1-CAF5-447B-9EF6-73C4059304B0}' />
    </window>
    <window class='worksheet' maximized='true' name='Bubble Tea vs Reviews'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:review_count:qk]' type='size' />
            <card pane-specification-id='2' param='[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:name:nk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating (reviews):ok]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:rating:qk]</field>
            <field>[federated.1u4b5640oxsa2s11makhd0otyu9l].[none:text:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:latitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:longitude:qk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:name:nk]</field>
            <field>[federated.1ws3bop1n9p2s417nxgop0sr4h7z].[none:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{567C2FCC-0299-4F54-BEAB-4FF0C5AC8A8C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bubble Tea vs Price' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Ratings' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bubble Tea vs Reviews' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
