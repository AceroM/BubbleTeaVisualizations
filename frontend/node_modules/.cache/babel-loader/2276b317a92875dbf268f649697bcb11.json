{"ast":null,"code":"var _jsxFileName = \"/Users/miguel/DataVisualization/BubbleTeaVisualizations/frontend/src/components/LocationSearchInput.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport '../pages/Homepage/Homepage.scss';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n        this.setState({\n          isRedirect: true,\n          lat: latLng.lat,\n          lng: latLng.lng\n        });\n      }).catch(error => {\n        console.error('Error', error);\n        this.setState({\n          isRedirect: true\n        });\n      });\n    };\n\n    this.state = {\n      address: '',\n      isRedirect: false,\n      lat: '',\n      lng: ''\n    };\n  }\n\n  render() {\n    const isRedirect = this.state.isRedirect;\n\n    if (isRedirect) {\n      const _this$state = this.state,\n            lat = _this$state.lat,\n            lng = _this$state.lng;\n      const str = \"/map?lat=\".concat(lat, \"&lng=\").concat(lng);\n      return React.createElement(Redirect, {\n        to: str,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({\n      className: \"input-group-field\",\n      placeholder: \"Enter your location\",\n      name: \"location\"\n    }, getInputProps({\n      className: 'input-group-field',\n      name: 'location',\n      placeholder: 'Search Places ...',\n      className: 'location-search-input input-group-field'\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#ffffff',\n        cursor: 'pointer'\n      };\n      return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, suggestion.description));\n    }))));\n  }\n\n}\n\nexport default LocationSearchInput;","map":{"version":3,"sources":["/Users/miguel/DataVisualization/BubbleTeaVisualizations/frontend/src/components/LocationSearchInput.js"],"names":["React","Redirect","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationSearchInput","Component","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","isRedirect","lat","lng","catch","error","console","state","render","str","getInputProps","suggestions","getSuggestionItemProps","loading","className","name","placeholder","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete'\nimport '../pages/Homepage/Homepage.scss'\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { address: '', isRedirect: false, lat: '', lng: '' }\n  }\n\n  handleChange = address => {\n    this.setState({ address })\n  }\n\n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        this.setState({\n          isRedirect: true,\n          lat: latLng.lat,\n          lng: latLng.lng,\n        })\n      })\n      .catch(error => {\n        console.error('Error', error);\n        this.setState({isRedirect: true})\n      })\n  }\n\n  render() {\n    const { isRedirect } = this.state\n    if (isRedirect) {\n      const { lat, lng } = this.state\n      const str = `/map?lat=${lat}&lng=${lng}`\n      return <Redirect to={str} />\n    }\n\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              className=\"input-group-field\"\n              placeholder=\"Enter your location\"\n              name=\"location\"\n              {...getInputProps({\n                className: 'input-group-field',\n                name: 'location',\n                placeholder: 'Search Places ...',\n                className: 'location-search-input input-group-field',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item'\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' }\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    )\n  }\n}\n\nexport default LocationSearchInput\n"]},"metadata":{},"sourceType":"module"}