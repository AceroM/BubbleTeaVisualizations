{"ast":null,"code":"import * as d3 from \"d3\";\nexport default function bubbleChart(title) {\n  var width = 960,\n      height = 960,\n      marginTop = 96,\n      minRadius = 6,\n      maxRadius = 20,\n      columnForColors = \"category\",\n      columnForTitle = \"title\",\n      columnForRadius = \"views\",\n      forceApart = -50,\n      unitName = \"hearts\",\n      customColors = false,\n      customRange,\n      customDomain,\n      chartSelection,\n      chartSVG,\n      showTitleOnCircle = false;\n  /**\n   * The command to actually render the chart after setting the settings.\n   * @public\n   * @param {string} selection - The div ID that you want to render in\n   */\n\n  function chart(selection) {\n    var data = selection.datum();\n    chartSelection = selection;\n    var div = selection,\n        svg = div.selectAll(\"svg\");\n    svg.attr(\"width\", width).attr(\"height\", height);\n    chartSVG = svg;\n    var tooltip = selection.append(\"div\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"color\", \"white\").style(\"padding\", \"8px\").style(\"background-color\", \"#626D71\").style(\"border-radius\", \"6px\").style(\"text-align\", \"center\").style(\"font-family\", \"monospace\").style(\"width\", \"400px\").text(\"\");\n    var simulation = d3.forceSimulation(data).force(\"charge\", d3.forceManyBody().strength([forceApart])).force(\"x\", d3.forceX()).force(\"y\", d3.forceY()).on(\"tick\", ticked);\n\n    function ticked(e) {\n      node.attr(\"transform\", function (d) {\n        return \"translate(\" + [d.x + width / 2, d.y + (height + marginTop) / 2] + \")\";\n      });\n    }\n\n    var colorCircles;\n\n    if (!customColors) {\n      colorCircles = d3.scaleOrdinal(d3.schemeCategory10);\n    } else {\n      colorCircles = d3.scaleOrdinal().domain(customDomain).range(customRange);\n    }\n\n    var minRadiusDomain = d3.min(data, function (d) {\n      return +d[columnForRadius];\n    });\n    var maxRadiusDomain = d3.max(data, function (d) {\n      return +d[columnForRadius];\n    });\n    var scaleRadius = d3.scaleLinear().domain([minRadiusDomain, maxRadiusDomain]).range([minRadius, maxRadius]);\n    var node = svg.selectAll(\"circle\").data(data).enter().append(\"g\").attr(\"transform\", \"translate(\" + [width / 2, height / 2] + \")\").style(\"opacity\", 1);\n    node.append(\"circle\").attr(\"id\", function (d, i) {\n      return i;\n    }).attr(\"r\", function (d) {\n      return scaleRadius(d[columnForRadius]);\n    }).style(\"fill\", function (d) {\n      return colorCircles(d[columnForColors]);\n    }).on(\"mouseover\", function (d) {\n      tooltip.html(d[columnForTitle] + \"<br/>\" + d[columnForColors] + \"<br/>\" + d[columnForRadius] + \" \" + unitName);\n      return tooltip.style(\"visibility\", \"visible\");\n    }).on(\"mousemove\", function () {\n      return tooltip.style(\"top\", d3.event.pageY - 10 + \"px\").style(\"left\", d3.event.pageX + 10 + \"px\");\n    }).on(\"mouseout\", function () {\n      return tooltip.style(\"visibility\", \"hidden\");\n    });\n    node.append(\"clipPath\").attr(\"id\", function (d, i) {\n      return \"clip-\" + i;\n    }).append(\"use\").attr(\"xlink:href\", function (d, i) {\n      return \"#\" + i;\n    });\n\n    if (showTitleOnCircle) {\n      node.append(\"text\").attr(\"clip-path\", function (d, i) {\n        return \"url(#clip-\" + i + \")\";\n      }).attr(\"text-anchor\", \"middle\").append(\"tspan\").attr(\"x\", function (d) {\n        return 0; //-1*scaleRadius(d[columnForRadius])/3;\n      }).attr(\"y\", function (d) {\n        return \".3em\"; //scaleRadius(d[columnForRadius])/4;\n      }).text(function (d) {\n        return d[columnForTitle];\n      }).on(\"mouseover\", function (d) {\n        tooltip.html(d[columnForTitle] + \"<br/>\" + d[columnForColors] + \"<br/>\" + d[columnForRadius] + \" \" + unitName);\n        return tooltip.style(\"visibility\", \"visible\");\n      }).on(\"mousemove\", function () {\n        return tooltip.style(\"top\", d3.event.pageY - 10 + \"px\").style(\"left\", d3.event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", function () {\n        return tooltip.style(\"visibility\", \"hidden\");\n      });\n    }\n\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", marginTop).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"1.8em\").text(title);\n  }\n\n  chart.width = chartWidth;\n  chart.height = chartHeight;\n  chart.columnForColors = chartColForColors;\n  chart.columnForRadius = chartColForRadius;\n  chart.columnForTitle = chartColForTitle;\n  chart.minRadius = chartMinRadius;\n  chart.maxRadius = chartMaxRadius;\n  chart.forceApart = chartForceApart;\n  chart.unitName = chartUnitName;\n  chart.customColors = chartCustomColors;\n  chart.showTitleOnCircle = chartShowTitleOnCircle;\n  chart.title = chartTitle;\n  chart.remove = chartRemove;\n  /**\n   * Get/set the height of the chart\n   * Use 'chart.width' to get or set.\n   * @example\n   * chart.columnForColors(960);\t// Sets the width of the SVG to 960\n   * chart.columnForColors();\t// returns 960\n   *\n   * @public\n   * @param {number} [value] - The width of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n  function chartWidth(value) {\n    if (!arguments.length) {\n      return width;\n    }\n\n    width = value;\n    return chart;\n  }\n  /**\n   * Get/set the height of the chart.\n   * Use 'chart.height' to get or set.\n   * @example\n   * chart.height(960);\t// Sets the height of the SVG to 960\n   * chart.height();\t\t// returns 960\n   *\n   * @public\n   * @param {number} [value] - The height of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartHeight(value) {\n    if (!arguments.length) {\n      return height;\n    }\n\n    height = value;\n    marginTop = 0.05 * height;\n    return chart;\n  }\n  /**\n   * Get/set the property used to determine the colors of the bubbles.\n   * Use 'chart.columnForColors' to get or set.\n   * @example\n   * chart.columnForColors(\"Sex\");\t// Sets the column to birthCount\n   * chart.columnForColors();\t// returns \"Sex\"\n   * @public\n   * @param {string} [value] - Property name to bind the bubble color to.\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartColForColors(value) {\n    if (!arguments.length) {\n      return columnForColors;\n    }\n\n    columnForColors = value;\n    return chart;\n  }\n  /**\n   * Get/set the property to determine the titles of the bubbles.\n   * Use 'chart.columnForTitle' to get or set.\n   * @example\n   * chart.columnForTitle(\"Name\");\t// Sets the column to birthCount\n   * chart.columnForTitle();\t\t// returns \"Name\"\n   *\n   * @param {string} [value] - Property name to bind the bubble title to.\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartColForTitle(value) {\n    if (!arguments.length) {\n      return columnForTitle;\n    }\n\n    columnForTitle = value;\n    return chart;\n  }\n  /**\n   * Get/set the property to determine the radii of the bubbles.\n   * Use 'chart.columnForRadius' to get or set.\n   *\n   * @example\n   * chart.columnForRadius(\"birthCount\");\t// Sets the column to birthCount\n   * chart.columnForRadius();\t\t// returns \"birthCount\"\n   * @public\n   * @param {string} [value] - Property name to bind the bubble radius to. Requires a numerical property.\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartColForRadius(value) {\n    if (!arguments.length) {\n      return columnForRadius;\n    }\n\n    columnForRadius = value;\n    return chart;\n  }\n  /**\n   * Get/set the minimum radius of the bubbles.\n   * Use 'chart.minRadius' to get or set.\n   * @example\n   * \tchart.columnForColors(3); \t// Sets the column to birthCount\n   *  chart.columnForColors();\t// returns 3\n   *\n   * @param {number} [value] - The minimum radius for the width of the bubbles\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartMinRadius(value) {\n    if (!arguments.length) {\n      return minRadius;\n    }\n\n    minRadius = value;\n    return chart;\n  }\n  /**\n   * Get/set the maximum radius of the bubbles.\n   * Use 'chart.maxRadius' to get or set.\n   *\n   * @public\n   * @param {number} [value] - The maximum radius of the bubbles for the largest value in the dataset\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartMaxRadius(value) {\n    if (!arguments.length) {\n      return maxRadius;\n    }\n\n    maxRadius = value;\n    return chart;\n  }\n  /**\n   * Get/set the unit name for the property the is represented by the radius of the bubbles.\n   * Used in the tooltip of the bubbles.\n   * Use 'chart.unitName' to get or set.\n   * @example\n   * chart.unitName(\" babies\");\t// Sets the column to birthCount\n   * chart.unitName();\t\t// returns \" babies\"\n   *\n   * @public\n   * @param {any} [value] - The unit name to display on the tooltip when hovering over a bubble\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartUnitName(value) {\n    if (!arguments.length) {\n      return unitName;\n    }\n\n    unitName = value;\n    return chart;\n  }\n  /**\n   * Get/set the force the separates and pushes together the bubbles on loading of the chart\n   * Use 'chart.forceApart' to get or set.\n   * @example\n   * chart.forceApart(150);\t// Sets the column to birthCount\n   * chart.forceApart();\t// returns 150\n   *\n   * @public\n   * @param {any} [value] - Determines the force to separate the bubbles from each other when loading the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartForceApart(value) {\n    if (!arguments.length) {\n      return forceApart;\n    }\n\n    forceApart = value;\n    return chart;\n  }\n  /**\n   * Get/set the property that determines if we show or hide the title of the data on the bubbles.\n   * Use 'chart.showTitleOnCircle' to get or set.\n   * @example\n   * chart.showTitleOnCircle(true);\n   * chart.forceApart();\t// returns true\n   *\n   * @public\n   * @param {boolean} [value] - Determines whether to show or hide the title of the data on the bubbles\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartShowTitleOnCircle(value) {\n    if (!arguments.length) {\n      return showTitleOnCircle;\n    }\n\n    showTitleOnCircle = value;\n    return chart;\n  }\n  /**\n   * Set the domain and range of the colors used for the bubbles. This is only needed if you want to use custom colors in the chart.\n   * Use 'chart.customColors' to set.\n   * @example\n   * chart.customColors([\"M\",\"F\"], [\"#70b7f0\",\"#e76486\"]); \t// Sets the custom colors domain and range\n   *\n   * @param {any[]} domain - The domain. This is the set of categories used for binding the colors.\n   * @param {string[]} range - The range. This is an array of color codes that you want to represent each category in the domain.\n   * \t\t\t\t\t\t\t Note: The length of the array must perfectly match the length of the domain array.\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartCustomColors(domain, range) {\n    customColors = true;\n    customDomain = domain;\n    customRange = range;\n    return chart;\n  }\n  /**\n   * Get/set the property that determines the title of the chart.\n   * Use 'chart.title' to get or set.\n   * @example\n   * chart.title(\"Birth Count in the U.S. in 2016\"); // Sets the chart title\n   * chart.title();\t// returns \"Birth Count in the U.S. in 2016\"\n   * @public\n   * @param {string} value - The title of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartTitle(value) {\n    if (!arguments.length) {\n      return title;\n    }\n\n    title = value;\n    return chart;\n  }\n  /**\n   * Animate the removal of data from the chart (and the title)\n   * @public\n   * @param {function} [callback] - At the end of each node animation call this function for each node\n   * @returns function - Chart, allowing chaining of commands\n   */\n\n\n  function chartRemove(callback) {\n    chartSVG.selectAll(\"text\").style(\"opacity\", 1).transition().duration(500).style(\"opacity\", \"0\").remove();\n\n    if (!arguments.length) {\n      chartSVG.selectAll(\"g\").style(\"opacity\", 1).transition().duration(500).style(\"opacity\", \"0\").remove();\n    } else {\n      chartSVG.selectAll(\"g\").style(\"opacity\", 1).duration(500).style(\"opacity\", \"0\").remove().on(\"end\", callback);\n    }\n\n    return chart;\n  }\n\n  return chart;\n}","map":{"version":3,"sources":["/Users/miguel/DataVisualization/BubbleTeaVisualizations/src/components/BubbleTea/bubbleChart.js"],"names":["d3","bubbleChart","title","width","height","marginTop","minRadius","maxRadius","columnForColors","columnForTitle","columnForRadius","forceApart","unitName","customColors","customRange","customDomain","chartSelection","chartSVG","showTitleOnCircle","chart","selection","data","datum","div","svg","selectAll","attr","tooltip","append","style","text","simulation","forceSimulation","force","forceManyBody","strength","forceX","forceY","on","ticked","e","node","d","x","y","colorCircles","scaleOrdinal","schemeCategory10","domain","range","minRadiusDomain","min","maxRadiusDomain","max","scaleRadius","scaleLinear","enter","i","html","event","pageY","pageX","chartWidth","chartHeight","chartColForColors","chartColForRadius","chartColForTitle","chartMinRadius","chartMaxRadius","chartForceApart","chartUnitName","chartCustomColors","chartShowTitleOnCircle","chartTitle","remove","chartRemove","value","arguments","length","callback","transition","duration"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACzC,MAAIC,KAAK,GAAG,GAAZ;AAAA,MACEC,MAAM,GAAG,GADX;AAAA,MAEEC,SAAS,GAAG,EAFd;AAAA,MAGEC,SAAS,GAAG,CAHd;AAAA,MAIEC,SAAS,GAAG,EAJd;AAAA,MAKEC,eAAe,GAAG,UALpB;AAAA,MAMEC,cAAc,GAAG,OANnB;AAAA,MAOEC,eAAe,GAAG,OAPpB;AAAA,MAQEC,UAAU,GAAG,CAAC,EARhB;AAAA,MASEC,QAAQ,GAAG,QATb;AAAA,MAUEC,YAAY,GAAG,KAVjB;AAAA,MAWEC,WAXF;AAAA,MAYEC,YAZF;AAAA,MAaEC,cAbF;AAAA,MAcEC,QAdF;AAAA,MAeEC,iBAAiB,GAAG,KAftB;AAiBA;;;;;;AAKA,WAASC,KAAT,CAAeC,SAAf,EAA0B;AACxB,QAAIC,IAAI,GAAGD,SAAS,CAACE,KAAV,EAAX;AACAN,IAAAA,cAAc,GAAGI,SAAjB;AACA,QAAIG,GAAG,GAAGH,SAAV;AAAA,QACEI,GAAG,GAAGD,GAAG,CAACE,SAAJ,CAAc,KAAd,CADR;AAEAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,OAAT,EAAkBvB,KAAlB,EAAyBuB,IAAzB,CAA8B,QAA9B,EAAwCtB,MAAxC;AACAa,IAAAA,QAAQ,GAAGO,GAAX;AAEA,QAAIG,OAAO,GAAGP,SAAS,CACpBQ,MADW,CACJ,KADI,EAEXC,KAFW,CAEL,UAFK,EAEO,UAFP,EAGXA,KAHW,CAGL,YAHK,EAGS,QAHT,EAIXA,KAJW,CAIL,OAJK,EAII,OAJJ,EAKXA,KALW,CAKL,SALK,EAKM,KALN,EAMXA,KANW,CAML,kBANK,EAMe,SANf,EAOXA,KAPW,CAOL,eAPK,EAOY,KAPZ,EAQXA,KARW,CAQL,YARK,EAQS,QART,EASXA,KATW,CASL,aATK,EASU,WATV,EAUXA,KAVW,CAUL,OAVK,EAUI,OAVJ,EAWXC,IAXW,CAWN,EAXM,CAAd;AAaA,QAAIC,UAAU,GAAG/B,EAAE,CAChBgC,eADc,CACEX,IADF,EAEdY,KAFc,CAER,QAFQ,EAEEjC,EAAE,CAACkC,aAAH,GAAmBC,QAAnB,CAA4B,CAACxB,UAAD,CAA5B,CAFF,EAGdsB,KAHc,CAGR,GAHQ,EAGHjC,EAAE,CAACoC,MAAH,EAHG,EAIdH,KAJc,CAIR,GAJQ,EAIHjC,EAAE,CAACqC,MAAH,EAJG,EAKdC,EALc,CAKX,MALW,EAKHC,MALG,CAAjB;;AAOA,aAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACjBC,MAAAA,IAAI,CAACf,IAAL,CAAU,WAAV,EAAuB,UAASgB,CAAT,EAAY;AACjC,eACE,eAAe,CAACA,CAAC,CAACC,CAAF,GAAMxC,KAAK,GAAG,CAAf,EAAkBuC,CAAC,CAACE,CAAF,GAAM,CAACxC,MAAM,GAAGC,SAAV,IAAuB,CAA/C,CAAf,GAAmE,GADrE;AAGD,OAJD;AAKD;;AAED,QAAIwC,YAAJ;;AACA,QAAI,CAAChC,YAAL,EAAmB;AACjBgC,MAAAA,YAAY,GAAG7C,EAAE,CAAC8C,YAAH,CAAgB9C,EAAE,CAAC+C,gBAAnB,CAAf;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,GAAG7C,EAAE,CACd8C,YADY,GAEZE,MAFY,CAELjC,YAFK,EAGZkC,KAHY,CAGNnC,WAHM,CAAf;AAID;;AAED,QAAIoC,eAAe,GAAGlD,EAAE,CAACmD,GAAH,CAAO9B,IAAP,EAAa,UAASqB,CAAT,EAAY;AAC7C,aAAO,CAACA,CAAC,CAAChC,eAAD,CAAT;AACD,KAFqB,CAAtB;AAGA,QAAI0C,eAAe,GAAGpD,EAAE,CAACqD,GAAH,CAAOhC,IAAP,EAAa,UAASqB,CAAT,EAAY;AAC7C,aAAO,CAACA,CAAC,CAAChC,eAAD,CAAT;AACD,KAFqB,CAAtB;AAGA,QAAI4C,WAAW,GAAGtD,EAAE,CACjBuD,WADe,GAEfP,MAFe,CAER,CAACE,eAAD,EAAkBE,eAAlB,CAFQ,EAGfH,KAHe,CAGT,CAAC3C,SAAD,EAAYC,SAAZ,CAHS,CAAlB;AAKA,QAAIkC,IAAI,GAAGjB,GAAG,CACXC,SADQ,CACE,QADF,EAERJ,IAFQ,CAEHA,IAFG,EAGRmC,KAHQ,GAIR5B,MAJQ,CAID,GAJC,EAKRF,IALQ,CAKH,WALG,EAKU,eAAe,CAACvB,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAAf,GAAyC,GALnD,EAMRyB,KANQ,CAMF,SANE,EAMS,CANT,CAAX;AAQAY,IAAAA,IAAI,CACDb,MADH,CACU,QADV,EAEGF,IAFH,CAEQ,IAFR,EAEc,UAASgB,CAAT,EAAYe,CAAZ,EAAe;AACzB,aAAOA,CAAP;AACD,KAJH,EAKG/B,IALH,CAKQ,GALR,EAKa,UAASgB,CAAT,EAAY;AACrB,aAAOY,WAAW,CAACZ,CAAC,CAAChC,eAAD,CAAF,CAAlB;AACD,KAPH,EAQGmB,KARH,CAQS,MART,EAQiB,UAASa,CAAT,EAAY;AACzB,aAAOG,YAAY,CAACH,CAAC,CAAClC,eAAD,CAAF,CAAnB;AACD,KAVH,EAWG8B,EAXH,CAWM,WAXN,EAWmB,UAASI,CAAT,EAAY;AAC3Bf,MAAAA,OAAO,CAAC+B,IAAR,CACEhB,CAAC,CAACjC,cAAD,CAAD,GACE,OADF,GAEEiC,CAAC,CAAClC,eAAD,CAFH,GAGE,OAHF,GAIEkC,CAAC,CAAChC,eAAD,CAJH,GAKE,GALF,GAMEE,QAPJ;AASA,aAAOe,OAAO,CAACE,KAAR,CAAc,YAAd,EAA4B,SAA5B,CAAP;AACD,KAtBH,EAuBGS,EAvBH,CAuBM,WAvBN,EAuBmB,YAAW;AAC1B,aAAOX,OAAO,CACXE,KADI,CACE,KADF,EACS7B,EAAE,CAAC2D,KAAH,CAASC,KAAT,GAAiB,EAAjB,GAAsB,IAD/B,EAEJ/B,KAFI,CAEE,MAFF,EAEU7B,EAAE,CAAC2D,KAAH,CAASE,KAAT,GAAiB,EAAjB,GAAsB,IAFhC,CAAP;AAGD,KA3BH,EA4BGvB,EA5BH,CA4BM,UA5BN,EA4BkB,YAAW;AACzB,aAAOX,OAAO,CAACE,KAAR,CAAc,YAAd,EAA4B,QAA5B,CAAP;AACD,KA9BH;AA+BAY,IAAAA,IAAI,CACDb,MADH,CACU,UADV,EAEGF,IAFH,CAEQ,IAFR,EAEc,UAASgB,CAAT,EAAYe,CAAZ,EAAe;AACzB,aAAO,UAAUA,CAAjB;AACD,KAJH,EAKG7B,MALH,CAKU,KALV,EAMGF,IANH,CAMQ,YANR,EAMsB,UAASgB,CAAT,EAAYe,CAAZ,EAAe;AACjC,aAAO,MAAMA,CAAb;AACD,KARH;;AASA,QAAIvC,iBAAJ,EAAuB;AACrBuB,MAAAA,IAAI,CACDb,MADH,CACU,MADV,EAEGF,IAFH,CAEQ,WAFR,EAEqB,UAASgB,CAAT,EAAYe,CAAZ,EAAe;AAChC,eAAO,eAAeA,CAAf,GAAmB,GAA1B;AACD,OAJH,EAKG/B,IALH,CAKQ,aALR,EAKuB,QALvB,EAMGE,MANH,CAMU,OANV,EAOGF,IAPH,CAOQ,GAPR,EAOa,UAASgB,CAAT,EAAY;AACrB,eAAO,CAAP,CADqB,CACX;AACX,OATH,EAUGhB,IAVH,CAUQ,GAVR,EAUa,UAASgB,CAAT,EAAY;AACrB,eAAO,MAAP,CADqB,CACN;AAChB,OAZH,EAaGZ,IAbH,CAaQ,UAASY,CAAT,EAAY;AAChB,eAAOA,CAAC,CAACjC,cAAD,CAAR;AACD,OAfH,EAgBG6B,EAhBH,CAgBM,WAhBN,EAgBmB,UAASI,CAAT,EAAY;AAC3Bf,QAAAA,OAAO,CAAC+B,IAAR,CACEhB,CAAC,CAACjC,cAAD,CAAD,GACE,OADF,GAEEiC,CAAC,CAAClC,eAAD,CAFH,GAGE,OAHF,GAIEkC,CAAC,CAAChC,eAAD,CAJH,GAKE,GALF,GAMEE,QAPJ;AASA,eAAOe,OAAO,CAACE,KAAR,CAAc,YAAd,EAA4B,SAA5B,CAAP;AACD,OA3BH,EA4BGS,EA5BH,CA4BM,WA5BN,EA4BmB,YAAW;AAC1B,eAAOX,OAAO,CACXE,KADI,CACE,KADF,EACS7B,EAAE,CAAC2D,KAAH,CAASC,KAAT,GAAiB,EAAjB,GAAsB,IAD/B,EAEJ/B,KAFI,CAEE,MAFF,EAEU7B,EAAE,CAAC2D,KAAH,CAASE,KAAT,GAAiB,EAAjB,GAAsB,IAFhC,CAAP;AAGD,OAhCH,EAiCGvB,EAjCH,CAiCM,UAjCN,EAiCkB,YAAW;AACzB,eAAOX,OAAO,CAACE,KAAR,CAAc,YAAd,EAA4B,QAA5B,CAAP;AACD,OAnCH;AAoCD;;AAEDL,IAAAA,GAAG,CACAI,MADH,CACU,MADV,EAEGF,IAFH,CAEQ,GAFR,EAEavB,KAAK,GAAG,CAFrB,EAGGuB,IAHH,CAGQ,GAHR,EAGarB,SAHb,EAIGqB,IAJH,CAIQ,aAJR,EAIuB,QAJvB,EAKGA,IALH,CAKQ,WALR,EAKqB,OALrB,EAMGI,IANH,CAMQ5B,KANR;AAOD;;AAEDiB,EAAAA,KAAK,CAAChB,KAAN,GAAc2D,UAAd;AACA3C,EAAAA,KAAK,CAACf,MAAN,GAAe2D,WAAf;AACA5C,EAAAA,KAAK,CAACX,eAAN,GAAwBwD,iBAAxB;AACA7C,EAAAA,KAAK,CAACT,eAAN,GAAwBuD,iBAAxB;AACA9C,EAAAA,KAAK,CAACV,cAAN,GAAuByD,gBAAvB;AACA/C,EAAAA,KAAK,CAACb,SAAN,GAAkB6D,cAAlB;AACAhD,EAAAA,KAAK,CAACZ,SAAN,GAAkB6D,cAAlB;AACAjD,EAAAA,KAAK,CAACR,UAAN,GAAmB0D,eAAnB;AACAlD,EAAAA,KAAK,CAACP,QAAN,GAAiB0D,aAAjB;AACAnD,EAAAA,KAAK,CAACN,YAAN,GAAqB0D,iBAArB;AACApD,EAAAA,KAAK,CAACD,iBAAN,GAA0BsD,sBAA1B;AACArD,EAAAA,KAAK,CAACjB,KAAN,GAAcuE,UAAd;AACAtD,EAAAA,KAAK,CAACuD,MAAN,GAAeC,WAAf;AAEA;;;;;;;;;;;;AAWA,WAASb,UAAT,CAAoBc,KAApB,EAA2B;AACzB,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAO3E,KAAP;AACD;;AACDA,IAAAA,KAAK,GAAGyE,KAAR;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;AAWA,WAAS4C,WAAT,CAAqBa,KAArB,EAA4B;AAC1B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAO1E,MAAP;AACD;;AACDA,IAAAA,MAAM,GAAGwE,KAAT;AACAvE,IAAAA,SAAS,GAAG,OAAOD,MAAnB;AACA,WAAOe,KAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAAS6C,iBAAT,CAA2BY,KAA3B,EAAkC;AAChC,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOtE,eAAP;AACD;;AACDA,IAAAA,eAAe,GAAGoE,KAAlB;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAAS+C,gBAAT,CAA0BU,KAA1B,EAAiC;AAC/B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOrE,cAAP;AACD;;AACDA,IAAAA,cAAc,GAAGmE,KAAjB;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;AAWA,WAAS8C,iBAAT,CAA2BW,KAA3B,EAAkC;AAChC,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOpE,eAAP;AACD;;AACDA,IAAAA,eAAe,GAAGkE,KAAlB;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAASgD,cAAT,CAAwBS,KAAxB,EAA+B;AAC7B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOxE,SAAP;AACD;;AACDA,IAAAA,SAAS,GAAGsE,KAAZ;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;AAQA,WAASiD,cAAT,CAAwBQ,KAAxB,EAA+B;AAC7B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOvE,SAAP;AACD;;AACDA,IAAAA,SAAS,GAAGqE,KAAZ;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;;AAYA,WAASmD,aAAT,CAAuBM,KAAvB,EAA8B;AAC5B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOlE,QAAP;AACD;;AACDA,IAAAA,QAAQ,GAAGgE,KAAX;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;AAWA,WAASkD,eAAT,CAAyBO,KAAzB,EAAgC;AAC9B,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAOnE,UAAP;AACD;;AACDA,IAAAA,UAAU,GAAGiE,KAAb;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;AAWA,WAASqD,sBAAT,CAAgCI,KAAhC,EAAuC;AACrC,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAO5D,iBAAP;AACD;;AACDA,IAAAA,iBAAiB,GAAG0D,KAApB;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;;;;;;AAWA,WAASoD,iBAAT,CAA2BvB,MAA3B,EAAmCC,KAAnC,EAA0C;AACxCpC,IAAAA,YAAY,GAAG,IAAf;AACAE,IAAAA,YAAY,GAAGiC,MAAf;AACAlC,IAAAA,WAAW,GAAGmC,KAAd;AACA,WAAO9B,KAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAASsD,UAAT,CAAoBG,KAApB,EAA2B;AACzB,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,aAAO5E,KAAP;AACD;;AACDA,IAAAA,KAAK,GAAG0E,KAAR;AACA,WAAOzD,KAAP;AACD;AAED;;;;;;;;AAMA,WAASwD,WAAT,CAAqBI,QAArB,EAA+B;AAC7B9D,IAAAA,QAAQ,CACLQ,SADH,CACa,MADb,EAEGI,KAFH,CAES,SAFT,EAEoB,CAFpB,EAGGmD,UAHH,GAIGC,QAJH,CAIY,GAJZ,EAKGpD,KALH,CAKS,SALT,EAKoB,GALpB,EAMG6C,MANH;;AAOA,QAAI,CAACG,SAAS,CAACC,MAAf,EAAuB;AACrB7D,MAAAA,QAAQ,CACLQ,SADH,CACa,GADb,EAEGI,KAFH,CAES,SAFT,EAEoB,CAFpB,EAGGmD,UAHH,GAIGC,QAJH,CAIY,GAJZ,EAKGpD,KALH,CAKS,SALT,EAKoB,GALpB,EAMG6C,MANH;AAOD,KARD,MAQO;AACLzD,MAAAA,QAAQ,CACLQ,SADH,CACa,GADb,EAEGI,KAFH,CAES,SAFT,EAEoB,CAFpB,EAGGoD,QAHH,CAGY,GAHZ,EAIGpD,KAJH,CAIS,SAJT,EAIoB,GAJpB,EAKG6C,MALH,GAMGpC,EANH,CAMM,KANN,EAMayC,QANb;AAOD;;AACD,WAAO5D,KAAP;AACD;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import * as d3 from \"d3\";\n\nexport default function bubbleChart(title) {\n  var width = 960,\n    height = 960,\n    marginTop = 96,\n    minRadius = 6,\n    maxRadius = 20,\n    columnForColors = \"category\",\n    columnForTitle = \"title\",\n    columnForRadius = \"views\",\n    forceApart = -50,\n    unitName = \"hearts\",\n    customColors = false,\n    customRange,\n    customDomain,\n    chartSelection,\n    chartSVG,\n    showTitleOnCircle = false;\n\n  /**\n   * The command to actually render the chart after setting the settings.\n   * @public\n   * @param {string} selection - The div ID that you want to render in\n   */\n  function chart(selection) {\n    var data = selection.datum();\n    chartSelection = selection;\n    var div = selection,\n      svg = div.selectAll(\"svg\");\n    svg.attr(\"width\", width).attr(\"height\", height);\n    chartSVG = svg;\n\n    var tooltip = selection\n      .append(\"div\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"8px\")\n      .style(\"background-color\", \"#626D71\")\n      .style(\"border-radius\", \"6px\")\n      .style(\"text-align\", \"center\")\n      .style(\"font-family\", \"monospace\")\n      .style(\"width\", \"400px\")\n      .text(\"\");\n\n    var simulation = d3\n      .forceSimulation(data)\n      .force(\"charge\", d3.forceManyBody().strength([forceApart]))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n    function ticked(e) {\n      node.attr(\"transform\", function(d) {\n        return (\n          \"translate(\" + [d.x + width / 2, d.y + (height + marginTop) / 2] + \")\"\n        );\n      });\n    }\n\n    var colorCircles;\n    if (!customColors) {\n      colorCircles = d3.scaleOrdinal(d3.schemeCategory10);\n    } else {\n      colorCircles = d3\n        .scaleOrdinal()\n        .domain(customDomain)\n        .range(customRange);\n    }\n\n    var minRadiusDomain = d3.min(data, function(d) {\n      return +d[columnForRadius];\n    });\n    var maxRadiusDomain = d3.max(data, function(d) {\n      return +d[columnForRadius];\n    });\n    var scaleRadius = d3\n      .scaleLinear()\n      .domain([minRadiusDomain, maxRadiusDomain])\n      .range([minRadius, maxRadius]);\n\n    var node = svg\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + [width / 2, height / 2] + \")\")\n      .style(\"opacity\", 1);\n\n    node\n      .append(\"circle\")\n      .attr(\"id\", function(d, i) {\n        return i;\n      })\n      .attr(\"r\", function(d) {\n        return scaleRadius(d[columnForRadius]);\n      })\n      .style(\"fill\", function(d) {\n        return colorCircles(d[columnForColors]);\n      })\n      .on(\"mouseover\", function(d) {\n        tooltip.html(\n          d[columnForTitle] +\n            \"<br/>\" +\n            d[columnForColors] +\n            \"<br/>\" +\n            d[columnForRadius] +\n            \" \" +\n            unitName\n        );\n        return tooltip.style(\"visibility\", \"visible\");\n      })\n      .on(\"mousemove\", function() {\n        return tooltip\n          .style(\"top\", d3.event.pageY - 10 + \"px\")\n          .style(\"left\", d3.event.pageX + 10 + \"px\");\n      })\n      .on(\"mouseout\", function() {\n        return tooltip.style(\"visibility\", \"hidden\");\n      });\n    node\n      .append(\"clipPath\")\n      .attr(\"id\", function(d, i) {\n        return \"clip-\" + i;\n      })\n      .append(\"use\")\n      .attr(\"xlink:href\", function(d, i) {\n        return \"#\" + i;\n      });\n    if (showTitleOnCircle) {\n      node\n        .append(\"text\")\n        .attr(\"clip-path\", function(d, i) {\n          return \"url(#clip-\" + i + \")\";\n        })\n        .attr(\"text-anchor\", \"middle\")\n        .append(\"tspan\")\n        .attr(\"x\", function(d) {\n          return 0; //-1*scaleRadius(d[columnForRadius])/3;\n        })\n        .attr(\"y\", function(d) {\n          return \".3em\"; //scaleRadius(d[columnForRadius])/4;\n        })\n        .text(function(d) {\n          return d[columnForTitle];\n        })\n        .on(\"mouseover\", function(d) {\n          tooltip.html(\n            d[columnForTitle] +\n              \"<br/>\" +\n              d[columnForColors] +\n              \"<br/>\" +\n              d[columnForRadius] +\n              \" \" +\n              unitName\n          );\n          return tooltip.style(\"visibility\", \"visible\");\n        })\n        .on(\"mousemove\", function() {\n          return tooltip\n            .style(\"top\", d3.event.pageY - 10 + \"px\")\n            .style(\"left\", d3.event.pageX + 10 + \"px\");\n        })\n        .on(\"mouseout\", function() {\n          return tooltip.style(\"visibility\", \"hidden\");\n        });\n    }\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", marginTop)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"1.8em\")\n      .text(title);\n  }\n\n  chart.width = chartWidth;\n  chart.height = chartHeight;\n  chart.columnForColors = chartColForColors;\n  chart.columnForRadius = chartColForRadius;\n  chart.columnForTitle = chartColForTitle;\n  chart.minRadius = chartMinRadius;\n  chart.maxRadius = chartMaxRadius;\n  chart.forceApart = chartForceApart;\n  chart.unitName = chartUnitName;\n  chart.customColors = chartCustomColors;\n  chart.showTitleOnCircle = chartShowTitleOnCircle;\n  chart.title = chartTitle;\n  chart.remove = chartRemove;\n\n  /**\n   * Get/set the height of the chart\n   * Use 'chart.width' to get or set.\n   * @example\n   * chart.columnForColors(960);\t// Sets the width of the SVG to 960\n   * chart.columnForColors();\t// returns 960\n   *\n   * @public\n   * @param {number} [value] - The width of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartWidth(value) {\n    if (!arguments.length) {\n      return width;\n    }\n    width = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the height of the chart.\n   * Use 'chart.height' to get or set.\n   * @example\n   * chart.height(960);\t// Sets the height of the SVG to 960\n   * chart.height();\t\t// returns 960\n   *\n   * @public\n   * @param {number} [value] - The height of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartHeight(value) {\n    if (!arguments.length) {\n      return height;\n    }\n    height = value;\n    marginTop = 0.05 * height;\n    return chart;\n  }\n\n  /**\n   * Get/set the property used to determine the colors of the bubbles.\n   * Use 'chart.columnForColors' to get or set.\n   * @example\n   * chart.columnForColors(\"Sex\");\t// Sets the column to birthCount\n   * chart.columnForColors();\t// returns \"Sex\"\n   * @public\n   * @param {string} [value] - Property name to bind the bubble color to.\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartColForColors(value) {\n    if (!arguments.length) {\n      return columnForColors;\n    }\n    columnForColors = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the property to determine the titles of the bubbles.\n   * Use 'chart.columnForTitle' to get or set.\n   * @example\n   * chart.columnForTitle(\"Name\");\t// Sets the column to birthCount\n   * chart.columnForTitle();\t\t// returns \"Name\"\n   *\n   * @param {string} [value] - Property name to bind the bubble title to.\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartColForTitle(value) {\n    if (!arguments.length) {\n      return columnForTitle;\n    }\n    columnForTitle = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the property to determine the radii of the bubbles.\n   * Use 'chart.columnForRadius' to get or set.\n   *\n   * @example\n   * chart.columnForRadius(\"birthCount\");\t// Sets the column to birthCount\n   * chart.columnForRadius();\t\t// returns \"birthCount\"\n   * @public\n   * @param {string} [value] - Property name to bind the bubble radius to. Requires a numerical property.\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartColForRadius(value) {\n    if (!arguments.length) {\n      return columnForRadius;\n    }\n    columnForRadius = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the minimum radius of the bubbles.\n   * Use 'chart.minRadius' to get or set.\n   * @example\n   * \tchart.columnForColors(3); \t// Sets the column to birthCount\n   *  chart.columnForColors();\t// returns 3\n   *\n   * @param {number} [value] - The minimum radius for the width of the bubbles\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartMinRadius(value) {\n    if (!arguments.length) {\n      return minRadius;\n    }\n    minRadius = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the maximum radius of the bubbles.\n   * Use 'chart.maxRadius' to get or set.\n   *\n   * @public\n   * @param {number} [value] - The maximum radius of the bubbles for the largest value in the dataset\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartMaxRadius(value) {\n    if (!arguments.length) {\n      return maxRadius;\n    }\n    maxRadius = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the unit name for the property the is represented by the radius of the bubbles.\n   * Used in the tooltip of the bubbles.\n   * Use 'chart.unitName' to get or set.\n   * @example\n   * chart.unitName(\" babies\");\t// Sets the column to birthCount\n   * chart.unitName();\t\t// returns \" babies\"\n   *\n   * @public\n   * @param {any} [value] - The unit name to display on the tooltip when hovering over a bubble\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartUnitName(value) {\n    if (!arguments.length) {\n      return unitName;\n    }\n    unitName = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the force the separates and pushes together the bubbles on loading of the chart\n   * Use 'chart.forceApart' to get or set.\n   * @example\n   * chart.forceApart(150);\t// Sets the column to birthCount\n   * chart.forceApart();\t// returns 150\n   *\n   * @public\n   * @param {any} [value] - Determines the force to separate the bubbles from each other when loading the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartForceApart(value) {\n    if (!arguments.length) {\n      return forceApart;\n    }\n    forceApart = value;\n    return chart;\n  }\n\n  /**\n   * Get/set the property that determines if we show or hide the title of the data on the bubbles.\n   * Use 'chart.showTitleOnCircle' to get or set.\n   * @example\n   * chart.showTitleOnCircle(true);\n   * chart.forceApart();\t// returns true\n   *\n   * @public\n   * @param {boolean} [value] - Determines whether to show or hide the title of the data on the bubbles\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartShowTitleOnCircle(value) {\n    if (!arguments.length) {\n      return showTitleOnCircle;\n    }\n    showTitleOnCircle = value;\n    return chart;\n  }\n\n  /**\n   * Set the domain and range of the colors used for the bubbles. This is only needed if you want to use custom colors in the chart.\n   * Use 'chart.customColors' to set.\n   * @example\n   * chart.customColors([\"M\",\"F\"], [\"#70b7f0\",\"#e76486\"]); \t// Sets the custom colors domain and range\n   *\n   * @param {any[]} domain - The domain. This is the set of categories used for binding the colors.\n   * @param {string[]} range - The range. This is an array of color codes that you want to represent each category in the domain.\n   * \t\t\t\t\t\t\t Note: The length of the array must perfectly match the length of the domain array.\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartCustomColors(domain, range) {\n    customColors = true;\n    customDomain = domain;\n    customRange = range;\n    return chart;\n  }\n\n  /**\n   * Get/set the property that determines the title of the chart.\n   * Use 'chart.title' to get or set.\n   * @example\n   * chart.title(\"Birth Count in the U.S. in 2016\"); // Sets the chart title\n   * chart.title();\t// returns \"Birth Count in the U.S. in 2016\"\n   * @public\n   * @param {string} value - The title of the chart\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartTitle(value) {\n    if (!arguments.length) {\n      return title;\n    }\n    title = value;\n    return chart;\n  }\n\n  /**\n   * Animate the removal of data from the chart (and the title)\n   * @public\n   * @param {function} [callback] - At the end of each node animation call this function for each node\n   * @returns function - Chart, allowing chaining of commands\n   */\n  function chartRemove(callback) {\n    chartSVG\n      .selectAll(\"text\")\n      .style(\"opacity\", 1)\n      .transition()\n      .duration(500)\n      .style(\"opacity\", \"0\")\n      .remove();\n    if (!arguments.length) {\n      chartSVG\n        .selectAll(\"g\")\n        .style(\"opacity\", 1)\n        .transition()\n        .duration(500)\n        .style(\"opacity\", \"0\")\n        .remove();\n    } else {\n      chartSVG\n        .selectAll(\"g\")\n        .style(\"opacity\", 1)\n        .duration(500)\n        .style(\"opacity\", \"0\")\n        .remove()\n        .on(\"end\", callback);\n    }\n    return chart;\n  }\n\n  return chart;\n}\n"]},"metadata":{},"sourceType":"module"}