{"version":3,"sources":["pages/Homepage/index.js","pages/NotFound/index.js","components/Heatmap.js","components/BubbleTeaMap.js","components/BubbleTea/Bubbles.js","pages/Map/index.js","components/Logo/index.js","App.js","serviceWorker.js","index.js","static/loading.png","static/milk.svg"],"names":["Homepage","props","handleLocationSearch","location","fetch","then","res","json","data","latitude","longitude","setState","isRedirect","catch","err","JSON","stringify","setErr","state","this","str","to","className","style","color","icon","faSearch","type","value","onChange","e","target","onClick","Component","NotFound","mapsKey","require","gradient","Heatmap","google","zoom","initialCenter","center","onReady","handleMapReady","positions","opacity","radius","React","GoogleApiWrapper","apiKey","libraries","BubbleTeaMap","values","queryString","parse","window","search","lat","lng","businesses","i","length","latLng","coordinates","push","width","display","justifyContent","src","loading","d3","scaleLinear","domain","range","Map","maplocation","pathname","replace","Logo","href","alt","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0d57664d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport './Homepage.scss'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n// // import Logo from \"../../components/Logo\";\n// import Card from '../../components/BubbleCard'\n\n// import LocationSearchInput from '../../components/LocationSearchInput'\n\nclass Homepage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      location: '',\n      latitude: '',\n      longitude: '',\n      isRedirect: false,\n      err: '',\n    }\n  }\n\n  handleLocationSearch = location => {\n    fetch(`/location/${location}`)\n      .then(res => res.json())\n      .then(data => {\n        const { latitude, longitude } = data\n        this.setState({ latitude, longitude })\n        this.setState({ isRedirect: true })\n      })\n      .catch(err => {\n        this.setState({ err: JSON.stringify(err) })\n      })\n  }\n\n  setErr = err => {\n    this.setState({ err })\n  }\n\n  render() {\n    const { err, location, latitude, longitude, isRedirect } = this.state\n    if (isRedirect) {\n      const str = `/map?lat=${latitude}&lng=${longitude}`\n      return <Redirect to={str} />\n    }\n    return (\n      <div className=\"home-wrapper\">\n        <div>\n          <h1>Find Bubble Tea Places Near You</h1>\n          {err && <h1 style={{ color: 'red' }}>{err}</h1>}\n        </div>\n        <div className=\"bmb-form-box\">\n          <div className=\"input-group\">\n            <span className=\"input-group-label\">\n              <FontAwesomeIcon icon={faSearch} />\n            </span>\n            <input\n              type=\"text\"\n              value={location}\n              onChange={e => {\n                this.setState({ location: e.target.value })\n              }}\n            />\n            <button onClick={() => this.handleLocationSearch(location)}>\n              GO\n            </button>\n            {/* <LocationSearchInput setErr={this.setErr} /> */}\n          </div>\n          {/* <input\n            type=\"submit\"\n            placeholder=\"Enter your location\"\n            name=\"location\"\n            className=\"button primary white-color-text large\"\n            value=\"Go\"\n          /> */}\n        </div>\n        {/* <Card title=\"testing\" description=\"this\" /> */}\n      </div>\n    )\n  }\n}\nexport default Homepage\n","import React from \"react\";\n\nfunction NotFound() {\n  return <div> We can't find your tea :'(' </div>;\n}\n\nexport default NotFound;\n","import React, { Component } from \"react\";\nimport { Map, HeatMap, GoogleApiWrapper } from \"google-maps-react\";\nconst { mapsKey } = require('../config.json');\n\n// can change gradient to bubble tea oriented colors\n// lower the amount of colors in gradient since we only have 50 places\nconst gradient = [\n  \"rgba(0, 255, 255, 0)\",\n  \"rgba(0, 255, 255, 1)\",\n  \"rgba(0, 191, 255, 1)\",\n  \"rgba(0, 127, 255, 1)\",\n  \"rgba(0, 63, 255, 1)\",\n  \"rgba(0, 0, 255, 1)\",\n  \"rgba(0, 0, 223, 1)\",\n  \"rgba(0, 0, 191, 1)\",\n  \"rgba(0, 0, 159, 1)\",\n  \"rgba(0, 0, 127, 1)\",\n  \"rgba(63, 0, 91, 1)\",\n  \"rgba(127, 0, 63, 1)\",\n  \"rgba(191, 0, 31, 1)\",\n  \"rgba(255, 0, 0, 1)\"\n];\n\nclass Heatmap extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n        <div className=\"map-container\">\n            <Map\n            google={this.props.google}\n            className={\"map\"}\n            zoom={this.props.zoom}\n            initialCenter={this.props.center}\n            onReady={this.handleMapReady}\n            >\n                <HeatMap\n                    gradient={gradient}\n                    positions={this.props.positions}\n                    opacity={1}\n                    radius={20}\n                />\n            </Map>\n        </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: mapsKey,\n  libraries: [\"visualization\"]\n})(Heatmap);\n","import React, { Component } from 'react'\nimport Heatmap from './Heatmap'\nimport queryString from 'query-string'\nimport loading from '../static/loading.png'\nconst axios = require('axios')\n// const { YELP_TOKEN, mapsKey } = require(\"../config.json\");\n\nclass BubbleTeaMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // default lat lng to NYC BABY\n      data: [],\n    }\n  }\n\n  componentDidMount() {\n    const values = queryString.parse(window.location.search)\n    let data = []\n    fetch(`/yelp?lat=${values.lat}&lng=${values.lng}`)\n      .then(res => res.json())\n      .then(businesses => {\n        for (let i = 0; i < businesses.length; i++) {\n          const latLng = {\n            lat: businesses[i].coordinates.latitude,\n            lng: businesses[i].coordinates.longitude,\n          }\n          data.push(latLng)\n        }\n        this.setState({\n          data: data,\n        })\n      })\n  }\n\n  render() {\n    const values = queryString.parse(window.location.search)\n    const { data } = this.state\n    return !!data.length ? (\n      <Heatmap\n        center={{ lat: values.lat, lng: values.lng }}\n        zoom={12}\n        positions={data}\n      />\n    ) : (\n      <div\n        style={{\n          width: '100vw',\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={loading} />\n      </div>\n    )\n  }\n}\n\nexport default BubbleTeaMap\n","import React, { useState, useEffect } from 'react'\n\nconst d3 = require('d3')\n\nconst forceStrength = 0.03\n\nconst width = 940\nconst height = 600\nconst center = { x: width / 2, y: height / 2 }\n\nconst colorFn = d3\n  .scaleLinear()\n  .domain([7, 15])\n  .range(['#dcdbe8', '#F0DFC5', '#fbc4a7'])\n\nfunction startSimulation(bubbles, updateState) {\n  function charge(d) {\n    return -Math.pow(d.radius, 2.0) * forceStrength\n  }\n\n  const simulation = d3\n    .forceSimulation()\n    .velocityDecay(0.2)\n    .force(\n      'x',\n      d3\n        .forceX()\n        .strength(forceStrength)\n        .x(center.x)\n    )\n    .force(\n      'y',\n      d3\n        .forceY()\n        .strength(forceStrength)\n        .y(center.y)\n    )\n    .force('charge', d3.forceManyBody().strength(charge))\n    .on('tick', () => updateState(bubbles))\n    .stop()\n\n  simulation.nodes(bubbles)\n  simulation.alpha(1).restart()\n}\n\nfunction formatBubbleData(rawData) {\n  const maxValue = d3.max(rawData, function(d) {\n    return +d.value\n  })\n\n  const radiusScale = d3\n    .scalePow()\n    .exponent(0.5)\n    .range([2, 85])\n    .domain([0, maxValue])\n\n  const myBubbles = rawData.map(d => ({\n    name: d.name,\n    value: d.value,\n    radius: radiusScale(d.value),\n    x: Math.random() * width,\n    y: Math.random() * height,\n  }))\n\n  // sort them to prevent occlusion of smaller nodes.\n  myBubbles.sort(function(a, b) {\n    return b.value - a.value\n  })\n\n  return myBubbles\n}\n\nexport default function Bubbles({ data }) {\n  const [bubbles, setBubbles] = useState([])\n\n  useEffect(() => {\n    startSimulation(formatBubbleData(data), bubbles => {\n      setBubbles(() => [...bubbles])\n    })\n  }, [data])\n\n  return (\n    <svg className=\"bubbles\" width={width} height={height}>\n      {bubbles.map(bubble => {\n        return (\n          <circle\n            key={bubble.name}\n            r={bubble.radius}\n            fill={colorFn(bubble.value)}\n            stroke={d3.rgb(colorFn(bubble.value)).darker()}\n            strokeWidth={2}\n            cx={bubble.x}\n            cy={bubble.y}\n          >\n            <title>{bubble.name}</title>\n          </circle>\n        )\n      })}\n    </svg>\n  )\n}\n","import React, { Component } from 'react'\n// import Heatmap from '../../components/Heatmap';\nimport BubbleTeaMap from '../../components/BubbleTeaMap'\nimport BubbleTea from '../../components/BubbleTea'\nimport './Map.scss'\n\nfunction Map({ location }) {\n  const maplocation = location.pathname.replace('/map/', '')\n  return (\n    <div className=\"body-wrapper\">\n      <h1>Bubble Tea Heatmap</h1>\n      <BubbleTeaMap location={maplocation} />\n      <h1>Bubble Tea Flavor Popularity</h1>\n      {/* <BubbleTea /> */}\n    </div>\n  )\n}\n\nexport default Map\n","import React from \"react\";\nimport \"./Logo.scss\";\n\nfunction Logo() {\n  return (\n    <div className=\"grid-container\">\n      <a href=\"/\">\n        <img className=\"logo\" src={\"/stateastics.png\"} alt=\"logo\" />\n      </a>\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Homepage from \"./pages/Homepage\";\nimport NotFound from \"./pages/NotFound\";\nimport Map from \"./pages/Map\";\n\nimport Logo from \"./components/Logo\";\n// import Logo from \"../../components/Logo\";\n// import BubbleTea from \"../../components/BubbleTea\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"body-wrapper\">\n        <Logo />\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Homepage} />\n            <Route path=\"/map/:location\" component={Map} />\n            <Route path=\"/map\" component={Map} />\n            <Router path=\"/\" component={NotFound} />\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.4511a8b2.png\";","module.exports = __webpack_public_path__ + \"static/media/milk.45691eb3.svg\";"],"sourceRoot":""}